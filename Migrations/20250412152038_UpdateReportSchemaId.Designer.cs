// <auto-generated />
using System;
using HomeOwner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeOwner.Migrations
{
    [DbContext(typeof(HomeOwnerContext))]
    [Migration("20250412152038_UpdateReportSchemaId")]
    partial class UpdateReportSchemaId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HomeOwner.Models.Announcement", b =>
                {
                    b.Property<int>("announcement_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("announcement_id"));

                    b.Property<string>("author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("start_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("announcement_id");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("HomeOwner.Models.Comment", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comment_id"));

                    b.Property<int?>("author_id")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("comment_id");

                    b.HasIndex("author_id");

                    b.HasIndex("post_id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("HomeOwner.Models.Post", b =>
                {
                    b.Property<int>("post_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("post_id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("HomeOwner.Models.Report", b =>
                {
                    b.Property<int>("report_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("report_id"));

                    b.Property<int?>("author_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("report_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("report_facility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("report_severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("report_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("report_id");

                    b.HasIndex("author_id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("HomeOwner.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("date_created")
                        .HasColumnType("date");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HomeOwner.Models.Comment", b =>
                {
                    b.HasOne("HomeOwner.Models.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HomeOwner.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("HomeOwner.Models.Post", b =>
                {
                    b.HasOne("HomeOwner.Models.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("HomeOwner.Models.Report", b =>
                {
                    b.HasOne("HomeOwner.Models.User", "Author")
                        .WithMany("Reports")
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("HomeOwner.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("HomeOwner.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
