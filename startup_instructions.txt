# Steps to reset the database and migrations

## Step 1: Delete all migrations and drop the database
1. Run the `delete_migrations.bat` script by double-clicking it
2. This will delete all migration files and drop the existing database

## Step 2: Create a new migration
1. Open a command prompt in your project directory
2. Run the following command to create a new initial migration:
   ```
   dotnet ef migrations add InitialCreate
   ```

## Step 3: Update the database
1. After the migration is created, run the following command to create the database:
   ```
   dotnet ef database update
   ```

## Step 4: Seed the database with initial data (if needed)
1. If you want to add initial data, you can either:
   - Add seed data in the DbContext's OnModelCreating method
   - Or create a separate seeder class and call it from Program.cs

## Step 5: Test the application
1. Start the application and check if database operations work correctly
2. If there are any issues with column names, make sure your model properties match the column names in your controllers/queries

## Common issues to watch for:
1. Make sure the property names in your C# models match the column names expected in your queries
2. For fields that are missing in the database but referenced in code (like 'date_created' in ServiceRequest), either:
   - Add the property to your model, or
   - Update your queries to reference the correct field names

This approach completely resets your database and migrations, which is often the cleanest solution when you have inconsistencies between your models and database schema. 