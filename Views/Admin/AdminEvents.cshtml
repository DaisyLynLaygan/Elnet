@{
    Layout = "~/Views/Shared/Admin_Layout.cshtml";
    ViewData["Title"] = "Events";
    ViewData["Subtitle"] = "Manage Community Events";
}

<link rel="stylesheet" href="~/css/admin/events.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="events-container">
    <div class="events-header">
        <h1>@ViewData["Title"]</h1>
        <p class="subtitle">@ViewData["Subtitle"]</p>
        <button class="btn-add-event" id="addEventBtn">
            <i class="fas fa-plus"></i> <span class="btn-text">Add New Event</span>
        </button>
    </div>

    <div class="events-content">
        <!-- Calendar Section -->
        <div class="calendar-section">
            <div class="calendar-header">
                <button class="calendar-nav" id="prevMonth"><i class="fas fa-chevron-left"></i></button>
                <h2 id="currentMonthYear">March 2023</h2>
                <button class="calendar-nav" id="nextMonth"><i class="fas fa-chevron-right"></i></button>
            </div>
            <div class="calendar-grid" id="calendarGrid">
                <!-- Calendar will be generated by JavaScript -->
            </div>
        </div>

        <!-- Events List Section -->
        <div class="events-list-section">
            <div class="events-list-header">
                <h3>Upcoming Events</h3>
                <div class="view-options">
                    <button class="view-option active" data-view="list" title="List view"><i class="fas fa-list"></i> <span class="view-text">List</span></button>
                    <button class="view-option" data-view="grid" title="Grid view"><i class="fas fa-th-large"></i> <span class="view-text">Grid</span></button>
                </div>
            </div>
            
            <div class="events-list" id="eventsList">
                <!-- Events will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Event Modal -->
<div class="modal" id="eventModal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h3 id="modalTitle">Add New Event</h3>
        <form id="eventForm">
            <div class="form-group">
                <label for="eventTitle">Event Title</label>
                <input type="text" id="eventTitle" placeholder="Enter event title" required>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="eventDate">Date</label>
                    <input type="date" id="eventDate" required>
                </div>
                <div class="form-group">
                    <label for="startTime">Start Time</label>
                    <input type="time" id="startTime" required>
                </div>
                <div class="form-group">
                    <label for="endTime">End Time</label>
                    <input type="time" id="endTime" required>
                </div>
            </div>
            <div class="form-group">
                <label for="eventLocation">Location</label>
                <input type="text" id="eventLocation" placeholder="Enter location">
            </div>
            <div class="form-group">
                <label for="eventDescription">Description</label>
                <textarea id="eventDescription" rows="3" placeholder="Enter event description"></textarea>
            </div>
            <div class="form-group">
                <label>Tags</label>
                <div class="tag-options">
                    <label class="tag-option">
                        <input type="checkbox" name="tags" value="public"> Public
                    </label>
                    <label class="tag-option">
                        <input type="checkbox" name="tags" value="family"> Family
                    </label>
                    <label class="tag-option">
                        <input type="checkbox" name="tags" value="professional"> Professional
                    </label>
                    <label class="tag-option">
                        <input type="checkbox" name="tags" value="tech"> Technology
                    </label>
                    <label class="tag-option">
                        <input type="checkbox" name="tags" value="wellness"> Wellness
                    </label>
                    <label class="tag-option">
                        <input type="checkbox" name="tags" value="outdoor"> Outdoor
                    </label>
                </div>
            </div>
            <div class="form-group">
                <label class="featured-option">
                    <input type="checkbox" id="featuredEvent"> Featured Event
                </label>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="submit" class="btn-save">Save Event</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Calendar functionality
        const calendarGrid = document.getElementById('calendarGrid');
        const currentMonthYear = document.getElementById('currentMonthYear');
        const prevMonthBtn = document.getElementById('prevMonth');
        const nextMonthBtn = document.getElementById('nextMonth');
        const eventsList = document.getElementById('eventsList');
        
        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();
        
        // Sample events data - only future events
        const events = [
            {
                id: 1,
                title: "Community Spring Festival",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 2), // 2 days from now
                startTime: "10:00",
                endTime: "16:00",
                location: "Central Park",
                description: "Annual spring festival with food, games, and live music",
                tags: ["public", "family"],
                featured: false
            },
            {
                id: 2,
                title: "Tech Conference 2023",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 5), // 5 days from now
                startTime: "09:00",
                endTime: "18:00",
                location: "Convention Center",
                description: "Annual technology conference with keynote speakers and workshops",
                tags: ["professional", "tech"],
                featured: true
            },
            {
                id: 3,
                title: "Yoga in the Park",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 7), // 7 days from now
                startTime: "07:00",
                endTime: "08:30",
                location: "Riverside Park",
                description: "Morning yoga session for all skill levels",
                tags: ["wellness", "outdoor"],
                featured: false
            }
        ];
        
        // Initialize calendar
        function renderCalendar() {
            // Clear previous calendar
            calendarGrid.innerHTML = '';
            
            // Set month and year title
            const monthNames = ["January", "February", "March", "April", "May", "June", 
                               "July", "August", "September", "October", "November", "December"];
            currentMonthYear.textContent = `${monthNames[currentMonth]} ${currentYear}`;
            
            // Get first day of month and total days in month
            const firstDay = new Date(currentYear, currentMonth, 1).getDay();
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            
            // Create day headers
            const dayNames = ["S", "M", "T", "W", "T", "F", "S"]; // Single letter for small screens
            dayNames.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.className = 'calendar-day-header';
                dayHeader.textContent = day;
                calendarGrid.appendChild(dayHeader);
            });
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDay; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                calendarGrid.appendChild(emptyDay);
            }
            
            // Today's date for comparison
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            // Add cells for each day of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayCell = document.createElement('div');
                const cellDate = new Date(currentYear, currentMonth, day);
                
                // Check if this date is in the past
                if (cellDate < today) {
                    dayCell.className = 'calendar-day past';
                } 
                // Check if this is today
                else if (cellDate.getTime() === today.getTime()) {
                    dayCell.className = 'calendar-day today';
                }
                // Future date
                else {
                    dayCell.className = 'calendar-day future';
                }
                
                // Check if this date has events
                const dateEvents = events.filter(event => 
                    event.date.getDate() === day && 
                    event.date.getMonth() === currentMonth && 
                    event.date.getFullYear() === currentYear
                );
                
                // Add event indicator if there are events
                if (dateEvents.length > 0) {
                    dayCell.classList.add('has-events');
                    
                    // Add event dots for visualization
                    const eventIndicator = document.createElement('div');
                    eventIndicator.className = 'calendar-event-indicator';
                    
                    dateEvents.forEach(event => {
                        const eventDot = document.createElement('div');
                        eventDot.className = 'calendar-event-dot';
                        if (event.featured) {
                            eventDot.classList.add('featured');
                        }
                        eventIndicator.appendChild(eventDot);
                    });
                    
                    dayCell.appendChild(eventIndicator);
                }
                
                // Add day number
                const dayNumber = document.createElement('div');
                dayNumber.className = 'calendar-day-number';
                dayNumber.textContent = day;
                dayCell.appendChild(dayNumber);
                
                // Add click event to show events for this day
                dayCell.addEventListener('click', function() {
                    // Only allow interaction with future and current dates
                    if (!dayCell.classList.contains('past')) {
                        // Remove selected class from all days
                        document.querySelectorAll('.calendar-day').forEach(day => {
                            day.classList.remove('selected');
                        });
                        
                        // Add selected class to clicked day
                        this.classList.add('selected');
                        
                        // Filter and display events for this day
                        displayEventsForDate(day, currentMonth, currentYear);
                    }
                });
                
                calendarGrid.appendChild(dayCell);
            }
            
            // Display all upcoming events initially
            displayUpcomingEvents();
        }
        
        // Display all upcoming events in the list
        function displayUpcomingEvents() {
            eventsList.innerHTML = '';
            
            // Filter out past events
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            const upcomingEvents = events.filter(event => event.date >= today);
            
            if (upcomingEvents.length === 0) {
                eventsList.innerHTML = '<div class="no-events-message"><i class="far fa-calendar-plus"></i><p>No upcoming events scheduled</p></div>';
                return;
            }
            
            // Sort events by date
            const sortedEvents = [...upcomingEvents].sort((a, b) => a.date - b.date);
            
            sortedEvents.forEach(event => {
                eventsList.appendChild(createEventCard(event));
            });
        }
        
        // Display events for a specific date
        function displayEventsForDate(day, month, year) {
            eventsList.innerHTML = '';
            
            const filteredEvents = events.filter(event => 
                event.date.getDate() === day && 
                event.date.getMonth() === month && 
                event.date.getFullYear() === year
            );
            
            if (filteredEvents.length === 0) {
                eventsList.innerHTML = '<div class="no-events-message"><i class="far fa-calendar-times"></i><p>No events scheduled for this day</p></div>';
                return;
            }
            
            filteredEvents.forEach(event => {
                eventsList.appendChild(createEventCard(event));
            });
        }
        
        // Create an event card element
        function createEventCard(event) {
            const eventCard = document.createElement('div');
            eventCard.className = 'event-card';
            if (event.featured) {
                eventCard.classList.add('featured');
            }
            
            const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                              "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            const eventMonth = monthNames[event.date.getMonth()];
            
            // Format date status (Today, Tomorrow, or date)
            let dateStatus = `${event.date.getDate()} ${eventMonth}`;
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (event.date.getTime() === today.getTime()) {
                dateStatus = "Today";
            } else if (event.date.getTime() === today.getTime() + 86400000) {
                dateStatus = "Tomorrow";
            }
            
            eventCard.innerHTML = `
                <div class="event-date">
                    <span class="event-day">${event.date.getDate()}</span>
                    <span class="event-month">${eventMonth}</span>
                    <span class="event-date-status">${dateStatus}</span>
                </div>
                <div class="event-details">
                    <h4>${event.title}</h4>
                    <p class="event-time"><i class="far fa-clock"></i> ${formatTime(event.startTime)} - ${formatTime(event.endTime)}</p>
                    <p class="event-location"><i class="fas fa-map-marker-alt"></i> ${event.location}</p>
                    <p class="event-description">${event.description || ''}</p>
                    <div class="event-tags">
                        ${event.tags.map(tag => `<span class="tag ${tag}">${capitalizeFirstLetter(tag)}</span>`).join('')}
                    </div>
                </div>
                <div class="event-actions">
                    <button class="btn-action edit" title="Edit Event"><i class="fas fa-edit"></i></button>
                    <button class="btn-action delete" title="Delete Event"><i class="fas fa-trash"></i></button>
                </div>
            `;
            
            // Add edit and delete functionality
            const editBtn = eventCard.querySelector('.edit');
            const deleteBtn = eventCard.querySelector('.delete');
            
            editBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openEditModal(event);
            });
            
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                if (confirm('Are you sure you want to delete this event?')) {
                    // In a real app, you would remove from database
                    const index = events.findIndex(e => e.id === event.id);
                    if (index !== -1) {
                        events.splice(index, 1);
                        renderCalendar();
                        displayUpcomingEvents();
                    }
                }
            });
            
            return eventCard;
        }
        
        // Format time from 24h to 12h
        function formatTime(timeString) {
            const [hours, minutes] = timeString.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const hour12 = hour % 12 || 12;
            return `${hour12}:${minutes} ${ampm}`;
        }
        
        // Capitalize first letter
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        // Month navigation
        prevMonthBtn.addEventListener('click', function() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            renderCalendar();
        });
        
        nextMonthBtn.addEventListener('click', function() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            renderCalendar();
        });
        
        // View options
        const viewOptions = document.querySelectorAll('.view-option');
        viewOptions.forEach(option => {
            option.addEventListener('click', function() {
                viewOptions.forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                
                const eventsList = document.getElementById('eventsList');
                if (this.dataset.view === 'grid') {
                    eventsList.classList.add('grid-view');
                } else {
                    eventsList.classList.remove('grid-view');
                }
            });
        });
        
        // Modal functionality
        const modal = document.getElementById('eventModal');
        const addEventBtn = document.getElementById('addEventBtn');
        const closeModal = document.querySelector('.close-modal');
        const cancelBtn = document.querySelector('.btn-cancel');
        
        addEventBtn.addEventListener('click', function() {
            document.getElementById('modalTitle').textContent = 'Add New Event';
            // Set minimum date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('eventDate').min = today;
            document.getElementById('eventForm').reset();
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
        });
        
        closeModal.addEventListener('click', function() {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });
        
        cancelBtn.addEventListener('click', function() {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });
        
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });
        
        // Open edit modal with event data
        function openEditModal(event) {
            document.getElementById('modalTitle').textContent = 'Edit Event';
            
            // Fill form with event data
            document.getElementById('eventTitle').value = event.title;
            
            const formattedDate = `${event.date.getFullYear()}-${(event.date.getMonth() + 1).toString().padStart(2, '0')}-${event.date.getDate().toString().padStart(2, '0')}`;
            document.getElementById('eventDate').value = formattedDate;
            
            document.getElementById('startTime').value = event.startTime;
            document.getElementById('endTime').value = event.endTime;
            document.getElementById('eventLocation').value = event.location;
            document.getElementById('eventDescription').value = event.description || '';
            
            // Clear all tag checkboxes
            document.querySelectorAll('.tag-option input').forEach(checkbox => {
                checkbox.checked = false;
            });
            
            // Check the tags that apply
            event.tags.forEach(tag => {
                const checkbox = document.querySelector(`.tag-option input[value="${tag}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
            
            document.getElementById('featuredEvent').checked = event.featured;
            
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
        
        // Form submission
        document.getElementById('eventForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form values
            const title = document.getElementById('eventTitle').value;
            const date = document.getElementById('eventDate').value;
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            const location = document.getElementById('eventLocation').value;
            const description = document.getElementById('eventDescription').value;
            
            // Get selected tags
            const tags = [];
            document.querySelectorAll('.tag-option input:checked').forEach(checkbox => {
                tags.push(checkbox.value);
            });
            
            const featured = document.getElementById('featuredEvent').checked;
            
            // Create new event object
            const newEvent = {
                id: events.length + 1,
                title,
                date: new Date(date),
                startTime,
                endTime,
                location,
                description,
                tags,
                featured
            };
            
            // Only add future events
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (newEvent.date >= today) {
                events.push(newEvent);
                
                // Update UI
                renderCalendar();
                displayUpcomingEvents();
                
                // Close modal
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
            } else {
                alert('Please select a current or future date for the event.');
            }
        });
        
        // Initial render
        renderCalendar();
    });
</script>