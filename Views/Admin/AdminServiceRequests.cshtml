@{
    Layout = "~/Views/Shared/Admin_Layout.cshtml";
    ViewData["Title"] = "Service Requests";
    ViewData["Subtitle"] = "Manage Service Requests";
}

<link rel="stylesheet" href="~/css/admin/admin-service-requests.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<div class="service-requests-admin-container">
    <div class="service-requests-header">
        <h1>@ViewData["Title"]</h1>
        <p>@ViewData["Subtitle"]</p>
    </div>

    <!-- Stats Cards -->
    <div class="stats-grid">
        <div class="stat-card">
            <span class="stat-label">Total Requests</span>
            <span class="stat-value" id="totalRequests">0</span>
            <span class="stat-change" id="totalRequestsChange">
                <i class="fas fa-arrow-up"></i> Loading...
            </span>
        </div>
        <div class="stat-card">
            <span class="stat-label">Pending Approval</span>
            <span class="stat-value" id="pendingRequests">0</span>
            <span class="stat-change" id="pendingRequestsChange">
                <i class="fas fa-arrow-up"></i> Loading...
            </span>
        </div>
        <div class="stat-card">
            <span class="stat-label">Awaiting Payment</span>
            <span class="stat-value" id="unpaidRequests">0</span>
            <span class="stat-change" id="unpaidRequestsChange">
                <i class="fas fa-arrow-down"></i> Loading...
            </span>
        </div>
        <div class="stat-card">
            <span class="stat-label">Completed</span>
            <span class="stat-value" id="completedRequests">0</span>
            <span class="stat-change" id="completedRequestsChange">
                <i class="fas fa-arrow-up"></i> Loading...
            </span>
        </div>
    </div>

    <!-- Filter Controls -->
    <div class="filter-controls card">
        <div class="filter-row">
            <div class="filter-group">
                <label for="statusFilter">Status</label>
                <select id="statusFilter" class="form-select">
                    <option value="all">All Statuses</option>
                    <option value="Pending Approval">Pending Approval</option>
                    <option value="Approved">Approved</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="serviceTypeFilter">Service Type</label>
                <select id="serviceTypeFilter" class="form-select">
                    <option value="all">All Services</option>
                    <option value="House Cleaning">House Cleaning</option>
                    <option value="Garden Maintenance">Garden Maintenance</option>
                    <option value="Handyman Services">Handyman Services</option>
                    <option value="Safety Inspection">Safety Inspection</option>
                    <option value="Deep Cleaning">Deep Cleaning</option>
                    <option value="HVAC Maintenance">HVAC Maintenance</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="paymentFilter">Payment Status</label>
                <select id="paymentFilter" class="form-select">
                    <option value="all">All Payments</option>
                    <option value="Paid">Paid</option>
                    <option value="Unpaid">Unpaid</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="dateFilter">Date Range</label>
                <select id="dateFilter" class="form-select">
                    <option value="all">All Dates</option>
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="custom">Custom Range</option>
                </select>
            </div>
            <div class="filter-group date-range-group" id="customDateRange" style="display: none;">
                <label for="startDate">From</label>
                <input type="date" id="startDate" class="form-control">
                <label for="endDate">To</label>
                <input type="date" id="endDate" class="form-control">
            </div>
        </div>
    </div>

    <!-- Service Requests Table -->
    <div class="card">
        <div class="card-header">
            <h2>Service Requests</h2>
            <div class="card-actions">
                <button class="btn-icon" title="Refresh" id="refreshRequests">
                    <i class="fas fa-sync-alt"></i>
                </button>
                <button class="btn-icon" title="Export" id="exportRequests">
                    <i class="fas fa-download"></i>
                </button>
            </div>
        </div>
        
        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Request ID</th>
                        <th>Homeowner</th>
                        <th>Service</th>
                        <th>Scheduled Date</th>
                        <th>Status</th>
                        <th>Payment</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="serviceRequestsTableBody">
                    <!-- Table rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
        
        <div class="pagination" id="pagination">
            <!-- Pagination will be populated by JavaScript -->
        </div>
    </div>
</div>

<!-- Service Request Detail Modal -->
<div class="modal" id="serviceRequestModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Service Request Details</h3>
            <span class="close-modal">&times;</span>
        </div>
        <div class="modal-body">
            <div class="request-detail">
                <!-- Modal content will be populated by JavaScript -->
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary close-modal">Close</button>
            <button class="btn btn-danger" id="rejectRequestBtn">
                <i class="fas fa-times"></i> Reject Request
            </button>
            <button class="btn btn-primary" id="approveRequestBtn">
                <i class="fas fa-check"></i> Approve Request
            </button>
            <button class="btn btn-success" id="markPaidBtn" style="display: none;">
                <i class="fas fa-dollar-sign"></i> Mark as Paid
            </button>
            <button class="btn btn-success" id="markCompleteBtn" style="display: none;">
                <i class="fas fa-check-double"></i> Mark as Complete
            </button>
        </div>
    </div>
</div>

<!-- Rejection Reason Modal -->
<div class="modal" id="rejectionModal">
    <div class="modal-content small-modal">
        <div class="modal-header">
            <h3>Reason for Rejection</h3>
            <span class="close-modal">&times;</span>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="rejectionReason">Please specify the reason for rejecting this service request:</label>
                <select id="rejectionReason" class="form-control">
                    <option value="">Select a reason...</option>
                    <option value="unavailable">Service provider unavailable</option>
                    <option value="invalid">Invalid request</option>
                    <option value="payment">Payment issue</option>
                    <option value="other">Other reason</option>
                </select>
            </div>
            <div class="form-group" id="customReasonGroup" style="display: none;">
                <label for="customReason">Please specify:</label>
                <textarea id="customReason" class="form-control" rows="3"></textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary close-modal">Cancel</button>
            <button class="btn btn-danger" id="confirmRejectionBtn">Confirm Rejection</button>
        </div>
    </div>
</div>

<script src="~/js/admin/service-requests.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const modals = {
        serviceRequest: document.getElementById('serviceRequestModal'),
        rejection: document.getElementById('rejectionModal')
    };
    
    const closeButtons = document.querySelectorAll('.close-modal');
    const refreshButton = document.getElementById('refreshRequests');
    const exportButton = document.getElementById('exportRequests');
    const tableBody = document.getElementById('serviceRequestsTableBody');
    const pagination = document.getElementById('pagination');
    
    // Filter elements
    const statusFilter = document.getElementById('statusFilter');
    const serviceTypeFilter = document.getElementById('serviceTypeFilter');
    const paymentFilter = document.getElementById('paymentFilter');
    const dateFilter = document.getElementById('dateFilter');
    const customDateRange = document.getElementById('customDateRange');
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');
    
    // Modal action buttons
    const approveRequestBtn = document.getElementById('approveRequestBtn');
    const rejectRequestBtn = document.getElementById('rejectRequestBtn');
    const markPaidBtn = document.getElementById('markPaidBtn');
    const markCompleteBtn = document.getElementById('markCompleteBtn');
    const confirmRejectionBtn = document.getElementById('confirmRejectionBtn');
    
    // Rejection modal elements
    const rejectionReason = document.getElementById('rejectionReason');
    const customReasonGroup = document.getElementById('customReasonGroup');
    const customReason = document.getElementById('customReason');
    
    // Stats elements
    const totalRequests = document.getElementById('totalRequests');
    const pendingRequests = document.getElementById('pendingRequests');
    const unpaidRequests = document.getElementById('unpaidRequests');
    const completedRequests = document.getElementById('completedRequests');
    
    // Current request being viewed
    let currentRequestId = null;
    let currentPage = 1;
    let totalPages = 1;
    let currentFilters = {
        status: 'all',
        serviceType: 'all',
        paymentStatus: 'all',
        dateRange: 'all',
        startDate: null,
        endDate: null
    };
    
    // Initialize WebSocket connection
    let ws = null;
    function initWebSocket() {
        ws = new WebSocket(`ws://${window.location.host}/ws/admin/service-requests`);
        
        ws.onopen = function() {
            console.log('WebSocket connection established');
        };
        
        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            if (data.type === 'stats_update') {
                updateStats(data.stats);
            } else if (data.type === 'request_update') {
                loadServiceRequests();
            }
        };
        
        ws.onclose = function() {
            console.log('WebSocket connection closed, attempting to reconnect...');
            setTimeout(initWebSocket, 5000);
        };
        
        ws.onerror = function(error) {
            console.error('WebSocket error:', error);
        };
    }
    
    // Load service requests on page load
    loadServiceRequests();
    initWebSocket();
    
    // Event Listeners
    
    // Filter changes
    statusFilter.addEventListener('change', function() {
        currentFilters.status = this.value;
        currentPage = 1;
        loadServiceRequests();
    });
    
    serviceTypeFilter.addEventListener('change', function() {
        currentFilters.serviceType = this.value;
        currentPage = 1;
        loadServiceRequests();
    });
    
    paymentFilter.addEventListener('change', function() {
        currentFilters.paymentStatus = this.value;
        currentPage = 1;
        loadServiceRequests();
    });
    
    dateFilter.addEventListener('change', function() {
        currentFilters.dateRange = this.value;
        if (this.value === 'custom') {
            customDateRange.style.display = 'flex';
        } else {
            customDateRange.style.display = 'none';
            currentFilters.startDate = null;
            currentFilters.endDate = null;
            currentPage = 1;
            loadServiceRequests();
        }
    });
    
    startDate.addEventListener('change', function() {
        currentFilters.startDate = this.value;
        if (currentFilters.endDate) {
            currentPage = 1;
            loadServiceRequests();
        }
    });
    
    endDate.addEventListener('change', function() {
        currentFilters.endDate = this.value;
        if (currentFilters.startDate) {
            currentPage = 1;
            loadServiceRequests();
        }
    });
    
    // Refresh button click
    if (refreshButton) {
        refreshButton.addEventListener('click', loadServiceRequests);
    }
    
    // Export button click
    if (exportButton) {
        exportButton.addEventListener('click', exportServiceRequests);
    }
    
    // Load service requests from server
    async function loadServiceRequests() {
        try {
            const queryParams = new URLSearchParams({
                page: currentPage,
                status: currentFilters.status,
                serviceType: currentFilters.serviceType,
                paymentStatus: currentFilters.paymentStatus,
                dateRange: currentFilters.dateRange,
                startDate: currentFilters.startDate || '',
                endDate: currentFilters.endDate || ''
            });
            
            const response = await fetch(`/Admin/GetServiceRequests?${queryParams}`);
            const data = await response.json();
            
            if (data.success) {
                updateServiceRequestsTable(data.requests);
                updatePagination(data.totalPages);
                updateStats(data.stats);
            } else {
                console.error('Error loading service requests:', data.message);
                showError(data.message || 'Failed to load service requests');
            }
        } catch (error) {
            console.error('Error loading service requests:', error);
            showError('Failed to load service requests');
        }
    }
    
    // Update service requests table
    function updateServiceRequestsTable(requests) {
        if (!tableBody) return;
        
        tableBody.innerHTML = requests.map(request => `
            <tr>
                <td>#SR-${request.request_id}</td>
                <td>
                    <div class="user-info">
                        <div class="user-avatar">${request.user.firstname.charAt(0)}${request.user.lastname.charAt(0)}</div>
                        <div class="user-details">
                            <h4>${request.user.firstname} ${request.user.lastname}</h4>
                            <p>${request.user.email}</p>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="service-info">
                        <div class="service-icon">${request.service_icon}</div>
                        <span>${request.service_type}</span>
                    </div>
                </td>
                <td>
                    <div class="date-time">
                        <div class="date">${new Date(request.scheduled_date).toLocaleDateString()}</div>
                        <div class="time">${request.scheduled_time}</div>
                    </div>
                </td>
                <td><span class="badge ${getStatusClass(request.status)}">${request.status}</span></td>
                <td><span class="badge ${request.payment_status === 'Paid' ? 'success' : 'danger'}">${request.payment_status}</span></td>
                <td>
                    <button class="btn-icon view-details" title="View Details" data-id="${request.request_id}">
                        <i class="fas fa-eye"></i>
                    </button>
                    ${request.status === 'Pending Approval' ? `
                        <button class="btn-icon approve-request" title="Approve" data-id="${request.request_id}">
                            <i class="fas fa-check"></i>
                        </button>
                        <button class="btn-icon reject-request" title="Reject" data-id="${request.request_id}">
                            <i class="fas fa-times"></i>
                        </button>
                    ` : ''}
                    ${request.status === 'Approved' && request.payment_status === 'Unpaid' ? `
                        <button class="btn-icon mark-paid" title="Mark as Paid" data-id="${request.request_id}">
                            <i class="fas fa-dollar-sign"></i>
                        </button>
                    ` : ''}
                    ${request.status === 'Approved' && request.payment_status === 'Paid' ? `
                        <button class="btn-icon mark-complete" title="Mark as Complete" data-id="${request.request_id}">
                            <i class="fas fa-check-double"></i>
                        </button>
                    ` : ''}
                </td>
            </tr>
        `).join('');
        
        // Add event listeners to the new buttons
        addEventListeners();
    }
    
    // Update pagination
    function updatePagination(totalPages) {
        if (!pagination) return;
        
        totalPages = totalPages || 1;
        let paginationHTML = '';
        
        if (currentPage > 1) {
            paginationHTML += `<button class="pagination-btn" data-page="${currentPage - 1}">
                <i class="fas fa-chevron-left"></i> Previous
            </button>`;
        }
        
        for (let i = 1; i <= totalPages; i++) {
            paginationHTML += `<button class="pagination-btn ${i === currentPage ? 'active' : ''}" data-page="${i}">${i}</button>`;
        }
        
        if (currentPage < totalPages) {
            paginationHTML += `<button class="pagination-btn" data-page="${currentPage + 1}">
                Next <i class="fas fa-chevron-right"></i>
            </button>`;
        }
        
        pagination.innerHTML = paginationHTML;
        
        // Add event listeners to pagination buttons
        document.querySelectorAll('.pagination-btn').forEach(button => {
            button.addEventListener('click', function() {
                currentPage = parseInt(this.getAttribute('data-page'));
                loadServiceRequests();
            });
        });
    }
    
    // Update stats
    function updateStats(stats) {
        if (!stats) return;
        
        if (totalRequests) totalRequests.textContent = stats.total;
        if (pendingRequests) pendingRequests.textContent = stats.pending;
        if (unpaidRequests) unpaidRequests.textContent = stats.unpaid;
        if (completedRequests) completedRequests.textContent = stats.completed;
        
        // Update change indicators
        updateChangeIndicator('totalRequestsChange', stats.totalChange);
        updateChangeIndicator('pendingRequestsChange', stats.pendingChange);
        updateChangeIndicator('unpaidRequestsChange', stats.unpaidChange);
        updateChangeIndicator('completedRequestsChange', stats.completedChange);
    }
    
    function updateChangeIndicator(elementId, change) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        const isPositive = change >= 0;
        element.innerHTML = `<i class="fas fa-arrow-${isPositive ? 'up' : 'down'}"></i> ${Math.abs(change)}%`;
        element.className = `stat-change ${isPositive ? 'positive' : 'negative'}`;
    }
    
    // Export service requests
    async function exportServiceRequests() {
        try {
            const queryParams = new URLSearchParams({
                status: currentFilters.status,
                serviceType: currentFilters.serviceType,
                paymentStatus: currentFilters.paymentStatus,
                dateRange: currentFilters.dateRange,
                startDate: currentFilters.startDate || '',
                endDate: currentFilters.endDate || ''
            });
            
            const response = await fetch(`/Admin/ExportServiceRequests?${queryParams}`);
            const blob = await response.blob();
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `service-requests-${new Date().toISOString().split('T')[0]}.xlsx`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Error exporting service requests:', error);
            showError('Failed to export service requests');
        }
    }
    
    // Add event listeners to table buttons
    function addEventListeners() {
        // View details button click
        document.querySelectorAll('.view-details').forEach(button => {
            button.addEventListener('click', function() {
                const requestId = this.getAttribute('data-id');
                openServiceRequestModal(requestId);
            });
        });
        
        // Approve request button click
        document.querySelectorAll('.approve-request').forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                const requestId = this.getAttribute('data-id');
                if (confirm('Are you sure you want to approve this service request?')) {
                    updateRequestStatus(requestId, 'Approved');
                }
            });
        });
        
        // Reject request button click
        document.querySelectorAll('.reject-request').forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                const requestId = this.getAttribute('data-id');
                currentRequestId = requestId;
                openRejectionModal();
            });
        });
        
        // Mark as paid button click
        document.querySelectorAll('.mark-paid').forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                const requestId = this.getAttribute('data-id');
                if (confirm('Are you sure you want to mark this request as paid?')) {
                    updateRequestPaymentStatus(requestId, 'Paid');
                }
            });
        });
        
        // Mark as complete button click
        document.querySelectorAll('.mark-complete').forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                const requestId = this.getAttribute('data-id');
                if (confirm('Are you sure you want to mark this request as complete?')) {
                    updateRequestStatus(requestId, 'Completed');
                }
            });
        });
    }
    
    // Open service request modal
    async function openServiceRequestModal(requestId) {
        try {
            const response = await fetch(`/Admin/GetServiceRequest/${requestId}`);
            const data = await response.json();
            
            if (data.success) {
                const request = data.request;
                currentRequestId = requestId;
                
                // Set modal content
                const modalBody = document.querySelector('.modal-body .request-detail');
                if (!modalBody) return;
                
                modalBody.innerHTML = `
                    <div class="request-header">
                        <div class="request-id">#SR-${request.request_id}</div>
                        <div class="request-status">
                            <span class="badge ${getStatusClass(request.status)}">${request.status}</span>
                        </div>
                    </div>
                    
                    <div class="request-content">
                        <div class="request-section">
                            <h4>Homeowner Information</h4>
                            <div class="request-user">
                                <div class="user-avatar">${request.user.firstname.charAt(0)}${request.user.lastname.charAt(0)}</div>
                                <div class="user-details">
                                    <h4>${request.user.firstname} ${request.user.lastname}</h4>
                                    <p>${request.user.email}</p>
                                    <div class="user-contact">
                                        <i class="fas fa-phone"></i> ${request.user.contact_no || 'N/A'}<br>
                                        <i class="fas fa-envelope"></i> ${request.user.email}
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="request-section">
                            <h4>Service Details</h4>
                            <div class="service-info">
                                <div class="service-icon">${request.service_icon}</div>
                                <div class="service-details">
                                    <h4>${request.service_type}</h4>
                                    <div class="service-meta">
                                        <span><strong>Price:</strong> $${request.price.toFixed(2)}</span>
                                        <span><strong>Frequency:</strong> ${request.frequency}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="request-section">
                            <h4>Request Information</h4>
                            <div class="request-meta">
                                <div class="meta-item">
                                    <label>Request Date:</label>
                                    <span>${new Date(request.date_created).toLocaleDateString()}</span>
                                </div>
                                <div class="meta-item">
                                    <label>Scheduled Date:</label>
                                    <span>${new Date(request.scheduled_date).toLocaleDateString()}</span>
                                </div>
                                <div class="meta-item">
                                    <label>Scheduled Time:</label>
                                    <span>${request.scheduled_time}</span>
                                </div>
                                <div class="meta-item">
                                    <label>Payment Status:</label>
                                    <span class="badge ${request.payment_status === 'Paid' ? 'success' : 'danger'}">${request.payment_status}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="request-section">
                            <h4>Special Instructions</h4>
                            <div class="special-instructions">
                                ${request.notes || 'No special instructions provided.'}
                            </div>
                        </div>
                    </div>
                `;
                
                // Show/hide action buttons based on status
                if (approveRequestBtn) approveRequestBtn.style.display = 'none';
                if (rejectRequestBtn) rejectRequestBtn.style.display = 'none';
                if (markPaidBtn) markPaidBtn.style.display = 'none';
                if (markCompleteBtn) markCompleteBtn.style.display = 'none';
                
                if (request.status === 'Pending Approval') {
                    if (approveRequestBtn) approveRequestBtn.style.display = 'inline-block';
                    if (rejectRequestBtn) rejectRequestBtn.style.display = 'inline-block';
                } else if (request.status === 'Approved' && request.payment_status === 'Unpaid') {
                    if (markPaidBtn) markPaidBtn.style.display = 'inline-block';
                } else if (request.status === 'Approved' && request.payment_status === 'Paid') {
                    if (markCompleteBtn) markCompleteBtn.style.display = 'inline-block';
                }
                
                // Open modal
                if (modals.serviceRequest) {
                    modals.serviceRequest.style.display = 'flex';
                    document.body.style.overflow = 'hidden';
                    document.body.classList.add('modal-open');
                }
            } else {
                console.error('Error loading service request:', data.message);
                showError(data.message || 'Failed to load service request details');
            }
        } catch (error) {
            console.error('Error loading service request:', error);
            showError('Failed to load service request details');
        }
    }
    
    // Open rejection modal
    function openRejectionModal() {
        // Reset rejection form
        if (rejectionReason) rejectionReason.value = '';
        if (customReason) customReason.value = '';
        if (customReasonGroup) customReasonGroup.style.display = 'none';
        
        // Open modal
        if (modals.rejection) {
            modals.rejection.style.display = 'flex';
            document.body.style.overflow = 'hidden';
            document.body.classList.add('modal-open');
        }
    }
    
    // Close all modals
    function closeAllModals() {
        Object.values(modals).forEach(modal => {
            if (modal) modal.style.display = 'none';
        });
        document.body.classList.remove('modal-open');
        document.body.style.overflow = 'auto';
    }
    
    // Update request status
    async function updateRequestStatus(requestId, status) {
        try {
            const response = await fetch('/Admin/UpdateServiceRequestStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    request_id: requestId,
                    status: status
                })
            });
            
            const data = await response.json();
            if (data.success) {
                loadServiceRequests();
                closeAllModals();
                showSuccess(`Service request ${status.toLowerCase()} successfully`);
            } else {
                console.error('Error updating request status:', data.message);
                showError(data.message || 'Failed to update request status');
            }
        } catch (error) {
            console.error('Error updating request status:', error);
            showError('Failed to update request status');
        }
    }
    
    // Update request payment status
    async function updateRequestPaymentStatus(requestId, paymentStatus) {
        try {
            const response = await fetch('/Admin/UpdateServiceRequestStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    request_id: requestId,
                    payment_status: paymentStatus
                })
            });
            
            const data = await response.json();
            if (data.success) {
                loadServiceRequests();
                closeAllModals();
                showSuccess(`Service request marked as ${paymentStatus.toLowerCase()} successfully`);
            } else {
                console.error('Error updating payment status:', data.message);
                showError(data.message || 'Failed to update payment status');
            }
        } catch (error) {
            console.error('Error updating payment status:', error);
            showError('Failed to update payment status');
        }
    }
    
    // Get status class for badge
    function getStatusClass(status) {
        switch(status) {
            case 'Pending Approval': return 'warning';
            case 'Approved': return 'primary';
            case 'Rejected': return 'danger';
            case 'Completed': return 'success';
            default: return 'secondary';
        }
    }
    
    // Notification functions
    function showSuccess(message) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: message,
            timer: 3000,
            showConfirmButton: false
        });
    }
    
    function showError(message) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: message
        });
    }
    
    // Event Listeners
    
    // Close buttons
    closeButtons.forEach(button => {
        button.addEventListener('click', closeAllModals);
    });
    
    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            closeAllModals();
        }
    });
    
    // Approve request button click (from modal)
    if (approveRequestBtn) {
        approveRequestBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to approve this service request?')) {
                updateRequestStatus(currentRequestId, 'Approved');
            }
        });
    }
    
    // Reject request button click (from modal)
    if (rejectRequestBtn) {
        rejectRequestBtn.addEventListener('click', function() {
            openRejectionModal();
        });
    }
    
    // Mark as paid button click (from modal)
    if (markPaidBtn) {
        markPaidBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to mark this request as paid?')) {
                updateRequestPaymentStatus(currentRequestId, 'Paid');
            }
        });
    }
    
    // Mark as complete button click (from modal)
    if (markCompleteBtn) {
        markCompleteBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to mark this request as complete?')) {
                updateRequestStatus(currentRequestId, 'Completed');
            }
        });
    }
    
    // Confirm rejection button click
    if (confirmRejectionBtn) {
        confirmRejectionBtn.addEventListener('click', function() {
            const reason = rejectionReason.value;
            let rejectionNote = '';
            
            if (!reason) {
                showError('Please select a reason for rejection.');
                return;
            }
            
            if (reason === 'other') {
                rejectionNote = customReason.value.trim();
                if (!rejectionNote) {
                    showError('Please specify the reason for rejection.');
                    return;
                }
            } else {
                // Get the text of the selected option
                rejectionNote = rejectionReason.options[rejectionReason.selectedIndex].text;
            }
            
            updateRequestStatus(currentRequestId, 'Rejected');
            closeAllModals();
        });
    }
    
    // Rejection reason change
    if (rejectionReason) {
        rejectionReason.addEventListener('change', function() {
            if (this.value === 'other') {
                customReasonGroup.style.display = 'block';
            } else {
                customReasonGroup.style.display = 'none';
            }
        });
    }
});
</script>