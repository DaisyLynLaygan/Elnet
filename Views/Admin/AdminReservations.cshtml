@{
    Layout = "~/Views/Shared/Admin_Layout.cshtml";
    ViewData["Title"] = "Reservations";
    ViewData["Subtitle"] = "Manage Facility Reservations";
}
<link rel="stylesheet" href="~/css/admin/reservation.css" />

<div class="reservations-container">
    <div class="reservations-header">
        <div class="reservations-title">
            <h2>@ViewData["Title"]</h2>
            <p>@ViewData["Subtitle"]</p>
        </div>
        <div class="reservations-actions">
            <button class="btn btn-primary" id="manageFacilitiesBtn">
                <i class="fas fa-building"></i> Manage Facilities
            </button>
        </div>
    </div>

    <div class="reservations-tabs">
        <div class="reservations-tab active" data-tab="all">All Reservations</div>
        <div class="reservations-tab" data-tab="pending">Pending Approval</div>
        <div class="reservations-tab" data-tab="approved">Approved</div>
        <div class="reservations-tab" data-tab="completed">Completed</div>
    </div>

    <div class="reservations-table-container">
        <table class="reservations-table">
            <thead>
                <tr>
                    <th>Reservation ID</th>
                    <th>Facility</th>
                    <th>Resident</th>
                    <th>Date & Time</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="reservationsTableBody">
                <!-- Reservations will be populated here -->
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="pagination-container">
        <div class="pagination-info" id="paginationInfo"></div>
        <div class="pagination-controls">
            <button class="btn btn-outline" id="prevPageBtn" disabled>
                <i class="fas fa-chevron-left"></i> Previous
            </button>
            <div class="page-numbers" id="pageNumbers"></div>
            <button class="btn btn-outline" id="nextPageBtn">
                Next <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

<!-- Facilities Management Modal -->
<div class="modal-overlay" id="facilitiesModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Manage Facilities</h3>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="facilities-grid">
                <div class="facility-card" data-facility="function-hall">
                    <div class="facility-image">
                        <img src="~/images/function-hall.jpg" alt="Function Hall">
                        <span class="facility-status available">Available</span>
                    </div>
                    <div class="facility-details">
                        <h4 class="facility-name">Function Hall</h4>
                        <div class="facility-meta">
                        </div>
                        <div class="facility-actions">
                            <button class="toggle-availability available">
                                <i class="fas fa-times"></i> Set Unavailable
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="facility-card" data-facility="sports-court">
                    <div class="facility-image">
                        <img src="~/images/sports-court.jpg" alt="Sports Court">
                        <span class="facility-status available">Available</span>
                    </div>
                    <div class="facility-details">
                        <h4 class="facility-name">Sports Court</h4>
                        <div class="facility-meta">
                        </div>
                        <div class="facility-actions">
                            <button class="toggle-availability available">
                                <i class="fas fa-times"></i> Set Unavailable
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="facility-card" data-facility="swimming-pool">
                    <div class="facility-image">
                        <img src="~/images/swimming-pool.jpg" alt="Swimming Pool">
                        <span class="facility-status unavailable">Unavailable</span>
                    </div>
                    <div class="facility-details">
                        <h4 class="facility-name">Swimming Pool</h4>
                        <div class="facility-meta">
                        </div>
                        <div class="facility-actions">
                            <button class="toggle-availability unavailable">
                                <i class="fas fa-check"></i> Set Available
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="facility-card" data-facility="fitness-gym">
                    <div class="facility-image">
                        <img src="~/images/gym.jpg" alt="Gym Facility">
                        <span class="facility-status available">Available</span>
                    </div>
                    <div class="facility-details">
                        <h4 class="facility-name">Fitness Gym</h4>
                        <div class="facility-meta">
                        </div>
                        <div class="facility-actions">
                            <button class="toggle-availability available">
                                <i class="fas fa-times"></i> Set Unavailable
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-outline close-modal-btn">Close</button>
        </div>
    </div>
</div>

<!-- Reservation Details Modal -->
<div class="modal-overlay" id="detailsModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Reservation Details</h3>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="details-summary">
                <h4 id="detailsReservationId">Reservation #RES-2023-002</h4>
                <div class="details-item">
                    <span class="details-label">Status:</span>
                    <span class="details-value" id="detailsStatus"><span class="status-badge status-pending">Pending</span></span>
                </div>
                <div class="details-item">
                    <span class="details-label">Facility:</span>
                    <span class="details-value" id="detailsFacility">Sports Court</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Resident:</span>
                    <span class="details-value" id="detailsResident">Maria Garcia (Unit 205)</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Date:</span>
                    <span class="details-value" id="detailsDate">16 Oct 2023</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Time:</span>
                    <span class="details-value" id="detailsTime">09:00 - 11:00 (2 hours)</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Guests:</span>
                    <span class="details-value" id="detailsGuests">15 people</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Purpose:</span>
                    <span class="details-value" id="detailsPurpose">Badminton Tournament</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Total Amount:</span>
                    <span class="details-value" id="detailsAmount">$100.00</span>
                </div>
            </div>
            
            <div class="staff-notes">
                <h5>Staff Notes</h5>
                <textarea id="staffNotes" placeholder="Add any notes for staff..."></textarea>
                <div class="modal-footer">
                    <button class="btn btn-outline">Cancel</button>
                    <button class="btn btn-primary" id="saveNotesBtn">Save Notes</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Sample reservation data
const reservations = [
    {
        id: "RES-2023-001",
        facility: "Function Hall",
        resident: "John Smith (Unit 101)",
        dateTime: "15 Oct 2023, 14:00-18:00",
        date: "15 Oct 2023",
        time: "14:00 - 18:00 (4 hours)",
        status: "approved",
        guests: "50 people",
        purpose: "Wedding Anniversary",
        amount: "$500.00",
        notes: ""
    },
];

let adminSocket;
let retryCount = 0;
const maxRetries = 5;
const retryDelay = 3000;
const FACILITY_STATUS_KEY = 'facility_statuses';

function connectWebSocket() {
    try {
        const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
        const host = window.location.host;
        
        adminSocket = new WebSocket(`${protocol}${host}/ws/admin`);
        
        adminSocket.onopen = function() {
            console.log('Admin WebSocket connection established');
            retryCount = 0;
            requestCurrentStatuses();
        };
        
        adminSocket.onmessage = function(event) {
            const data = JSON.parse(event.data);
            if (data.type === 'facility_status_update') {
                updateFacilityStatus(data.facility, data.status);
                saveFacilityStatus(data.facility, data.status);
            } else if (data.type === 'current_statuses') {
                data.statuses.forEach(status => {
                    updateFacilityStatus(status.facility, status.status);
                    saveFacilityStatus(status.facility, status.status);
                });
            }
        };
        
        adminSocket.onerror = function(error) {
            console.error('Admin WebSocket error:', error);
        };
        
        adminSocket.onclose = function(event) {
            console.log('Admin WebSocket connection closed', event.code, event.reason);
            if (retryCount < maxRetries) {
                retryCount++;
                setTimeout(connectWebSocket, retryDelay);
            }
        };
    } catch (error) {
        console.error('WebSocket initialization failed:', error);
        if (retryCount < maxRetries) {
            retryCount++;
            setTimeout(connectWebSocket, retryDelay);
        }
    }
}

function requestCurrentStatuses() {
    if (adminSocket && adminSocket.readyState === WebSocket.OPEN) {
        adminSocket.send(JSON.stringify({
            type: 'request_current_statuses'
        }));
    }
}

function saveFacilityStatus(facility, status) {
    const statuses = getFacilityStatuses();
    statuses[facility] = status;
    localStorage.setItem(FACILITY_STATUS_KEY, JSON.stringify(statuses));
}

function getFacilityStatuses() {
    const statuses = localStorage.getItem(FACILITY_STATUS_KEY);
    return statuses ? JSON.parse(statuses) : {};
}
function updateFacilityStatus(facility, status) {
    const facilityCard = document.querySelector(`.facility-card[data-facility="${facility}"]`);
    if (!facilityCard) return;

    const statusBadge = facilityCard.querySelector('.facility-status');
    const toggleBtn = facilityCard.querySelector('.toggle-availability');
    
    if (status === 'unavailable') {
        statusBadge.classList.replace('available', 'unavailable');
        statusBadge.textContent = 'Unavailable';
        toggleBtn.classList.replace('available', 'unavailable');
        toggleBtn.innerHTML = '<i class="fas fa-check"></i> Set Available';
    } else {
        statusBadge.classList.replace('unavailable', 'available');
        statusBadge.textContent = 'Available';
        toggleBtn.classList.replace('unavailable', 'available');
        toggleBtn.innerHTML = '<i class="fas fa-times"></i> Set Unavailable';
    }
}

function initializeFacilityStatuses() {
    const statuses = getFacilityStatuses();
    Object.entries(statuses).forEach(([facility, status]) => {
        updateFacilityStatus(facility, status);
    });
}

document.addEventListener('DOMContentLoaded', function() {
    initializeFacilityStatuses();
    connectWebSocket();
    
    const reservationsTableBody = document.getElementById('reservationsTableBody');
    const tabs = document.querySelectorAll('.reservations-tab');
    const manageFacilitiesBtn = document.getElementById('manageFacilitiesBtn');
    const facilitiesModal = document.getElementById('facilitiesModal');
    const detailsModal = document.getElementById('detailsModal');
    const closeModalButtons = document.querySelectorAll('.close-modal, .close-modal-btn');
    const saveNotesBtn = document.getElementById('saveNotesBtn');
    const prevPageBtn = document.getElementById('prevPageBtn');
    const nextPageBtn = document.getElementById('nextPageBtn');
    const pageNumbers = document.getElementById('pageNumbers');
    const paginationInfo = document.getElementById('paginationInfo');
    
    // Pagination variables
    let currentPage = 1;
    const reservationsPerPage = 5;
    let currentFilter = 'all';
    let currentReservation = null;
    
    function renderReservations(filter = 'all', page = 1) {
        currentFilter = filter;
        currentPage = page;
        
        const filteredReservations = reservations.filter(res => {
            if (filter === 'all') return true;
            return res.status === filter;
        });
        
        const totalPages = Math.ceil(filteredReservations.length / reservationsPerPage);
        const startIndex = (page - 1) * reservationsPerPage;
        const endIndex = Math.min(startIndex + reservationsPerPage, filteredReservations.length);
        const paginatedReservations = filteredReservations.slice(startIndex, endIndex);
        
        reservationsTableBody.innerHTML = '';
        
        paginatedReservations.forEach(reservation => {
            const row = document.createElement('tr');
            row.dataset.id = reservation.id;
            
            let actionButtons = '';
            if (reservation.status === 'pending') {
                actionButtons = `
                    <button class="btn btn-sm btn-info" data-action="details">
                        <i class="fas fa-eye"></i> <span class="action-text">Details</span>
                    </button>
                    <button class="btn btn-sm btn-success" data-action="approve">
                        <i class="fas fa-check"></i> <span class="action-text">Approve</span>
                    </button>
                    <button class="btn btn-sm btn-danger" data-action="reject">
                        <i class="fas fa-times"></i> <span class="action-text">Reject</span>
                    </button>
                `;
            } else {
                actionButtons = `
                    <button class="btn btn-sm btn-info" data-action="details">
                        <i class="fas fa-eye"></i> <span class="action-text">Details</span>
                    </button>
                `;
            }
            
            const statusClass = `status-${reservation.status}`;
            const statusText = reservation.status.charAt(0).toUpperCase() + reservation.status.slice(1);
            
            row.innerHTML = `
                <td data-label="Reservation ID">${reservation.id}</td>
                <td data-label="Facility">${reservation.facility}</td>
                <td data-label="Resident">${reservation.resident}</td>
                <td data-label="Date & Time">${reservation.dateTime}</td>
                <td data-label="Status"><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td data-label="Actions">
                    <div class="action-buttons">${actionButtons}</div>
                </td>
            `;
            
            row.querySelectorAll('[data-action]').forEach(btn => {
                btn.addEventListener('click', () => handleReservationAction(reservation.id, btn.dataset.action));
            });
            
            reservationsTableBody.appendChild(row);
        });
        
        updatePaginationControls(filteredReservations.length, page, totalPages);
    }
    
    function updatePaginationControls(totalReservations, currentPage, totalPages) {
        const startIndex = (currentPage - 1) * reservationsPerPage + 1;
        const endIndex = Math.min(startIndex + reservationsPerPage - 1, totalReservations);
        paginationInfo.textContent = `Showing ${startIndex}-${endIndex} of ${totalReservations} reservations`;
        
        prevPageBtn.disabled = currentPage === 1;
        nextPageBtn.disabled = currentPage === totalPages;
        
        pageNumbers.innerHTML = '';
        
        if (currentPage > 2) {
            addPageNumber(1);
            if (currentPage > 3) {
                pageNumbers.innerHTML += '<span class="page-ellipsis">...</span>';
            }
        }
        
        for (let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) {
            addPageNumber(i);
        }
        
        if (currentPage < totalPages - 1) {
            if (currentPage < totalPages - 2) {
                pageNumbers.innerHTML += '<span class="page-ellipsis">...</span>';
            }
            addPageNumber(totalPages);
        }
        
        function addPageNumber(pageNumber) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `page-number ${pageNumber === currentPage ? 'active' : ''}`;
            pageBtn.textContent = pageNumber;
            pageBtn.addEventListener('click', () => renderReservations(currentFilter, pageNumber));
            pageNumbers.appendChild(pageBtn);
        }
    }
    
    function handleReservationAction(reservationId, action) {
        const reservation = reservations.find(res => res.id === reservationId);
        if (!reservation) return;
        
        switch(action) {
            case 'details':
                showReservationDetails(reservation);
                break;
            case 'approve':
                approveReservation(reservationId);
                break;
            case 'reject':
                rejectReservation(reservationId);
                break;
        }
    }
    
    function showReservationDetails(reservation) {
        currentReservation = reservation;
        
        document.getElementById('detailsReservationId').textContent = `Reservation ${reservation.id}`;
        document.getElementById('detailsStatus').innerHTML = 
            `<span class="status-badge status-${reservation.status}">
                ${reservation.status.charAt(0).toUpperCase() + reservation.status.slice(1)}
            </span>`;
        document.getElementById('detailsFacility').textContent = reservation.facility;
        document.getElementById('detailsResident').textContent = reservation.resident;
        document.getElementById('detailsDate').textContent = reservation.date;
        document.getElementById('detailsTime').textContent = reservation.time;
        document.getElementById('detailsGuests').textContent = reservation.guests;
        document.getElementById('detailsPurpose').textContent = reservation.purpose;
        document.getElementById('detailsAmount').textContent = reservation.amount;
        document.getElementById('staffNotes').value = reservation.notes || '';
        
        detailsModal.classList.add('active');
    }
    
    function approveReservation(reservationId) {
        const reservation = reservations.find(res => res.id === reservationId);
        if (reservation) {
            reservation.status = 'approved';
            renderReservations(currentFilter, currentPage);
            showAlert('Reservation approved successfully! It has been sent to staff for processing.');
        }
    }
    
    function rejectReservation(reservationId) {
        const reservation = reservations.find(res => res.id === reservationId);
        if (reservation) {
            reservation.status = 'cancelled';
            renderReservations(currentFilter, currentPage);
            showAlert('Reservation rejected successfully!');
        }
    }
    
    function showAlert(message) {
        const alertBox = document.createElement('div');
        alertBox.className = 'custom-alert';
        alertBox.textContent = message;
        document.body.appendChild(alertBox);
        
        setTimeout(() => {
            alertBox.classList.add('fade-out');
            setTimeout(() => alertBox.remove(), 500);
        }, 3000);
    }

    // Initialize tab functionality
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            renderReservations(tab.dataset.tab, 1);
        });
    });
    
    // Event listeners
    prevPageBtn.addEventListener('click', () => {
        if (currentPage > 1) {
            renderReservations(currentFilter, currentPage - 1);
        }
    });
    
    nextPageBtn.addEventListener('click', () => {
        const filteredReservations = reservations.filter(res => {
            if (currentFilter === 'all') return true;
            return res.status === currentFilter;
        });
        const totalPages = Math.ceil(filteredReservations.length / reservationsPerPage);
        
        if (currentPage < totalPages) {
            renderReservations(currentFilter, currentPage + 1);
        }
    });
    
    manageFacilitiesBtn.addEventListener('click', () => {
        facilitiesModal.classList.add('active');
    });
    
    closeModalButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            facilitiesModal.classList.remove('active');
            detailsModal.classList.remove('active');
        });
    });
    
    saveNotesBtn.addEventListener('click', () => {
        if (currentReservation) {
            currentReservation.notes = document.getElementById('staffNotes').value;
            showAlert('Notes saved successfully!');
            detailsModal.classList.remove('active');
        }
    });
    
    document.querySelectorAll('.modal-overlay').forEach(modal => {
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.remove('active');
            }
        });
    });

    document.querySelectorAll('.toggle-availability').forEach(btn => {
        btn.addEventListener('click', function() {
            const card = this.closest('.facility-card');
            const facility = card.dataset.facility;
            const isAvailable = this.classList.contains('available');
            const newStatus = isAvailable ? 'unavailable' : 'available';
            
            if (adminSocket && adminSocket.readyState === WebSocket.OPEN) {
                adminSocket.send(JSON.stringify({
                    type: 'facility_status_update',
                    facility: facility,
                    status: newStatus
                }));
            }
            
            updateFacilityStatus(facility, newStatus);
            saveFacilityStatus(facility, newStatus);
        });
    });

    // Initial render
    renderReservations();
});
</script>