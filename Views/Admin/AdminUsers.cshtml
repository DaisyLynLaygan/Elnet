@{
    Layout = "~/Views/Shared/Admin_Layout.cshtml";
    ViewData["Title"] = "Users";
    ViewData["Subtitle"] = "Manage User Accounts";
}

@model HomeOwner.Models.ViewModel;

@{
    var users = Model.Users as List<User>;
}

<link rel="stylesheet" href="~/css/admin/users.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<div class="user-management-container">
    <!-- Header Section -->
    <div class="user-header">
        <div class="header-actions">
            <div class="search-box">
                <input type="text" placeholder="Search users..." class="search-input">
                <i class="fas fa-search search-icon"></i>
            </div>
            <button class="btn btn-primary" id="addUserBtn">
                <i class="fas fa-plus"></i> Add New User
            </button>
        </div>
    </div>

    <!-- User Type Tabs -->
    <div class="user-tabs">
        <div class="tab active" data-tab="all">All Users</div>
        <div class="tab" data-tab="homeowner">Homeowners</div>
        <div class="tab" data-tab="staff">Staff</div>
        <div class="tab" data-tab="admin">Admins</div>
    </div>

    <!-- Users Table -->
    <div class="user-table-container">
        <table class="user-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Last Active</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                @foreach (var user in users)
                {
                    <tr data-type="@user?.role.ToLower()" data-user-id="@user.user_id">
                        <td data-label="Name">
                            <div class="user-info">
                                <div class="avatar" style="background-color: #FFAB91;">@user?.firstname[0]@user?.lastname[0]</div>
                                <div class="user-details">
                                    <span class="name">@user?.firstname @user.lastname</span>
                                    <span class="phone">@user?.contact_no</span>
                                </div>
                            </div>
                        </td>
                        <td data-label="Email">@user?.email</td>
                        <td data-label="Type">
                            <span class="badge @user?.role.ToLower()">@user?.role</span>
                        </td>
                        <td data-label="Status">
                            <span class="status @user.status.ToLower()">@user?.status</span>
                        </td>
                        <td data-label="Last Active">2 hours ago</td>
                        <td data-label="Actions">
                            <div class="action-buttons">
                                <button class="btn-icon edit" title="Edit" data-user-id="@user.user_id">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn-icon view" title="View" data-user-id="@user.user_id">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-icon delete" title="Delete" data-user-id="@user.user_id">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        
        <!-- Pagination -->
        <div class="pagination">
            <button class="pagination-btn" id="prevPage" disabled>
                <i class="fas fa-chevron-left"></i>
            </button>
            <button class="pagination-btn active" data-page="1">1</button>
            <button class="pagination-btn" data-page="2">2</button>
            <button class="pagination-btn" id="nextPage">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

<!-- View User Modal -->
<div class="modal-overlay" id="viewModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">User Details</h3>
            <button type="button" class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <div class="user-info-modal">
                <div class="avatar-lg" id="viewAvatar">JD</div>
                <div class="user-details-modal">
                    <h4 id="viewName">John Doe</h4>
                    <p id="viewEmail">john.doe@example.com</p>
                </div>
            </div>
            
            <div class="user-details-grid">
                <div class="detail-item">
                    <span class="detail-label">Phone</span>
                    <span class="detail-value" id="viewPhone">(555) 123-4567</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">User Type</span>
                    <span class="detail-value" id="viewType">Homeowner</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Status</span>
                    <span class="detail-value" id="viewStatus">Active</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Last Active</span>
                    <span class="detail-value" id="viewLastActive">2 hours ago</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Registered</span>
                    <span class="detail-value" id="viewRegistered">Jan 15, 2023</span>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary modal-close-btn">Close</button>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal-overlay" id="editModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Edit User</h3>
            <button type="button" class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <form id="editUserForm">
                <input type="hidden" id="editUserId">
                
                <div class="form-group">
                    <label class="form-label" for="editFirstName">First Name</label>
                    <input type="text" class="form-control" id="editFirstName" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editLastName">Last Name</label>
                    <input type="text" class="form-control" id="editLastName" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editEmail">Email</label>
                    <input type="email" class="form-control" id="editEmail" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editPhone">Phone</label>
                    <input type="tel" class="form-control" id="editPhone">
                </div>
                
                <div class="form-group">
                    <label class="form-label">User Role</label>
                    <div class="select-role">
                        <div class="role-option">
                            <input type="radio" id="editRoleHomeowner" name="userRole" value="homeowner">
                            <label for="editRoleHomeowner">Homeowner</label>
                        </div>
                        <div class="role-option">
                            <input type="radio" id="editRoleStaff" name="userRole" value="staff">
                            <label for="editRoleStaff">Staff</label>
                        </div>
                        <div class="role-option">
                            <input type="radio" id="editRoleAdmin" name="userRole" value="admin">
                            <label for="editRoleAdmin">Admin</label>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Status</label>
                    <div class="select-role">
                        <div class="role-option">
                            <input type="radio" id="editStatusActive" name="userStatus" value="active" checked>
                            <label for="editStatusActive">Active</label>
                        </div>
                        <div class="role-option">
                            <input type="radio" id="editStatusInactive" name="userStatus" value="inactive">
                            <label for="editStatusInactive">Inactive</label>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary modal-close-btn">Cancel</button>
            <button type="button" class="btn btn-primary" id="saveChangesBtn">Save Changes</button>
        </div>
    </div>
</div>

<!-- Add User Modal -->
<div class="modal-overlay" id="addUserModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Add New User</h3>
            <button type="button" class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <form id="addUserForm">
                <div class="form-group">
                    <label class="form-label" for="username">Username</label>
                    <input type="text" class="form-control" id="username" name="username" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="firstname">First Name</label>
                    <input type="text" class="form-control" id="firstname" name="firstname" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="lastname">Last Name</label>
                    <input type="text" class="form-control" id="lastname" name="lastname" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="email">Email</label>
                    <input type="email" class="form-control" id="email" name="email" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="contact_no">Phone</label>
                    <input type="tel" class="form-control" id="contact_no" name="contact_no">
                </div>
                
                <div class="form-group">
                    <label class="form-label">User Role</label>
                    <div class="select-role">
                        <div class="role-option">
                            <input type="radio" id="addRoleHomeowner" name="role" value="homeowner" checked>
                            <label for="addRoleHomeowner">Homeowner</label>
                        </div>
                        <div class="role-option">
                            <input type="radio" id="addRoleStaff" name="role" value="staff">
                            <label for="addRoleStaff">Staff</label>
                        </div>
                        <div class="role-option">
                            <input type="radio" id="addRoleAdmin" name="role" value="admin">
                            <label for="addRoleAdmin">Admin</label>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="user_password">Password</label>
                    <input type="password" class="form-control" id="user_password" name="user_password" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="confirmPassword">Confirm Password</label>
                    <input type="password" class="form-control" id="confirmPassword" required>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary modal-close-btn">Cancel</button>
            <button type="button" class="btn btn-primary" id="createUserBtn">Create User</button>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Constants
        const USERS_PER_PAGE = 5;
        
        // Modal elements
        const modals = {
            view: document.getElementById('viewModal'),
            edit: document.getElementById('editModal'),
            add: document.getElementById('addUserModal')
        };
        
        // State variables
        let currentPage = 1;
        let currentFilter = 'all';
        let allUsers = Array.from(document.querySelectorAll('#userTableBody tr'));
        
        // Show SweetAlert notification with callback
        function showSweetAlert(message, type = 'success', callback = null) {
            Swal.fire({
                icon: type,
                title: message,
                showConfirmButton: true,
            }).then((result) => {
                if (result.isConfirmed && callback) {
                    callback();
                }
            });
        }

        // Modal functions
        function openModal(modal) {
            document.body.style.overflow = 'hidden';
            modal.classList.add('active');
        }
        
        function closeModal(modal) {
            document.body.style.overflow = '';
            modal.classList.remove('active');
        }
        
        // Close modals
        document.querySelectorAll('.modal-close, .modal-close-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const modal = this.closest('.modal-overlay');
                closeModal(modal);
            });
        });
        
        // Close modal when clicking outside
        document.querySelectorAll('.modal-overlay').forEach(modal => {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal(modal);
                }
            });
        });
        
        // View user functionality
        document.querySelectorAll('.btn-icon.view').forEach(btn => {
            btn.addEventListener('click', function() {
                const row = this.closest('tr');
                
                document.getElementById('viewName').textContent = row.querySelector('.name').textContent;
                document.getElementById('viewEmail').textContent = row.querySelector('[data-label="Email"]').textContent;
                document.getElementById('viewPhone').textContent = row.querySelector('.phone').textContent;
                document.getElementById('viewType').textContent = row.querySelector('[data-label="Type"]').textContent.trim();
                document.getElementById('viewStatus').textContent = row.querySelector('[data-label="Status"]').textContent.trim();
                document.getElementById('viewLastActive').textContent = row.querySelector('[data-label="Last Active"]').textContent;
                document.getElementById('viewAvatar').textContent = 
                    row.querySelector('.name').textContent.split(' ').map(n => n[0]).join('');
                
                openModal(modals.view);
            });
        });
        
        // Edit user functionality
        document.querySelectorAll('.btn-icon.edit').forEach(btn => {
            btn.addEventListener('click', function() {
                const userId = this.getAttribute('data-user-id');
                const row = this.closest('tr');
                const nameParts = row.querySelector('.name').textContent.split(' ');
                
                document.getElementById('editUserId').value = userId;
                document.getElementById('editFirstName').value = nameParts[0];
                document.getElementById('editLastName').value = nameParts.slice(1).join(' ');
                document.getElementById('editEmail').value = row.querySelector('[data-label="Email"]').textContent;
                document.getElementById('editPhone').value = row.querySelector('.phone').textContent.replace(/\D/g, '');
                
                // Set role
                const role = row.querySelector('[data-label="Type"]').textContent.trim().toLowerCase();
                document.getElementById(`editRole${role.charAt(0).toUpperCase() + role.slice(1)}`).checked = true;
                
                // Set status
                const status = row.querySelector('[data-label="Status"]').textContent.trim().toLowerCase();
                document.getElementById(`editStatus${status.charAt(0).toUpperCase() + status.slice(1)}`).checked = true;
                
                openModal(modals.edit);
            });
        });
        
        // Save changes button
        document.getElementById('saveChangesBtn').addEventListener('click', function() {
            const userId = document.getElementById('editUserId').value;
            const userData = {
                user_id: parseInt(userId),
                firstname: document.getElementById('editFirstName').value,
                lastname: document.getElementById('editLastName').value,
                email: document.getElementById('editEmail').value,
                contact_no: document.getElementById('editPhone').value,
                role: document.querySelector('input[name="userRole"]:checked').value,
                status: document.querySelector('input[name="userStatus"]:checked').value
            };

            fetch('/Admin/EditUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showSweetAlert(data.message, 'success', function() {
                        closeModal(modals.edit);
                        window.location.reload();
                    });
                } else {
                    showSweetAlert(data.message, 'error');
                }
            })
            .catch(error => {
                showSweetAlert('Error updating user: ' + error.message, 'error');
            });
        });

        // Delete user functionality
        document.querySelectorAll('.btn-icon.delete').forEach(btn => {
            btn.addEventListener('click', function() {
                const userId = this.getAttribute('data-user-id');
                const userName = this.closest('tr').querySelector('.name').textContent;
                
                Swal.fire({
                    title: 'Delete User?',
                    text: `Are you sure you want to delete ${userName}? This action cannot be undone.`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/Admin/DeleteUser?id=' + userId, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                showSweetAlert(data.message, 'success', function() {
                                    // Remove the row from the table immediately
                                    const row = document.querySelector(`tr[data-user-id="${userId}"]`);
                                    if (row) {
                                        row.remove();
                                    }
                                    // Update the table and pagination
                                    allUsers = Array.from(document.querySelectorAll('#userTableBody tr'));
                                    updateUserTable();
                                    updatePagination();
                                });
                            } else {
                                showSweetAlert(data.message, 'error');
                            }
                        })
                        .catch(error => {
                            showSweetAlert('Error deleting user: ' + error.message, 'error');
                        });
                    }
                });
            });
        });

        // Add new user button
        document.getElementById('addUserBtn').addEventListener('click', function() {
            document.getElementById('addUserForm').reset();
            openModal(modals.add);
        });
        
        // Create user button
        document.getElementById('createUserBtn').addEventListener('click', function() {
            const password = document.getElementById('user_password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (password !== confirmPassword) {
                showSweetAlert('Passwords do not match!', 'error');
                return;
            }
            
            const userData = {
                username: document.getElementById('username').value,
                firstname: document.getElementById('firstname').value,
                lastname: document.getElementById('lastname').value,
                email: document.getElementById('email').value,
                contact_no: document.getElementById('contact_no').value,
                role: document.querySelector('input[name="role"]:checked').value,
                user_password: password
            };

            fetch('/Admin/AddUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showSweetAlert(data.message, 'success', function() {
                        closeModal(modals.add);
                        window.location.reload();
                    });
                } else {
                    showSweetAlert(data.message, 'error');
                }
            })
            .catch(error => {
                showSweetAlert('Error creating user: ' + error.message, 'error');
            });
        });

        // Filter and pagination functions
        function filterUsers(type) {
            currentFilter = type;
            currentPage = 1;
            updateUserTable();
            updatePagination();
        }
        
        function updateUserTable() {
            const userTableBody = document.getElementById('userTableBody');
            const filteredUsers = currentFilter === 'all' 
                ? allUsers 
                : allUsers.filter(user => user.getAttribute('data-type') === currentFilter);
            
            userTableBody.innerHTML = '';
            
            const startIndex = (currentPage - 1) * USERS_PER_PAGE;
            const endIndex = startIndex + USERS_PER_PAGE;
            const usersToShow = filteredUsers.slice(startIndex, endIndex);
            
            usersToShow.forEach(user => {
                userTableBody.appendChild(user);
            });
            
            if (filteredUsers.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `<td colspan="6" class="empty-message">No users found</td>`;
                userTableBody.appendChild(emptyRow);
            }
        }
        
        function updatePagination() {
            const filteredUsers = currentFilter === 'all' 
                ? allUsers 
                : allUsers.filter(user => user.getAttribute('data-type') === currentFilter);
            
            const totalPages = Math.ceil(filteredUsers.length / USERS_PER_PAGE);
            
            document.querySelectorAll('.pagination-btn[data-page]').forEach(btn => btn.remove());
            
            const prevBtn = document.getElementById('prevPage');
            const nextBtn = document.getElementById('nextPage');
            
            prevBtn.disabled = currentPage === 1;
            nextBtn.disabled = currentPage === totalPages || totalPages === 0;
            
            for (let i = 1; i <= totalPages; i++) {
                const pageBtn = document.createElement('button');
                pageBtn.className = `pagination-btn ${i === currentPage ? 'active' : ''}`;
                pageBtn.textContent = i;
                pageBtn.dataset.page = i;
                
                pageBtn.addEventListener('click', function() {
                    currentPage = parseInt(this.dataset.page);
                    updateUserTable();
                    updatePagination();
                });
                
                nextBtn.before(pageBtn);
            }
        }
        
        // Tab functionality
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelector('.tab.active').classList.remove('active');
                this.classList.add('active');
                filterUsers(this.dataset.tab);
            });
        });
        
        // Pagination button handlers
        document.getElementById('prevPage').addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                updateUserTable();
                updatePagination();
            }
        });
        
        document.getElementById('nextPage').addEventListener('click', function() {
            const filteredUsers = currentFilter === 'all' 
                ? allUsers 
                : allUsers.filter(user => user.getAttribute('data-type') === currentFilter);
            
            const totalPages = Math.ceil(filteredUsers.length / USERS_PER_PAGE);
            
            if (currentPage < totalPages) {
                currentPage++;
                updateUserTable();
                updatePagination();
            }
        });
        
        // Initialize the table
        updateUserTable();
        updatePagination();
    });
</script>