@{
    Layout = "~/Views/Shared/Admin_Layout.cshtml";
    ViewData["Title"] = "Reported Issues";
    ViewData["Subtitle"] = "Admin";
    ViewBag.ActiveMenu = "FacilityIssue";
}
@model List<HomeOwner.Models.Report>;
@using HomeOwner.Helpers;


<link rel="stylesheet" href="~/css/admin/issues.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="admin-issues-container">
    <div class="page-header">

    </div>

    <div class="issues-actions">
        <div class="search-filter">
            <input type="text" id="issuesSearch" placeholder="Search issues...">
            <select id="issuesFilter">
                <option value="all">All Issues</option>
                <option value="plumbing">Plumbing</option>
                <option value="electrical">Electrical</option>
                <option value="structural">Structural</option>
                <option value="appliance">Appliance</option>
                <option value="security">Security</option>
                <option value="other">Other</option>
            </select>
        </div>
    </div>

    <div class="issues-table-container">
        <table class="issues-table">
            <thead>
                <tr>
                    <th>Issue ID</th>
                    <th>Type</th>
                    <th>Facility</th>
                    <th>Reported By Staff</th>
                    <th>Date Reported</th>
                    <th>Severity</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="issuesTableBody">
                @foreach (var issue in Model.Take(5)) {
                    <tr data-description="@issue.report_description" data-issue-id="@issue.report_id">
                        <td>@issue.report_id</td>
                        <td><span class="badge badge-@issue.report_type">@StringHelpers.FirstLetterToUpper(issue.report_type)</span></td>
                        <td>@StringHelpers.ToHumanReadable(issue.report_facility)</td>
                        <td>@issue.Author?.firstname @issue.Author?.lastname</td>
                        <td>@(issue.created_date?.ToString("MMM dd, yyyy HH:mm") ?? "Not specified")</td>
                        <td><span class="severity-@issue.report_severity">@issue.report_severity</span></td>
                        <td><span class="status-pending">Pending</span></td>
                        <td>
                            <button class="btn-icon view-issue" title="View Details" data-issue-id="@issue.report_id">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn-icon add-note" title="Add Note" data-issue-id="@issue.report_id">
                                <i class="fas fa-edit"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="pagination-container">
        <div class="pagination-info" id="paginationInfo">
            Showing 1-@(Math.Min(5, Model.Count)) of @Model.Count issues
        </div>
        <div class="pagination-controls" id="paginationControls">
            <button class="btn btn-outline" id="prevPageBtn" disabled>
                <i class="fas fa-chevron-left"></i> Previous
            </button>
            <div id="pageButtons">
                <button class="btn btn-primary active" data-page="1">1</button>
                @for (int i = 2; i <= Math.Ceiling((double)Model.Count / 5); i++)
                {
                    <button class="btn btn-outline" data-page="@i">@i</button>
                }
            </div>
            <button class="btn btn-outline" id="nextPageBtn" @(Model.Count <= 5 ? "disabled" : "")>
                Next <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

<!-- Add this fixed pagination at the bottom of the table -->
<div class="fixed-pagination">
    <div class="page-navigation">
        <button id="prevPage" class="page-btn" disabled>
            <i class="fas fa-chevron-left"></i> Previous
        </button>
        <div class="page-numbers" id="pageNumbersBottom">
            <button class="page-number active" data-page="1">1</button>
            @for (int i = 2; i <= Math.Ceiling((double)Model.Count / 5); i++)
            {
                <button class="page-number" data-page="@i">@i</button>
            }
        </div>
        <button id="nextPage" class="page-btn" @(Model.Count <= 5 ? "disabled" : "")>
            Next <i class="fas fa-chevron-right"></i>
        </button>
    </div>
</div>

<style>
    /* Fixed pagination styles */
    .fixed-pagination {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: white;
        padding: 10px 20px;
        border-radius: 25px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        z-index: 1000;
        display: flex;
        justify-content: center;
    }

    .page-navigation {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .page-numbers {
        display: flex;
        gap: 5px;
    }

    .page-number, .page-btn {
        background: #f4f4f4;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px 10px;
        cursor: pointer;
        transition: all 0.3s;
    }

    .page-number.active {
        background: #6D4C41;
        color: white;
        border: 1px solid #6D4C41;
    }

    .page-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
</style>

<!-- Issue Details Modal -->
<div class="modal-overlay" id="issueDetailsModal">
    <div class="modal-container">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Issue Details</h3>
                <button class="modal-close" id="closeIssueDetailsModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="issue-details">
                    <div class="detail-item">
                        <span class="detail-label">Issue ID:</span>
                        <span class="detail-value" id="detailIssueId">ISS-2023-001</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Type:</span>
                        <span class="detail-value" id="detailIssueType">Plumbing</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Facility:</span>
                        <span class="detail-value" id="detailFacility">Swimming Pool</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Reported By:</span>
                        <span class="detail-value" id="detailReportedBy">Staff Member 1</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Date Reported:</span>
                        <span class="detail-value" id="detailDateReported">15 Oct 2023 14:30</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Severity:</span>
                        <span class="detail-value" id="detailSeverity">Medium</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Status:</span>
                        <span class="detail-value" id="detailStatus">Pending</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Description:</span>
                        <span class="detail-value" id="detailDescription"></span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Staff Notes:</span>
                        <span class="detail-value" id="detailStaffNotes">None</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="closeDetailsModal">Close</button>
                <button class="btn btn-primary" id="updateIssueStatus">Update Status</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Note Modal -->
<div class="modal-overlay" id="addNoteModal">
    <div class="modal-container">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add Staff Note</h3>
                <button class="modal-close" id="closeNoteModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="staffNoteText">Note:</label>
                    <textarea id="staffNoteText" class="form-control" rows="5" placeholder="Enter your note about this issue..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="cancelAddNote">Cancel</button>
                <button class="btn btn-primary" id="saveStaffNote">Save Note</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Simple pagination variables
        let currentPage = 1;
        const pageSize = 5;
        let allIssues = [];
        
        // Load all issues data
        @foreach (var issue in Model)
        {
            <text>
            allIssues.push({
                id: @issue.report_id,
                type: '@issue.report_type',
                typeDisplay: '@StringHelpers.FirstLetterToUpper(issue.report_type)',
                facility: '@issue.report_facility',
                facilityDisplay: '@StringHelpers.ToHumanReadable(issue.report_facility)',
                reportedByFirstName: '@(issue.Author?.firstname ?? "")',
                reportedByLastName: '@(issue.Author?.lastname ?? "")',
                dateReported: '@(issue.created_date?.ToString("MMM dd, yyyy HH:mm") ?? "Not specified")',
                severity: '@issue.report_severity',
                status: 'pending',
                description: @Html.Raw(Json.Serialize(issue.report_description))
            });
            </text>
        }
        
        // Initial display
        displayCurrentPage();
        
        // Setup event listeners for pagination controls
        document.getElementById('prevPageBtn').addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                displayCurrentPage();
            }
        });
        
        document.getElementById('nextPageBtn').addEventListener('click', function() {
            if (currentPage < getTotalPages()) {
                currentPage++;
                displayCurrentPage();
            }
        });
        
        // Add event listeners for page buttons
        document.querySelectorAll('#pageButtons button').forEach(button => {
            button.addEventListener('click', function() {
                currentPage = parseInt(this.getAttribute('data-page'));
                displayCurrentPage();
            });
        });
        
        // Add event listeners for filter and search
        document.getElementById('issuesFilter').addEventListener('change', function() {
            currentPage = 1; // Reset to first page on filter change
            displayCurrentPage();
        });
        
        document.getElementById('issuesSearch').addEventListener('input', function() {
            currentPage = 1; // Reset to first page on search change
            displayCurrentPage();
        });
        
        // Display current page of data
        function displayCurrentPage() {
            const filteredIssues = filterIssues();
            const totalPages = Math.ceil(filteredIssues.length / pageSize);
            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, filteredIssues.length);
            const displayedIssues = filteredIssues.slice(startIndex, endIndex);
            
            // Update table with issues for current page
            const tableBody = document.getElementById('issuesTableBody');
            tableBody.innerHTML = '';
            
            if (displayedIssues.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="8" class="text-center">No issues found matching your criteria</td>';
                tableBody.appendChild(row);
            } else {
                displayedIssues.forEach(issue => {
                    const row = document.createElement('tr');
                    row.setAttribute('data-description', issue.description);
                    row.setAttribute('data-issue-id', issue.id);
                    
                    row.innerHTML = `
                        <td>${issue.id}</td>
                        <td><span class="badge badge-${issue.type}">${issue.typeDisplay}</span></td>
                        <td>${issue.facilityDisplay}</td>
                        <td>${issue.reportedByFirstName} ${issue.reportedByLastName}</td>
                        <td>${issue.dateReported}</td>
                        <td><span class="severity-${issue.severity}">${issue.severity}</span></td>
                        <td><span class="status-pending">Pending</span></td>
                        <td>
                            <button class="btn-icon view-issue" title="View Details" data-issue-id="${issue.id}">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn-icon add-note" title="Add Note" data-issue-id="${issue.id}">
                                <i class="fas fa-edit"></i>
                            </button>
                        </td>
                    `;
                    
                    tableBody.appendChild(row);
                });
            }
            
            // Update pagination info
            document.getElementById('paginationInfo').textContent = 
                filteredIssues.length === 0 ? 'No issues found' : 
                `Showing ${startIndex + 1}-${endIndex} of ${filteredIssues.length} issues`;
            
            // Update pagination buttons
            updatePaginationButtons(totalPages);
            
            // Attach event listeners for view/note buttons
            attachEventListeners();
        }
        
        // Filter issues based on search and filter values
        function filterIssues() {
            const searchText = document.getElementById('issuesSearch').value.toLowerCase();
            const filterType = document.getElementById('issuesFilter').value;
            
            return allIssues.filter(issue => {
                // Apply search filter
                const matchesSearch = searchText === '' || 
                    issue.typeDisplay.toLowerCase().includes(searchText) ||
                    issue.facilityDisplay.toLowerCase().includes(searchText) ||
                    `${issue.reportedByFirstName} ${issue.reportedByLastName}`.toLowerCase().includes(searchText) ||
                    (issue.description && issue.description.toLowerCase().includes(searchText)) ||
                    issue.id.toString().includes(searchText);
                
                // Apply type filter
                const matchesType = filterType === 'all' || issue.type === filterType;
                
                return matchesSearch && matchesType;
            });
        }
        
        // Get total pages based on filtered issues
        function getTotalPages() {
            const filteredIssues = filterIssues();
            return Math.ceil(filteredIssues.length / pageSize);
        }
        
        // Update pagination buttons
        function updatePaginationButtons(totalPages) {
            // Update page number buttons
            const pageButtons = document.getElementById('pageButtons');
            pageButtons.innerHTML = '';
            
            // Create numbered page buttons
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.classList.add('btn');
                if (i === currentPage) {
                    button.classList.add('btn-primary', 'active');
                } else {
                    button.classList.add('btn-outline');
                }
                button.setAttribute('data-page', i);
                button.addEventListener('click', function() {
                    currentPage = parseInt(this.getAttribute('data-page'));
                    displayCurrentPage();
                });
                pageButtons.appendChild(button);
            }
            
            // Update previous/next buttons
            document.getElementById('prevPageBtn').disabled = (currentPage <= 1);
            document.getElementById('nextPageBtn').disabled = (currentPage >= totalPages);
            
            // Add bottom fixed pagination
            updateFixedPagination(totalPages);
        }
        
        // Update fixed pagination at bottom of screen
        function updateFixedPagination(totalPages) {
            const container = document.querySelector('.fixed-pagination');
            if (!container) {
                createFixedPagination(totalPages);
                return;
            }
            
            const pageNumbers = container.querySelector('.page-numbers');
            pageNumbers.innerHTML = '';
            
            // Create page number buttons
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.classList.add('page-number');
                if (i === currentPage) {
                    button.classList.add('active');
                }
                button.setAttribute('data-page', i);
                button.addEventListener('click', function() {
                    currentPage = parseInt(this.getAttribute('data-page'));
                    displayCurrentPage();
                });
                pageNumbers.appendChild(button);
            }
            
            // Update previous/next buttons
            container.querySelector('#prevPage').disabled = (currentPage <= 1);
            container.querySelector('#nextPage').disabled = (currentPage >= totalPages);
        }
        
        // Create fixed pagination element
        function createFixedPagination(totalPages) {
            // Create container
            const container = document.createElement('div');
            container.className = 'fixed-pagination';
            
            const nav = document.createElement('div');
            nav.className = 'page-navigation';
            
            // Previous button
            const prevBtn = document.createElement('button');
            prevBtn.id = 'prevPage';
            prevBtn.className = 'page-btn';
            prevBtn.disabled = (currentPage <= 1);
            prevBtn.innerHTML = '<i class="fas fa-chevron-left"></i> Previous';
            prevBtn.addEventListener('click', function() {
                if (currentPage > 1) {
                    currentPage--;
                    displayCurrentPage();
                }
            });
            nav.appendChild(prevBtn);
            
            // Page numbers
            const pageNumbers = document.createElement('div');
            pageNumbers.className = 'page-numbers';
            
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.className = 'page-number' + (i === currentPage ? ' active' : '');
                button.setAttribute('data-page', i);
                button.addEventListener('click', function() {
                    currentPage = parseInt(this.getAttribute('data-page'));
                    displayCurrentPage();
                });
                pageNumbers.appendChild(button);
            }
            nav.appendChild(pageNumbers);
            
            // Next button
            const nextBtn = document.createElement('button');
            nextBtn.id = 'nextPage';
            nextBtn.className = 'page-btn';
            nextBtn.disabled = (currentPage >= totalPages);
            nextBtn.innerHTML = 'Next <i class="fas fa-chevron-right"></i>';
            nextBtn.addEventListener('click', function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    displayCurrentPage();
                }
            });
            nav.appendChild(nextBtn);
            
            container.appendChild(nav);
            document.body.appendChild(container);
            
            // Add styles
            const style = document.createElement('style');
            style.textContent = `
                .fixed-pagination {
                    position: fixed;
                    bottom: 20px;
                    left: 50%;
                    transform: translateX(-50%);
                    background-color: white;
                    padding: 10px 20px;
                    border-radius: 25px;
                    box-shadow: 0 4px 10px rgba(0,0,0,0.2);
                    z-index: 1000;
                    display: flex;
                    justify-content: center;
                }
                .page-navigation {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }
                .page-numbers {
                    display: flex;
                    gap: 5px;
                }
                .page-number, .page-btn {
                    background: #f4f4f4;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    padding: 5px 10px;
                    cursor: pointer;
                    transition: all 0.3s;
                }
                .page-number.active {
                    background: #6D4C41;
                    color: white;
                    border: 1px solid #6D4C41;
                }
                .page-btn:disabled {
                    opacity: 0.5;
                    cursor: not-allowed;
                }
            `;
            document.head.appendChild(style);
        }
        
        // Handle event listeners for modal buttons
        function attachEventListeners() {
            // View issue details
            document.querySelectorAll('.view-issue').forEach(btn => {
                btn.addEventListener('click', function() {
                    const row = this.closest('tr');
                    const issueId = parseInt(row.getAttribute('data-issue-id'));
                    const issue = allIssues.find(i => i.id === issueId);
                    
                    if (issue) {
                        // Update modal content
                        document.getElementById('detailIssueId').textContent = issue.id;
                        document.getElementById('detailIssueType').textContent = issue.typeDisplay;
                        document.getElementById('detailFacility').textContent = issue.facilityDisplay;
                        document.getElementById('detailReportedBy').textContent = `${issue.reportedByFirstName} ${issue.reportedByLastName}`;
                        document.getElementById('detailDateReported').textContent = issue.dateReported;
                        document.getElementById('detailSeverity').textContent = issue.severity;
                        document.getElementById('detailStatus').textContent = 'Pending';
                        document.getElementById('detailDescription').textContent = issue.description;
                        
                        document.getElementById('issueDetailsModal').classList.add('active');
                    }
                });
            });
            
            // Add note to issue
            document.querySelectorAll('.add-note').forEach(btn => {
                btn.addEventListener('click', function() {
                    const row = this.closest('tr');
                    const issueId = parseInt(row.getAttribute('data-issue-id'));
                    const issue = allIssues.find(i => i.id === issueId);
                    
                    if (issue) {
                        // Store current issue for note form
                        window.currentIssue = {
                            id: issue.id,
                            type: issue.typeDisplay,
                            facility: issue.facilityDisplay
                        };
                        
                        document.getElementById('addNoteModal').classList.add('active');
                    }
                });
            });
        }
        
        // Save staff note
        document.getElementById('saveStaffNote').addEventListener('click', function() {
            const noteText = document.getElementById('staffNoteText').value;
            if (noteText.trim() === '') {
                alert('Please enter a note before saving.');
                return;
            }
            
            // In a real app, you would save this to your database
            alert(`Note added to issue ${window.currentIssue.id}:\n\n${noteText}`);
            document.getElementById('addNoteModal').classList.remove('active');
            document.getElementById('staffNoteText').value = '';
        });

        // Close modals
        document.getElementById('closeIssueDetailsModal').addEventListener('click', function() {
            document.getElementById('issueDetailsModal').classList.remove('active');
        });

        document.getElementById('closeDetailsModal').addEventListener('click', function() {
            document.getElementById('issueDetailsModal').classList.remove('active');
        });

        document.getElementById('closeNoteModal').addEventListener('click', function() {
            document.getElementById('addNoteModal').classList.remove('active');
        });

        document.getElementById('cancelAddNote').addEventListener('click', function() {
            document.getElementById('addNoteModal').classList.remove('active');
        });

        // Update issue status
        document.getElementById('updateIssueStatus').addEventListener('click', function() {
            alert('Status update functionality would go here');
        });
    });
</script>