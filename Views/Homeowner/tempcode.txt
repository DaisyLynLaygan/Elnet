@model HomeOwner.Models.ViewModel;
@{
    Layout = "~/Views/Shared/Dashboard_Layout.cshtml";
    var announcementsList = Model.Announcements as List<Announcement>;
}

<link rel="stylesheet" href="~/css/homeowners/community.css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="community-wrapper">
    <div class="community-container">
        <!-- Left Sidebar (20%) -->
        <div class="community-sidebar">
            <div class="sidebar-section">
                <div class="sidebar-item">
                    <i class="fas fa-home"></i>
                    <span><a asp-controller="Homeowner" asp-action="Dashboard" style="text-decoration: none; color: #000;">Home</a></span>
                </div>
                <div class="sidebar-item">
                    <i class="fas fa-comment-alt"></i>
                     <span><a asp-controller="Homeowner" asp-action="Feedback" style="text-decoration: none; color: #000;">Feedback</a></span>
                </div>
                <div class="sidebar-item">
                    <i class="far fa-calendar-alt"></i>
                    <span><a asp-controller="Homeowner" asp-action="Events" style="text-decoration: none; color: #000;">Events</a></span>
                </div>
            </div>
        </div>

        <!-- Middle Content (60%) -->
        <div class="community-newsfeed">
            <!-- Create Post Section -->
            <div class="create-post">
                <form asp-action="AddPostUser" asp-controller="Homeowner" method="post" enctype="multipart/form-data" onsubmit="return validatePost()">
                    <div class="create-post-header">
                        <img src="~/images/user-default-picture.jpg" alt="Profile">
                        <input asp-for="newPost.content" type="text" placeholder="Share with neighbors..." class="post-input" id="postInput">
                    </div>
                    <div class="post-actions">
                        <div class="post-action" id="addPhotoBtn">
                            <i class="fas fa-image" style="color: #45bd62;"></i> Photo
                        </div>
                        <input asp-for="newPost.ImageFile" type="file" id="photoUpload" accept="image/*" multiple style="display: none;">
                        <button type="submit" class="post-submit" id="submitPostBtn">Post</button>
                    </div>
                    <div class="photo-preview-container" id="photoPreviewContainer"></div>
                </form>
            </div>

            <!-- Neighborhood Posts -->
            @foreach (var post in (Model.Posts as List<Post>).OrderByDescending(p => p.created_date))
            {
                <div class="neighborhood-post">
                    <div class="post-header">
                        <img src="~/images/user-default-picture.jpg" alt="User">
                        <div class="post-user-info">
                            <strong>
                                @post.Author?.firstname @post.Author?.lastname 
                                <span class="role-badge role-@post.Author?.role.ToLower()">@post.Author?.role</span>
                            </strong>
                            <div class="post-meta">
                                <span>@post.created_date Â· @post.Author?.address</span>
                            </div>
                        </div>
                        <button class="post-options">
                            <i class="fas fa-ellipsis-h"></i>
                        </button>
                    </div>
                    <div class="post-content">
                        @post.content
                    </div>
                    @if (!string.IsNullOrEmpty(post.ImagePath))
                    {
                        <div class="post-image">
                            <img src="@post.ImagePath" alt="Post image">
                        </div>
                    }
                    <div class="post-stats">
                        <span class="reactions">
                            <i class="fas fa-thumbs-up"></i> 12
                        </span>
                        <span class="comments">
                            5 comments
                        </span>
                    </div>
                    <div class="post-interactions">
                        <button class="interaction-button">
                            <i class="far fa-thumbs-up"></i> <span>Helpful</span>
                        </button>
                        <button class="interaction-button comment-btn">
                            <i class="far fa-comment"></i> <span>Comment</span>
                        </button>
                        <button class="interaction-button">
                            <i class="fas fa-share"></i> <span>Share</span>
                        </button>
                    </div>
                </div>
            }

        </div>

        <!-- Right Sidebar (20%) -->
        <div class="community-announcements">
            <div class="announcements-header">
                <h3><i class="fas fa-bullhorn"></i> Announcements</h3>
            </div>
        
            <div class="announcement-item-for-admin important">
                @foreach (var item in announcementsList
                    .OrderByDescending(a => a.priority == "Urgent")
                    .ThenByDescending(a => a.priority == "High")
                    .ThenByDescending(a => a.start_date ?? DateTime.MinValue))
                {
                    <div class="announcement-content-for-admin" onclick="showAnnouncementModal(
                        '@item.title', 
                        '@Html.Raw(item.content.Replace("'", "\\'"))', 
                        '@item.start_date?.ToString("MMMM dd, yyyy")', 
                        '@item.end_date?.ToString("MMMM dd, yyyy")', 
                        '@item.priority', 
                        '@item.author')">
                        
                        @if (item.priority == "Urgent")
                        {
                            <i class="fas fa-exclamation-circle" style="color: #f02849;"></i>
                        }
                        else if (item.priority == "High")
                        {
                            <i class="fas fa-exclamation-triangle" style="color: #ffcc00;"></i>
                        }
                        else
                        {
                            <i class="fas fa-info-circle" style="color: #0066cc;"></i>
                        }
                        <strong>@item.title</strong>
                        <span>@item.start_date?.ToString("MMM, dd, yyy")</span>
                    </div>
                }
            </div>
            
            <div class="announcement-item">
                <i class="fas fa-trash" style="color: #45bd62;"></i>
                <div class="announcement-content">
                    <strong>Trash Schedule</strong>
                    <span>No pickup on Monday</span>
                </div>
            </div>

            <div class="announcements-header">
                <h3><i class="fas fa-calendar-alt"></i> Upcoming Events</h3>
            </div>
            
            <div class="event-item">
                <div class="event-date">
                    <span class="day">15</span>
                    <span class="month">JUN</span>
                </div>
                <div class="event-details">
                    <strong>Block Party</strong>
                    <span>Main Street, 12-5pm</span>
                </div>
            </div>
            
            <div class="event-item">
                <div class="event-date">
                    <span class="day">22</span>
                    <span class="month">JUN</span>
                </div>
                <div class="event-details">
                    <strong>Yard Sale</strong>
                    <span>Oak Street, 8am-2pm</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for comments -->
<div class="community-modal" id="commentModal">
    <div class="community-modal-dialog">
        <div class="community-modal-content">
            <div class="community-modal-header">
                <h3>Comments</h3>
                <button type="button" class="close-community-modal">&times;</button>
            </div>
            <div class="community-modal-body">
                <div class="comments-container" id="commentsContainer">
                    <!-- Comments will be loaded here -->
                </div>
                <div class="add-comment">
                    <img src="~/images/user-default-picture.jpg" alt="User">
                    <input type="text" placeholder="Write a comment..." id="commentInput">
                    <button class="btn-post-comment">Post</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Announcement Modal -->
<div class="announcement-modal" id="announcementModal">
    <div class="announcement-modal-content">
        <div class="announcement-modal-header">
            <h2 class="announcement-modal-title" id="announcementModalTitle"></h2>
            <button class="announcement-modal-close" id="announcementModalClose">&times;</button>
        </div>
        <div class="announcement-modal-body">
            <div class="announcement-priority" id="announcementPriorityBadge"></div>
            <div class="announcement-content" id="announcementModalContent"></div>
            <div class="announcement-dates">
                <div class="announcement-date">
                    <i class="fas fa-calendar-alt"></i>
                    <span id="announcementModalStartDate"></span>
                </div>
                <div class="announcement-date">
                    <i class="fas fa-calendar-times"></i>
                    <span id="announcementModalEndDate"></span>
                </div>
            </div>
            <div class="announcement-author" id="announcementModalAuthor"></div>
        </div>
    </div>
</div>

<script src="~/js/community.js" asp-append-version="true"></script>

community.css
:root {
    /* Color Variables */
    --brown: #6B4423;
    --light-brown: #8B5D3D;
    --dark-brown: #4A2E1A;
    --beige: #F5F0E6;
    --cream: #FFF8F0;
    --light-gray: #f0f2f5;
    --gray: #E0E0E0;
    --white: #FFFFFF;
    --primary: var(--brown);
    --secondary: var(--light-brown);
    --accent: #D4A373;
    --text-dark: #050505;
    --text-light: #F5F5F5;
    --text-gray: #65676B;
    --border-color: #dddfe2;
    --shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    --card-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    --spacing-unit: 16px;
    --header-height: 60px;
}

/* Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
}

body {
    background-color: var(--light-gray);
    line-height: 1.6;
    color: var(--text-dark);
    overflow-x: hidden;
    overflow-y: hidden;
}

/* Main Layout */
.community-wrapper {
    width: 100%;
    max-width: 1600px;
    margin: 0 auto;
    padding-top: var(--spacing-unit);
}

.community-container {
    display: flex;
    width: 100%;
    min-height: calc(100vh - var(--header-height) - var(--spacing-unit));
}

/* Left Sidebar - 20% */
.community-sidebar {
    flex: 0 0 20%;
    min-width: 240px;
    max-width: 360px;
    height: calc(100vh - var(--header-height) - var(--spacing-unit));
    position: sticky;
    top: calc(var(--header-height) + var(--spacing-unit));
    padding: var(--spacing-unit) calc(var(--spacing-unit) / 2) var(--spacing-unit) var(--spacing-unit);
    overflow-y: auto;
}

/* Middle Content - 60% */
.community-newsfeed {
    flex: 0 0 55%;
    min-width: 500px;
    padding: 0 var(--spacing-unit);
    overflow-y: auto;
    height: calc(100vh - var(--header-height) - var(--spacing-unit));
    margin: 0 auto;
}

/* Right Sidebar - 20% */
.community-announcements {
    flex: 0 0 20%;
    min-width: 240px;
    max-width: 360px;
    height: calc(100vh - var(--header-height) - var(--spacing-unit));
    position: sticky;
    top: calc(var(--header-height) + var(--spacing-unit));
    padding: var(--spacing-unit) var(--spacing-unit) var(--spacing-unit) calc(var(--spacing-unit) / 2);
    overflow-y: auto;
}

/* Scrollbar Behavior */
.community-sidebar::-webkit-scrollbar,
.community-announcements::-webkit-scrollbar {
    width: 6px;
    background: transparent;
}

.community-sidebar:hover::-webkit-scrollbar-thumb,
.community-announcements:hover::-webkit-scrollbar-thumb {
    background: #bcc0c4;
    border-radius: 3px;
}

.community-newsfeed::-webkit-scrollbar {
    display: none;
}

/* Sidebar Styles */
.sidebar-section {
    margin-bottom: 20px;
}

.sidebar-title {
    font-size: 17px;
    color: var(--text-gray);
    margin: 10px 0 15px 0;
    font-weight: 600;
    padding-left: 10px;
}

.sidebar-item {
    display: flex;
    align-items: center;
    padding: 10px;
    border-radius: 8px;
    margin-bottom: 5px;
    font-size: 15px;
    color: var(--text-dark);
    cursor: pointer;
    transition: background-color 0.2s;
}

.sidebar-item:hover {
    background-color: var(--light-gray);
}

.sidebar-item.active {
    background-color: var(--beige);
}

.sidebar-item i {
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
    color: var(--brown);
}

.sidebar-item .badge {
    margin-left: auto;
    background-color: var(--brown);
    color: white;
    border-radius: 10px;
    padding: 2px 8px;
    font-size: 12px;
}

/* Highlights */
.highlights-container {
    display: flex;
    gap: 10px;
    padding: 10px 0;
    overflow-x: auto;
    scrollbar-width: none;
    margin-bottom: 15px;
}

.highlights-container::-webkit-scrollbar {
    display: none;
}

.highlight {
    min-width: 120px;
    height: 200px;
    border-radius: 10px;
    position: relative;
    cursor: pointer;
    flex-shrink: 0;
}

.highlight p {
    position: absolute;
    bottom: 10px;
    left: 10px;
    color: white;
    font-weight: 500;
    font-size: 14px;
    text-shadow: 0 1px 2px rgba(0,0,0,0.5);
}

.highlight-bg {
    width: 100%;
    height: 100%;
    border-radius: 10px;
    background-size: cover;
    background-position: center;
    position: relative;
    overflow: hidden;
}

.highlight-bg::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 50%;
    background: linear-gradient(transparent, rgba(0,0,0,0.5));
}

.create-highlight .highlight-bg {
    background-color: var(--white);
    border: 1px dashed var(--border-color);
    display: flex;
    align-items: center;
    justify-content: center;
}

.create-highlight .highlight-bg i {
    color: var(--brown);
    font-size: 24px;
}

.highlight-user {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: 2px solid var(--brown);
    overflow: hidden;
}

.highlight-user img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Create Post */
.create-post {
    background-color: var(--white);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 15px;
    box-shadow: var(--shadow);
}

.create-post-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.create-post-header img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
}

.post-input {
    flex: 1;
    border: none;
    background-color: var(--light-gray);
    border-radius: 20px;
    padding: 15px 15px;
    font-size: 15px;
}

.post-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 10px;
    border-top: 1px solid var(--border-color);
}

.post-action {
    background: none;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    color: var(--text-gray);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    font-weight: 600;
    font-size: 14px;
}

.post-action i {
    font-size: 18px;
}

.post-action.photo i {
    color: #45bd62;
}

.post-action.event i {
    color: #f7b928;
}

.post-submit {
    background-color: var(--brown);
    color: white;
    border: none;
    padding: 8px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 600;
}

/* Neighborhood Posts */
.neighborhood-post {
    background-color: var(--white);
    border-radius: 10px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: var(--shadow);
}

.post-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.post-header img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
}

.post-user-info {
    flex: 1;
}

.post-user-info strong {
    font-size: 15px;
    font-weight: 600;
}

.post-meta {
    font-size: 13px;
    color: var(--text-gray);
}

.post-options {
    background: none;
    border: none;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--text-gray);
}

.post-options:hover {
    background-color: var(--light-gray);
}

.post-content {
    margin-bottom: 15px;
    font-size: 15px;
    line-height: 1.4;
}

.post-image {
    width: 100%;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 15px;
}

.post-image img {
    width: 100%;
    max-height: 500px;
    object-fit: cover;
}

.post-stats {
    display: flex;
    justify-content: space-between;
    padding: 10px 0;
    border-top: 1px solid var(--border-color);
    color: var(--text-gray);
    font-size: 14px;
}

.post-interactions {
    display: flex;
    justify-content: space-between;
    padding-top: 10px;
    border-top: 1px solid var(--border-color);
}

.interaction-button {
    flex: 1;
    background: none;
    border: none;
    padding: 8px 0;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    color: var(--text-gray);
    cursor: pointer;
    border-radius: 5px;
    font-weight: 600;
    font-size: 14px;
}

.interaction-button:hover {
    background-color: var(--light-gray);
}

.interaction-button i {
    font-size: 16px;
}

/* Announcements */
.announcements-header {
    margin: 15px 0 10px;
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 0 10px;
}

.announcements-header h3 {
    font-size: 17px;
    color: var(--text-dark);
    font-weight: 600;
}

.announcement-item {
    display: flex;
    align-items: center;
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 5px;
    gap: 10px;
    cursor: pointer;
}

.announcement-item-for-admin 
{
    display: flex;
    background: var(--white);
    flex-direction: column;
    border-radius: 8px;
    padding: 12px;
    gap: 1rem;
    height: 20vh;
    overflow-y: auto;
}

.announcement-content-for-admin 
{
    display: block;
    font-size: 14px;
    margin-bottom: 2px;
    padding: 8px;
    background: var(--light-gray);
    border-radius: 7px;
    height: 50px;
    cursor: pointer;
}

.announcement-item:hover {
    background-color: var(--light-gray);
}

.announcement-item.important {
    background-color: #fff8e6;
}

.announcement-item i {
    font-size: 18px;
}

.announcement-item.important i {
    color: #f02849;
}

.announcement-item.trash i {
    color: #45bd62;
}

.announcement-content {
    flex: 1;
}

.announcement-content strong {
    display: block;
    font-size: 14px;
    margin-bottom: 2px;
}

.announcement-content span {
    font-size: 13px;
    color: var(--text-gray);
}

/* Events */
.event-item {
    display: flex;
    align-items: center;
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 5px;
    gap: 15px;
    cursor: pointer;
}

.event-item:hover {
    background-color: var(--light-gray);
}

.event-date {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 40px;
}

.event-date .day {
    font-size: 18px;
    font-weight: 600;
    color: var(--brown);
}

.event-date .month {
    font-size: 12px;
    text-transform: uppercase;
    color: var(--text-gray);
}

.event-details {
    flex: 1;
}

.event-details strong {
    display: block;
    font-size: 14px;
    margin-bottom: 2px;
}

.event-details span {
    font-size: 13px;
    color: var(--text-gray);
}

/* Responsive Design */
@media screen and (max-width: 1200px) {
    .community-sidebar,
    .community-announcements {
        min-width: 200px;
    }
    .community-newsfeed {
        min-width: 400px;
    }
}

@media screen and (max-width: 992px) {
    .community-container {
        flex-direction: column;
    }
    
    .community-sidebar,
    .community-announcements,
    .community-newsfeed {
        width: 100%;
        max-width: 100%;
        position: static;
        height: auto;
        padding: var(--spacing-unit);
    }
    
    .community-sidebar,
    .community-announcements {
        display: none;
    }
    
    .community-newsfeed {
        order: -1;
    }
}

@media screen and (max-width: 768px) {
    .post-action span,
    .interaction-button span {
        display: none;
    }
    
    .highlight {
        min-width: 100px;
        height: 180px;
    }
}

@media screen and (max-width: 576px) {
    
    .highlight {
        min-width: 90px;
        height: 160px;
    }
    
    .post-stats,
    .post-meta {
        font-size: 12px;
    }
}

@media screen and (max-width: 400px)
{
    
}

/* Comment Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.modal.show {
    display: flex;
}

.modal-dialog {
    width: 100%;
    max-width: 600px;
    background-color: var(--white);
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
}

.modal-header {
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h3 {
    font-size: 18px;
    font-weight: 600;
    margin: 0;
}

.close-modal {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: var(--text-gray);
}

.modal-body {
    padding: 20px;
    max-height: 70vh;
    overflow-y: auto;
}

/* Comments Container */
.comments-container {
    margin-bottom: 20px;
}

.comment {
    display: flex;
    margin-bottom: 15px;
}

.comment img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
}

.comment-content {
    flex: 1;
}

.comment-header {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
}

.comment-header strong {
    font-size: 14px;
    font-weight: 600;
}

.comment-header span {
    font-size: 12px;
    color: var(--text-gray);
    margin-left: 10px;
}

.comment p {
    font-size: 14px;
    line-height: 1.4;
}

.no-comments {
    text-align: center;
    color: var(--text-gray);
    padding: 20px 0;
}

/* Add Comment */
.add-comment {
    display: flex;
    align-items: center;
    padding-top: 15px;
    border-top: 1px solid var(--border-color);
}

.add-comment img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
}

.add-comment input {
    flex: 1;
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 10px 15px;
    font-size: 14px;
}

.btn-post-comment {
    background: none;
    border: none;
    color: var(--brown);
    font-weight: 600;
    margin-left: 10px;
    cursor: pointer;
}

/* Photo Preview in Create Post */
.photo-preview-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
}

.photo-preview-item {
    position: relative;
    width: 100px;
    height: 100px;
    border-radius: 8px;
    overflow: hidden;
}

.photo-preview-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.remove-photo {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 20px;
    height: 20px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 12px;
}

/* Community Modal Styles */
.community-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.community-modal.show {
    display: flex;
}

.community-modal-dialog {
    width: 100%;
    max-width: 600px;
    background-color: var(--white);
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
}

.community-modal-header {
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.community-modal-header h3 {
    font-size: 18px;
    font-weight: 600;
    margin: 0;
}

.close-community-modal {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: var(--text-gray);
}

.community-modal-body {
    padding: 20px;
    max-height: 70vh;
    overflow-y: auto;
}
/* Comments Container */
.comments-container {
    margin-bottom: 20px;
}

.comment {
    display: flex;
    margin-bottom: 15px;
}

.comment img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
}

.comment-content {
    flex: 1;
}

.comment-header {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
}

.comment-header strong {
    font-size: 14px;
    font-weight: 600;
}

.comment-header span {
    font-size: 12px;
    color: var(--text-gray);
    margin-left: 10px;
}

.comment p {
    font-size: 14px;
    line-height: 1.4;
}

.no-comments {
    text-align: center;
    color: var(--text-gray);
    padding: 20px 0;
}

/* Add Comment */
.add-comment {
    display: flex;
    align-items: center;
    padding-top: 15px;
    border-top: 1px solid var(--border-color);
}

.add-comment img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
}

.add-comment input {
    flex: 1;
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 10px 15px;
    font-size: 14px;
}

.btn-post-comment {
    background: none;
    border: none;
    color: var(--brown);
    font-weight: 600;
    margin-left: 10px;
    cursor: pointer;
}

/* Photo Preview in Create Post */
.photo-preview-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
}

.photo-preview-item {
    position: relative;
    width: 100px;
    height: 100px;
    border-radius: 8px;
    overflow: hidden;
}

.photo-preview-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.remove-photo {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 20px;
    height: 20px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 12px;
}
    /* Blazor-style Modal */
    .blazor-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .blazor-modal-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .blazor-modal-content {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        width: 80%;
        max-width: 600px;
        z-index: 1001;
        max-height: 80vh;
        display: flex;
        flex-direction: column;
    }

    .blazor-modal-header {
        padding: 15px 20px;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .blazor-modal-body {
        padding: 20px;
        overflow-y: auto;
        flex-grow: 1;
    }

    .blazor-modal-footer {
        padding: 15px 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
    }

    .blazor-modal-button {
        padding: 8px 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .blazor-modal-button:hover {
        background-color: #0069d9;
    }

    .blazor-modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .announcement-dates {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #eee;
    }

    .announcement-dates div {
        margin-bottom: 8px;
    }

    /* Role badge base styles */
.role-badge {
    display: inline-block;
    padding: 3px 10px 3px 25px;
    border-radius: 15px;
    font-size: 0.8em;
    font-weight: 600;
    text-transform: uppercase;
    position: relative;
    margin-left: 10px;
    transition: all 0.2s ease;
}

/* Icon for all badges */
.role-badge::before {
    font-family: "Font Awesome 6 Free";
    font-weight: 900;
    position: absolute;
    left: 8px;
    top: 50%;
    transform: translateY(-50%);
}

/* Homeowner specific styles */
.role-homeowner {
    background: linear-gradient(to right, #FFF8DC, #F5DEB3);
    color: #5D4037;
    border: 1px solid #D2B48C;
    box-shadow: 0 2px 4px rgba(139, 69, 19, 0.1);
}

.role-homeowner::before {
    content: "\f015"; /* Home icon */
    color: #8B4513;
}

/* Staff specific styles */
.role-staff {
    background: linear-gradient(to right, #E6F2FF, #B3D9FF);
    color: #1E4B8B;
    border: 1px solid #99C2FF;
}

.role-staff::before {
    content: "\f0f0"; /* Briefcase icon */
    color: #1E6FC9;
}

/* Admin specific styles */
.role-admin {
    background: linear-gradient(to right, #FFEBEE, #FFCDD2);
    color: #C62828;
    border: 1px solid #EF9A9A;
}

.role-admin::before {
    content: "\f521"; /* Shield icon */
    color: #D32F2F;
}

/* Hover effects */
.role-badge:hover {
    box-shadow: 0 3px 6px rgba(0,0,0,0.1);
}

/* Announcement Modal Styles */
.announcement-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    justify-content: center;
    align-items: center;
}

.announcement-modal-content {
    background-color: white;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    animation: modalFadeIn 0.3s ease-out;
}

@keyframes modalFadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
}

.announcement-modal-header {
    padding: 16px 24px;
    border-bottom: 1px solid #e5e5e5;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.announcement-modal-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
}

.announcement-modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
}

.announcement-modal-body {
    padding: 24px;
}

.announcement-priority {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
    margin-bottom: 12px;
}

.announcement-priority.urgent {
    background-color: #f028491a;
    color: #f02849;
}

.announcement-priority.high {
    background-color: #ffcc001a;
    color: #cc9900;
}

.announcement-priority.normal {
    background-color: #0066cc1a;
    color: #0066cc;
}

.announcement-content {
    margin-bottom: 16px;
    line-height: 1.6;
}

.announcement-dates {
    display: flex;
    gap: 16px;
    margin-top: 16px;
    color: #666;
}

.announcement-date {
    display: flex;
    align-items: center;
    gap: 4px;
}

.announcement-author {
    margin-top: 16px;
    font-style: italic;
    color: #666;
    text-align: right;
}

/* Post Error Message */
.post-error {
    color: #f02849;
    margin-top: 8px;
    display: none;
    font-size: 0.9rem;
}

community.js
document.addEventListener('DOMContentLoaded', function() {
    // Comment Modal Functionality
    const commentModal = document.getElementById('commentModal');
    const commentBtns = document.querySelectorAll('.comment-btn');
    const closeModalBtn = document.querySelector('#commentModal .close-community-modal');
    const commentsContainer = document.getElementById('commentsContainer');
    const commentInput = document.getElementById('commentInput');
    const postCommentBtn = document.querySelector('.btn-post-comment');
    
    // Sample comments data
    const sampleComments = {
        1: [
            { id: 1, user: 'Mike Thompson', text: 'I recommend John from Thompson Plumbing. He fixed our leak last month.', time: '2 hours ago' },
            { id: 2, user: 'Lisa Wong', text: 'Avoid City Plumbing - they overcharge!', time: '1 hour ago' },
            { id: 3, user: 'David Miller', text: 'We used Ace Plumbing - reasonable rates and quick service.', time: '45 minutes ago' },
            { id: 4, user: 'Emma Johnson', text: 'I have a contact for a great independent plumber. Will DM you.', time: '30 minutes ago' },
            { id: 5, user: 'Robert Chen', text: 'PlumbRight did good work for us last year.', time: '15 minutes ago' }
        ],
        2: [
            { id: 1, user: 'Sarah Johnson', text: 'I\'ll be there!', time: '1 day ago' },
            { id: 2, user: 'Tom Wilson', text: 'Can we discuss the recent break-ins?', time: '22 hours ago' },
            { id: 3, user: 'Lisa Wong', text: 'I\'ll bring some snacks for everyone.', time: '20 hours ago' },
            { id: 4, user: 'David Miller', text: 'Looking forward to meeting everyone!', time: '18 hours ago' },
            { id: 5, user: 'Emma Johnson', text: 'Should we invite the police community officer?', time: '15 hours ago' },
            { id: 6, user: 'Robert Chen', text: 'I can help organize the meeting.', time: '12 hours ago' },
            { id: 7, user: 'Maria Garcia', text: 'What time should we arrive to help set up?', time: '10 hours ago' },
            { id: 8, user: 'James Brown', text: 'I\'ll bring extra chairs from my house.', time: '5 hours ago' }
        ]
    };
    
    // Open comment modal
    commentBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const postId = this.getAttribute('data-post-id') || '1'; // Default to post 1 if no ID
            loadComments(postId);
            commentModal.classList.add('show');
            document.body.style.overflow = 'hidden';
        });
    });
    
    // Close modal
    closeModalBtn.addEventListener('click', function() {
        commentModal.classList.remove('show');
        document.body.style.overflow = '';
    });
    
    // Close when clicking outside modal
    commentModal.addEventListener('click', function(e) {
        if (e.target === commentModal) {
            commentModal.classList.remove('show');
            document.body.style.overflow = '';
        }
    });
    
    // Load comments for a post
    function loadComments(postId) {
        commentsContainer.innerHTML = '';
        const comments = sampleComments[postId] || [];
        
        if (comments.length === 0) {
            commentsContainer.innerHTML = '<p class="no-comments">No comments yet. Be the first to comment!</p>';
            return;
        }
        
        comments.forEach(comment => {
            const commentEl = document.createElement('div');
            commentEl.className = 'comment';
            commentEl.innerHTML = `
                <img src="/images/user-default-picture.jpg" alt="${comment.user}">
                <div class="comment-content">
                    <div class="comment-header">
                        <strong>${comment.user}</strong>
                        <span>${comment.time}</span>
                    </div>
                    <p>${comment.text}</p>
                </div>
            `;
            commentsContainer.appendChild(commentEl);
        });
    }
    
    // Post a new comment
    postCommentBtn.addEventListener('click', function() {
        const commentText = commentInput.value.trim();
        if (commentText) {
            const newComment = {
                id: Date.now(),
                user: 'You',
                avatar: '/images/user-default-picture.jpg',
                text: commentText,
                time: 'Just now'
            };
            
            const commentEl = document.createElement('div');
            commentEl.className = 'comment';
            commentEl.innerHTML = `
                <img src="${newComment.avatar}" alt="${newComment.user}">
                <div class="comment-content">
                    <div class="comment-header">
                        <strong>${newComment.user}</strong>
                        <span>${newComment.time}</span>
                    </div>
                    <p>${newComment.text}</p>
                </div>
            `;
            
            commentsContainer.appendChild(commentEl);
            commentInput.value = '';
            
            // Scroll to bottom
            commentsContainer.scrollTop = commentsContainer.scrollHeight;
        }
    });
    
    // Create Post Functionality
    const addPhotoBtn = document.getElementById('addPhotoBtn');
    const photoUpload = document.getElementById('photoUpload');
    const photoPreviewContainer = document.getElementById('photoPreviewContainer');
    const submitPostBtn = document.getElementById('submitPostBtn');
    const postInput = document.getElementById('postInput');
    
    // Add photo button click
    addPhotoBtn.addEventListener('click', function() {
        photoUpload.click();
    });
    
    // Handle photo selection
    photoUpload.addEventListener('change', function(e) {
        photoPreviewContainer.innerHTML = '';
        
        if (e.target.files && e.target.files.length > 0) {
            Array.from(e.target.files).forEach(file => {
                if (file.type.match('image.*')) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        const previewItem = document.createElement('div');
                        previewItem.className = 'photo-preview-item';
                        previewItem.innerHTML = `
                            <img src="${event.target.result}" alt="Preview">
                            <button class="remove-photo">&times;</button>
                        `;
                        photoPreviewContainer.appendChild(previewItem);
                        
                        // Remove photo button
                        previewItem.querySelector('.remove-photo').addEventListener('click', function() {
                            previewItem.remove();
                        });
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    });

    // Allow pressing Enter in comment input to post
    commentInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            postCommentBtn.click();
        }
    });

    // Allow pressing Enter in post input to submit (but only if Shift isn't held)
    postInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            submitPostBtn.click();
        }
    });
});

// Announcement Modal Functions
function showAnnouncementModal(title, description, startDate, endDate) {
    document.getElementById('modalAnnouncementTitle').textContent = title;
    document.getElementById('modalAnnouncementDescription').textContent = description;
    document.getElementById('modalAnnouncementStartDate').textContent = startDate;
    document.getElementById('modalAnnouncementEndDate').textContent = endDate;
    document.getElementById('announcementModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function hideAnnouncementModal() {
    document.getElementById('announcementModal').style.display = 'none';
    document.body.style.overflow = '';
}

// Close announcement modal when clicking outside
document.getElementById('announcementModal').addEventListener('click', function(e) {
    if (e.target === this) {
        hideAnnouncementModal();
    }
});


function showAnnouncementModal(title, content, startDate, endDate, priority, author) {
    const modal = document.getElementById('announcementModal');
    const titleElement = document.getElementById('announcementModalTitle');
    const contentElement = document.getElementById('announcementModalContent');
    const startDateElement = document.getElementById('announcementModalStartDate');
    const endDateElement = document.getElementById('announcementModalEndDate');
    const priorityBadge = document.getElementById('announcementPriorityBadge');
    const authorElement = document.getElementById('announcementModalAuthor');

    // Set the content
    titleElement.textContent = title;
    contentElement.innerHTML = content.replace(/\n/g, '<br>');
    startDateElement.textContent = startDate || 'Not specified';
    endDateElement.textContent = endDate || 'No end date';
    authorElement.textContent = `Posted by: ${author || 'Admin'}`;

    // Set priority badge
    priorityBadge.textContent = priority || 'Normal';
    priorityBadge.className = 'announcement-priority';
    if (priority) {
        priorityBadge.classList.add(priority.toLowerCase());
    } else {
        priorityBadge.classList.add('normal');
    }

    // Show modal
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function hideAnnouncementModal() {
    document.getElementById('announcementModal').style.display = 'none';
    document.body.style.overflow = '';
}

// Close modal when clicking close button
document.getElementById('announcementModalClose').addEventListener('click', hideAnnouncementModal);

// Close modal when clicking outside
document.getElementById('announcementModal').addEventListener('click', function(e) {
    if (e.target === this) {
        hideAnnouncementModal();
    }
});
// Post Validation
function validatePost() {
    const postText = document.getElementById('postInput').value.trim();
    const hasPhotos = document.getElementById('photoPreviewContainer').children.length > 0;
    const errorElement = document.getElementById('postError');

    if (!postText && !hasPhotos) {
        if (!errorElement) {
            // Create error element if it doesn't exist
            const errorEl = document.createElement('div');
            errorEl.id = 'postError';
            errorEl.className = 'post-error';
            errorEl.textContent = "Please add some text or photos to your post";
            document.querySelector('.create-post').appendChild(errorEl);
        } else {
            errorElement.textContent = "Please add some text or photos to your post";
            errorElement.style.display = 'block';
        }
        return false;
    }

    if (errorElement) {
        errorElement.style.display = 'none';
    }
    return true;
}

// Modify your form submission to include validation
document.querySelector('.create-post form').addEventListener('submit', function(e) {
    if (!validatePost()) {
        e.preventDefault();
    }
});

// Add event listener to post input to validate on typing
document.getElementById('postInput').addEventListener('input', function() {
    validatePost();
});

// Add event listener to photo upload to validate when photos are added/removed
document.getElementById('photoUpload').addEventListener('change', function() {
    validatePost();
});


homeowner.cs - controllers
using HomeOwner.Data;
using HomeOwner.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;


namespace HomeOwner.Controllers
{

   
    public class Homeowner : BaseController
    {
        private readonly HomeOwnerContext _context;
        public Homeowner(HomeOwnerContext db)
        {
            _context = db;
              if (!homeownerRoute)
            {
               
                RedirectToAction("Index", "Home");
            }
        }

    
        
       
         public List<Announcement> GetAnnouncements()
        {
           
                var  currentDate = DateTime.Now;
            
                var announcements = _context.Announcement.Where(m=>  currentDate < m.end_date ).ToList();
              
            
        
            return announcements; 
        }

        
        //Error ni
        public void UpdateProfile(User model)
        {
            try
            {
                // Find the user in the database
                var existingUser = _context.User.FirstOrDefault(u => u.username == model.username);

                if (existingUser == null)
                {
                    ViewBag.Error = "Invalid user data.";
                    return;
                }

                // Update only the modified fields

                existingUser.firstname = model?.firstname;
                existingUser.lastname = model?.lastname;
                existingUser.email = model?.email;
                existingUser.address = model?.address;
                existingUser.contact_no = model?.contact_no;


                _context.User.Update(existingUser);
                _context.SaveChanges();

                ViewBag.Message = "Profile updated successfully!";

            }
            catch (Exception ex)
            {
                ViewBag.Error = "An error occurred while updating the profile.";

            }
        }

[HttpPost]
public async Task<IActionResult> AddPostUser(ViewModel model)
        {
        
                // Map Register model to User model
                var post = new Post
                {
                    content = model.newPost.content,
                    created_date = DateTime.Now,
                    updated_date = DateTime.Now,
                    user_id = CurrentUser.user_id, 
                };
                if (model.newPost.ImageFile != null && model.newPost.ImageFile.Length > 0)
        {
            // Save the image to a folder (e.g., wwwroot/uploads/posts)
            var uploadsFolder = Path.Combine("wwwroot", "uploads", "posts");
            Directory.CreateDirectory(uploadsFolder); // Ensure folder exists

            var uniqueFileName = Guid.NewGuid().ToString() + "_" + model.newPost.ImageFile.FileName;
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await model.newPost.ImageFile.CopyToAsync(stream);
            }

            post.ImagePath = $"/uploads/posts/{uniqueFileName}"; // Save path
        }


                // Save the user to the database
                _context.Post.Add(post);
                _context.SaveChanges();


                // Redirect to the Login page
                
            
            ViewBag.message = "Error username existed";
             return RedirectToAction("Community", "Homeowner");
        }




        public List<Post> RetrievePost()
        {
          
            var posts = _context.Post.Include(p => p.Author).ToList();
              
          
            return posts; 
        }
      





        public IActionResult Dashboard()
        {
            ViewContents();
            return View();
        }
        public IActionResult Login()
        {
            return View();
        }
        public IActionResult Feedback()
        {
            ViewContents();
            return View();
        }
      public IActionResult Community()
    {
        ViewContents(); // If this sets other ViewData (e.g., user info)
        
        var model = new ViewModel
        {
            Announcements = GetAnnouncements(), // Load announcements
            Posts = RetrievePost()             // Load posts
        };
        
        return View(model); // Pass the combined ViewModel
    }
        
        public IActionResult Payment()
        {
           ViewContents();
            return View();
        }
        public IActionResult History()
        {
            ViewContents();
            return View();
        }
        public IActionResult UserProfile()
        {
            ViewContents();
            return View();
        }

       public IActionResult Events()
        {
            ViewContents();
            return View();
        }
    }
}

 see that little three dots on the make small edit and delete for it and if I press edit i can edit the post that i had I can't edit the other person's post and then the delete if i delete there's a modal confirmation delete post - only my post that i can delete. give me the code please. only the user can edit and delete huh. do add dot on the other user post please!