
@{
    var user = ViewBag.CurrentUser;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - HomeOwner</title>
    <link rel="stylesheet" href="~/css/homeowners/dashboardhomeowners.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
</head>
<style>
    /* Survey Modal Styles */
.modasurvey {
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    min-height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-contentsurvey {
    background-color: #fff;
    border-radius: 12px;
    width: 90%;
    max-width: 600px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    overflow: hidden;
}

.modal-headersurvey {
    padding: 20px;
    background-color: #6D4C41;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-headersurvey h3 {
    margin: 0;
    font-size: 1.5rem;
}

.close {
    font-size: 1.8rem;
    cursor: pointer;
    transition: transform 0.2s;
}

.close:hover {
    transform: scale(1.1);
}

.modal-bodysurvey {
    padding: 20px;
}

.survey-intro {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f8f8f8;
    border-radius: 8px;
    border-left: 4px solid #6D4C41;
}

.survey-intro p {
    margin: 0;
    color: #555;
}

/* Progress Bar */
.progress-container {
    margin-bottom: 25px;
}

.progress-bar {
    height: 8px;
    background-color: #f0f0f0;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 8px;
}

.progress-fill {
    height: 100%;
    background-color: #6D4C41;
    width: 0%;
    transition: width 0.3s ease;
    border-radius: 4px;
}

.progress-text {
    font-size: 0.9rem;
    color: #666;
    display: block;
    text-align: center;
}

/* Survey Questions */
.survey-question {
    margin-bottom: 25px;
    animation: fadeIn 0.3s ease;
}

@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.survey-question h4 {
    margin-bottom: 15px;
    color: #333;
    font-size: 1.1rem;
}

/* Question Options */
.option-radio {
    margin-bottom: 12px;
    display: flex;
    align-items: center;
}

.option-radio input[type="radio"],
.option-radio input[type="checkbox"] {
    margin-right: 12px;
    width: 18px;
    height: 18px;
}

.option-radio label {
    cursor: pointer;
    color: #444;
    flex: 1;
}

/* Text Answer */
.text-answer {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 1rem;
    resize: vertical;
    min-height: 100px;
}

.text-answer:focus {
    outline: none;
    border-color: #6D4C41;
    box-shadow: 0 0 0 2px rgba(109, 76, 65, 0.2);
}

/* Range Slider */
.range-container {
    margin: 20px 0;
}

.range-slider {
    width: 100%;
    margin: 15px 0;
    -webkit-appearance: none;
    height: 8px;
    border-radius: 4px;
    background: #ddd;
    outline: none;
}

.range-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #6D4C41;
    cursor: pointer;
    transition: all 0.2s;
}

.range-slider::-webkit-slider-thumb:hover {
    transform: scale(1.1);
}

.range-value {
    text-align: center;
    font-size: 1.2rem;
    color: #6D4C41;
    font-weight: bold;
    margin-top: 5px;
}

/* Navigation Buttons */
.survey-nav {
    display: flex;
    justify-content: space-between;
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.btn-primary {
    background-color: #6D4C41;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
}

.btn-primary:hover {
    background-color: #5a3f36;
    transform: translateY(-1px);
}

.btn-primary:active {
    transform: translateY(0);
}

.btn-outline {
    background-color: transparent;
    color: #6D4C41;
    border: 1px solid #6D4C41;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
}

.btn-outline:hover {
    background-color: rgba(109, 76, 65, 0.1);
    transform: translateY(-1px);
}

.btn-outline:active {
    transform: translateY(0);
}

.btn-outline:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

/* Responsive Adjustments */
@@media (max-width: 480px) {
    .modal-contentsurvey {
        width: 95%;
    }
    
    .survey-nav {
        flex-direction: column-reverse;
        gap: 10px;
    }
    
    .btn-primary, .btn-outline {
        width: 100%;
        justify-content: center;
    }
}
</style>
<body>
    
<nav class="navbar">
    <!-- Logo -->
    <a href="#" class="logo">
        <img src="~/images/logo.png" alt="Company Logo">
        <span>HomeSphere</span>
    </a>

    <!-- Navigation Links -->
    <ul class="nav-menu">
        <li class="nav-item"><a asp-controller="Homeowner" asp-action="Dashboard" class="nav-link">Home</a></li>
        <li class="nav-item">
            <a asp-controller="Homeowner" asp-action="Feedback" class="nav-link">Feedback</a>
        </li>        
        <li class="nav-item has-dropdown">
            <a href="#" class="nav-link">Billing <span>â–¼</span></a>
            <div class="dropdown-content">
                <a asp-controller="Homeowner" asp-action="Payment" class="dropdown-link">Make Payment</a>
                <a asp-controller="Homeowner" asp-action="History" class="dropdown-link">View History</a>
            </div>
        </li>
        <li class="nav-item">
            <a asp-controller="Homeowner" asp-action="Community" class="nav-link">Community</a>
        </li>
         <li class="nav-item">
            <a asp-controller="Homeowner" asp-action="Events" class="nav-link">Events</a>
        </li>
    </ul>

    <!-- User Profile and Hamburger Container -->
    <div class="user-hamburger-container">
        <!-- Hamburger Menu for Mobile -->
        <button class="hamburger" onclick="toggleMenu()">
            <span></span>
            <span></span>
            <span></span>
        </button>

        <!-- User Profile with Dropdown -->
        <div class="user-profile" onclick="toggleProfileDropdown()">
                <span style="text-transform: capitalize;">@user?.firstname @user?.lastname</span>
                <img src="~/images/user-default-picture.jpg" alt="User profile" />
            <!-- Dropdown Menu -->
            <div class="profile-dropdown">
                <a asp-controller="Homeowner" asp-action="UserProfile" class="dropdown-link">Settings</a>
                <!-- Log Out Form -->
                <form asp-controller="Home" asp-action="LogOut" method="post" class="dropdown-link-form">
                    <button type="submit" class="dropdown-link">Log Out</button>
                </form>
            </div>
        </div>
        
    </div>
</nav>

<div>
    <main>
        @RenderBody()
    </main>
</div>

<!-- Survey Modal - Add this to your layout file -->
<div id="surveyModal" class="modalsurvey" style="display: none;">
    <div class="modal-contentsurvey">
        <div class="modal-headersurvey">
            <h3>Community Survey</h3>
            <span class="close">&times;</span>
        </div>
        <div class="modal-bodysurvey">
            <div class="survey-intro">
                <p>We value your feedback! Please take a moment to complete this short survey about our community.</p>
            </div>
            
            <div id="surveyProgress">
                <div class="progress-container">
                    <div class="progress-bar">
                        <div class="progress-fill"></div>
                    </div>
                    <span class="progress-text">Question <span id="currentQuestionNum">1</span> of <span id="totalQuestions">5</span></span>
                </div>
            </div>
            
            <form id="surveyForm">
                <div id="surveyQuestionsContainer">
                    <!-- Questions will be loaded here dynamically -->
                </div>
                
                <div class="survey-nav">
                    <button type="button" id="prevQuestion" class="btn-outline" disabled>
                        <i class="fas fa-chevron-left"></i> Previous
                    </button>
                    <button type="button" id="nextQuestion" class="btn-primary">
                        Next <i class="fas fa-chevron-right"></i>
                    </button>
                    <button type="submit" id="submitSurvey" class="btn-primary" style="display: none;">
                        Submit Survey <i class="fas fa-check"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>

<script>
// Mobile menu toggle
function toggleMenu() {
    const navMenu = document.querySelector('.nav-menu');
    navMenu.classList.toggle('active');
    
    // Toggle hamburger animation
    const hamburger = document.querySelector('.hamburger');
    hamburger.classList.toggle('active');
}

// Profile dropdown toggle
function toggleProfileDropdown() {
    const userProfile = document.querySelector('.user-profile');
    userProfile.classList.toggle('active');
}

// Close profile dropdown when clicking outside
document.addEventListener('click', function (event) {
    const userProfile = document.querySelector('.user-profile');
    if (!userProfile.contains(event.target)) {
        userProfile.classList.remove('active');
    }
});

// Mobile dropdown toggle for billing
document.addEventListener('DOMContentLoaded', function() {
    const billingLink = document.querySelector('.has-dropdown .nav-link');
    const dropdownContent = document.querySelector('.has-dropdown .dropdown-content');
    
    if (window.innerWidth <= 900) {
        billingLink.addEventListener('click', function(e) {
            e.preventDefault();
            dropdownContent.classList.toggle('show');
        });
    }
    
    // Update event listener on window resize
    window.addEventListener('resize', function() {
        if (window.innerWidth <= 900) {
            billingLink.addEventListener('click', function(e) {
                e.preventDefault();
                dropdownContent.classList.toggle('show');
            });
        } else {
            // Clone the element and replace it to remove event listeners
            const newBillingLink = billingLink.cloneNode(true);
            billingLink.parentNode.replaceChild(newBillingLink, billingLink);
        }
    });
});

// Highlight active navigation link based on URL
document.addEventListener('DOMContentLoaded', function () {
    const navLinks = document.querySelectorAll('.nav-menu > .nav-item > .nav-link');
    const currentUrl = window.location.pathname;

    navLinks.forEach(link => {
        const linkHref = link.getAttribute('href');

        if (linkHref === currentUrl) {
            link.classList.add('active');
        }
    });

    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            navLinks.forEach(link => link.classList.remove('active'));
            link.classList.add('active');
        });
    });
});

// Close mobile menu when clicking on a link
document.querySelectorAll('.nav-link:not(.has-dropdown .nav-link), .dropdown-link').forEach(link => {
    link.addEventListener('click', () => {
        if (window.innerWidth <= 900) {
            document.querySelector('.nav-menu').classList.remove('active');
            document.querySelector('.hamburger').classList.remove('active');
        }
    });
});

// Prevent dropdown from disappearing when moving mouse from nav item to dropdown
document.querySelectorAll('.nav-item').forEach(item => {
    const dropdown = item.querySelector('.dropdown-content');
    if (dropdown) {
        // Add mouseenter event to keep dropdown open when hovering over it
        dropdown.addEventListener('mouseenter', () => {
            item.classList.add('hover');
        });
        
        // Add mouseleave event to close dropdown when leaving it
        dropdown.addEventListener('mouseleave', () => {
            item.classList.remove('hover');
            dropdown.style.display = 'none';
        });
        
        // Add mouseenter event to parent item
        item.addEventListener('mouseenter', () => {
            dropdown.style.display = 'block';
        });
        
        // Add mouseleave event to parent item
        item.addEventListener('mouseleave', () => {
            // Only hide if not hovering over dropdown
            if (!item.classList.contains('hover')) {
                dropdown.style.display = 'none';
            }
        });
    }
});

// Highlight today's date and select a date (if applicable)
document.addEventListener('DOMContentLoaded', function () {
    const days = document.querySelectorAll('.day');
    const today = new Date();
    const currentDay = today.getDate();

    // Highlight today's date
    days.forEach(day => {
        if (parseInt(day.textContent) === currentDay) {
            day.classList.add('today');
        }
    });

    // Add click event to select a date
    days.forEach(day => {
        day.addEventListener('click', () => {
            // Remove selected class from all days
            days.forEach(d => d.classList.remove('selected'));

            // Add selected class to the clicked day
            day.classList.add('selected');
        });
    });
});

// Survey functionality
document.addEventListener('DOMContentLoaded', function() {
    const surveyModal = document.getElementById('surveyModal');
    const closeButton = surveyModal.querySelector('.close');
    const surveyForm = document.getElementById('surveyForm');
    const questionsContainer = document.getElementById('surveyQuestionsContainer');
    const prevQuestionBtn = document.getElementById('prevQuestion');
    const nextQuestionBtn = document.getElementById('nextQuestion');
    const submitSurveyBtn = document.getElementById('submitSurvey');
    const progressFill = document.querySelector('.progress-fill');
    const currentQuestionNum = document.getElementById('currentQuestionNum');
    const totalQuestions = document.getElementById('totalQuestions');
    
    // Sample survey questions (in a real app, these would come from the server)
    const surveyQuestions = [
        {
            id: 1,
            text: "How satisfied are you with the current community amenities?",
            type: "radio",
            options: ["Very satisfied", "Satisfied", "Neutral", "Dissatisfied", "Very dissatisfied"]
        },
        {
            id: 2,
            text: "Which of these improvements would you like to see in our community? (Select all that apply)",
            type: "checkbox",
            options: ["Better playground equipment", "More green spaces", "Improved parking", "Community center", "Walking trails"]
        },
        {
            id: 3,
            text: "How often do you attend community events?",
            type: "radio",
            options: ["Regularly", "Occasionally", "Rarely", "Never"]
        },
        {
            id: 4,
            text: "What additional services would you like the HOA to provide?",
            type: "text",
            placeholder: "Enter your suggestions..."
        },
        {
            id: 5,
            text: "On a scale of 1-10, how would you rate your overall experience living in this community?",
            type: "range",
            min: 1,
            max: 10
        }
    ];
    
    let currentQuestionIndex = 0;
    let answers = {};
    
    // Set total questions count
    totalQuestions.textContent = surveyQuestions.length;
    
    // Function to show survey modal (call this after transactions)
    window.showSurveyModal = function() {
        // Check if user has already completed this survey
        const hasCompleted = localStorage.getItem('currentSurveyCompleted');
        if (!hasCompleted) {
            surveyModal.style.display = 'flex';
            loadQuestion(currentQuestionIndex);
        }
    }
    
    // For testing - you can call showSurveyModal() when needed
    // setTimeout(showSurveyModal, 1000);
    
    // Close modal
    closeButton.addEventListener('click', function() {
        surveyModal.style.display = 'none';
        saveCurrentAnswer(); // Save progress if user closes
    });
    
    // Close when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target === surveyModal) {
            surveyModal.style.display = 'none';
            saveCurrentAnswer(); // Save progress if user closes
        }
    });
    
    // Load a question by index
    function loadQuestion(index) {
        const question = surveyQuestions[index];
        questionsContainer.innerHTML = '';
        
        // Update progress
        const progressPercent = ((index + 1) / surveyQuestions.length) * 100;
        progressFill.style.width = `${progressPercent}%`;
        currentQuestionNum.textContent = index + 1;
        
        // Create question element
        const questionElement = document.createElement('div');
        questionElement.className = 'survey-question';
        questionElement.dataset.questionId = question.id;
        
        // Add question text
        const questionText = document.createElement('h4');
        questionText.textContent = question.text;
        questionElement.appendChild(questionText);
        
        // Add input based on question type
        if (question.type === 'radio') {
            question.options.forEach((option, i) => {
                const optionId = `q${question.id}_opt${i}`;
                const optionContainer = document.createElement('div');
                optionContainer.className = 'option-radio';
                
                const input = document.createElement('input');
                input.type = 'radio';
                input.name = `q${question.id}`;
                input.id = optionId;
                input.value = option;
                
                // Check if this option was previously selected
                if (answers[question.id] === option) {
                    input.checked = true;
                }
                
                const label = document.createElement('label');
                label.htmlFor = optionId;
                label.textContent = option;
                
                optionContainer.appendChild(input);
                optionContainer.appendChild(label);
                questionElement.appendChild(optionContainer);
            });
        } else if (question.type === 'checkbox') {
            question.options.forEach((option, i) => {
                const optionId = `q${question.id}_opt${i}`;
                const optionContainer = document.createElement('div');
                optionContainer.className = 'option-radio';
                
                const input = document.createElement('input');
                input.type = 'checkbox';
                input.name = `q${question.id}`;
                input.id = optionId;
                input.value = option;
                
                // Check if this option was previously selected
                if (answers[question.id] && answers[question.id].includes(option)) {
                    input.checked = true;
                }
                
                const label = document.createElement('label');
                label.htmlFor = optionId;
                label.textContent = option;
                
                optionContainer.appendChild(input);
                optionContainer.appendChild(label);
                questionElement.appendChild(optionContainer);
            });
        } else if (question.type === 'text') {
            const input = document.createElement('textarea');
            input.className = 'text-answer';
            input.name = `q${question.id}`;
            input.placeholder = question.placeholder || 'Enter your answer...';
            
            // Set previous answer if exists
            if (answers[question.id]) {
                input.value = answers[question.id];
            }
            
            questionElement.appendChild(input);
        } else if (question.type === 'range') {
            const rangeContainer = document.createElement('div');
            rangeContainer.className = 'range-container';
            
            const input = document.createElement('input');
            input.type = 'range';
            input.className = 'range-slider';
            input.name = `q${question.id}`;
            input.min = question.min;
            input.max = question.max;
            input.value = answers[question.id] || Math.floor((question.max - question.min) / 2) + question.min;
            
            const valueDisplay = document.createElement('div');
            valueDisplay.className = 'range-value';
            valueDisplay.textContent = input.value;
            
            input.addEventListener('input', function() {
                valueDisplay.textContent = this.value;
            });
            
            rangeContainer.appendChild(input);
            rangeContainer.appendChild(valueDisplay);
            questionElement.appendChild(rangeContainer);
        }
        
        questionsContainer.appendChild(questionElement);
        
        // Update navigation buttons
        prevQuestionBtn.disabled = index === 0;
        nextQuestionBtn.style.display = index === surveyQuestions.length - 1 ? 'none' : 'block';
        submitSurveyBtn.style.display = index === surveyQuestions.length - 1 ? 'block' : 'none';
    }
    
    // Save answer for current question
    function saveCurrentAnswer() {
        const question = surveyQuestions[currentQuestionIndex];
        const questionElement = questionsContainer.querySelector('.survey-question');
        
        if (!questionElement) return;
        
        if (question.type === 'radio') {
            const selectedOption = questionElement.querySelector(`input[name="q${question.id}"]:checked`);
            answers[question.id] = selectedOption ? selectedOption.value : null;
        } else if (question.type === 'checkbox') {
            const selectedOptions = questionElement.querySelectorAll(`input[name="q${question.id}"]:checked`);
            answers[question.id] = Array.from(selectedOptions).map(opt => opt.value);
        } else {
            const input = questionElement.querySelector(`input[name="q${question.id}"], textarea[name="q${question.id}"]`);
            if (input) {
                answers[question.id] = input.value;
            }
        }
    }
    
    // Navigation between questions
    nextQuestionBtn.addEventListener('click', function() {
        saveCurrentAnswer();
        currentQuestionIndex++;
        loadQuestion(currentQuestionIndex);
    });
    
    prevQuestionBtn.addEventListener('click', function() {
        saveCurrentAnswer();
        currentQuestionIndex--;
        loadQuestion(currentQuestionIndex);
    });
    
    // Form submission
    surveyForm.addEventListener('submit', function(e) {
        e.preventDefault();
        saveCurrentAnswer();
        
        // Here you would typically send the answers to the server
        console.log('Survey answers:', answers);
        
        // Mark survey as completed
        localStorage.setItem('currentSurveyCompleted', 'true');
        
        // Close modal and show thank you message
        surveyModal.style.display = 'none';
        
        // Show thank you message (you can customize this)
        const thankYouMessage = document.createElement('div');
        thankYouMessage.className = 'thank-you-message';
        thankYouMessage.innerHTML = `
            <div class="thank-you-content">
                <i class="fas fa-check-circle" style="font-size: 3rem; color: #4CAF50; margin-bottom: 1rem;"></i>
                <h3>Thank You!</h3>
                <p>Your feedback has been submitted successfully.</p>
                <p>We appreciate your time and valuable input.</p>
            </div>
        `;
        
        document.body.appendChild(thankYouMessage);
        
        setTimeout(() => {
            thankYouMessage.style.opacity = '1';
        }, 10);
        
        setTimeout(() => {
            thankYouMessage.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(thankYouMessage);
            }, 300);
        }, 3000);
    });
});

</script>
<script src="~/js/stringHelpers.js"></script>
</body>
</html>