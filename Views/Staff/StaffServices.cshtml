@model HomeOwner.Models.User
@{
    ViewData["Title"] = "Staff Services";
    ViewData["Subtitle"] = "Manage Approved Bookings";
    Layout = "~/Views/Shared/StaffLayout.cshtml";
    ViewBag.ActiveMenu = "Staff Services";
}

<link rel="stylesheet" href="~/css/staff/services.css" />
<meta name="staff-name" content="@ViewBag.CurrentUser.firstname @ViewBag.CurrentUser.lastname" />
<style>
    .loading-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
        text-align: center;
    }
    
    .loading-state i {
        font-size: 2rem;
        color: #6B4423;
        margin-bottom: 15px;
    }
    
    .error-message {
        padding: 20px;
        text-align: center;
    }
    
    .error-message div {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 10px;
        color: #721c24;
    }
    
    .error-message i {
        font-size: 2rem;
        color: #dc3545;
    }
    
    .error-message p {
        font-size: 1rem;
        margin: 0;
    }
    
    .no-data {
        padding: 30px;
        text-align: center;
    }
    
    .no-data-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 10px;
        color: #6c757d;
    }
    
    .no-data-message i {
        font-size: 2rem;
        color: #6c757d;
    }
    
    /* Status badges styling */
    .status-badge {
        display: inline-block;
        padding: 3px 10px;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
    }
    
    .status-approved {
        background-color: #d4edda;
        color: #155724;
    }
    
    .status-in-progress {
        background-color: #fff3cd; 
        color: #856404;
    }
    
    .status-paid {
        background-color: #cce5ff;
        color: #004085;
    }
    
    /* Modal styling improvements */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        align-items: center;
        justify-content: center;
    }
    
    .modal.active {
        display: flex;
    }
    
    /* Improved table styling */
    .reservations-table {
        width: 100%;
        border-collapse: collapse;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }
    
    .reservations-table th {
        background-color: var(--primary-color);
        padding: 12px 15px;
        text-align: left;
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }
    
    .reservations-table td {
        padding: 12px 15px;
        border-bottom: 1px solid #e9ecef;
        color: #212529;
    }
    
    .reservations-table tr:hover {
        background-color: #f8f9fa;
        cursor: pointer;
    }
    
    .action-buttons {
        display: flex;
        gap: 5px;
    }
    
    .btn-icon {
        background-color: transparent;
        border: none;
        color: #6B4423;
        cursor: pointer;
        padding: 5px;
        border-radius: 50%;
        transition: background-color 0.2s;
    }
    
    .btn-icon:hover {
        background-color: rgba(107, 68, 35, 0.1);
    }
</style>

<div class="staff-services-container">
    <!-- Header Section -->
    <div class="services-header">
    </div>

    <!-- Tabs for different service types -->
    <div class="services-tabs">
        <div class="tab active" data-tab="facility">Facility Reservations</div>
        <div class="tab" data-tab="maintenance">Service Maintenance</div>
    </div>

    <!-- Facility Reservations Section -->
    <div class="service-section active" id="facility-section">
        <div class="section-header">
            <h2>Approved Facility Reservations</h2>
            <div class="search-filter">
                <input type="text" id="facility-search" placeholder="Search reservations...">
                <select id="facility-filter">
                    <option value="all">All Facilities</option>
                    <option value="Function Hall">Function Hall</option>
                    <option value="Sports Court">Sports Court</option>
                    <option value="Swimming Pool">Swimming Pool</option>
                    <option value="Fitness Gym">Fitness Gym</option>
                </select>
            </div>
        </div>

        <div class="reservations-table-container">
            <table class="reservations-table">
                <thead>
                    <tr>
                        <th>Reservation ID</th>
                        <th>Facility</th>
                        <th>Resident</th>
                        <th>Date & Time</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="facilityReservationsTable">
                    <!-- Facility reservations will be loaded here -->
                </tbody>
            </table>
        </div>

        <div class="pagination-container">
            <div class="pagination-info" id="facilityPaginationInfo"></div>
            <div class="pagination-controls">
                <button class="btn btn-outline pagination-prev" id="facilityPrevPageBtn" disabled>
                    <i class="fas fa-chevron-left"></i> Previous
                </button>
                <div class="pagination-numbers" id="facilityPageNumbers"></div>
                <button class="btn btn-outline pagination-next" id="facilityNextPageBtn">
                    Next <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Service Maintenance Section -->
    <div class="service-section" id="maintenance-section">
        <div class="section-header">
            <h2>Approved Service Requests</h2>
            <div class="search-filter">
                <input type="text" id="maintenance-search" placeholder="Search requests...">
                <select id="maintenance-filter">
                    <option value="all">All Services</option>
                    <option value="House Cleaning">House Cleaning</option>
                    <option value="Garden Maintenance">Garden Maintenance</option>
                    <option value="Handyman Services">Handyman Services</option>
                    <option value="Safety Inspection">Safety Inspection</option>
                </select>
            </div>
        </div>

        <div class="requests-table-container">
            <!-- Loading State -->
            <div class="loading-state" style="display: none;">
                <i class="fas fa-circle-notch fa-spin"></i>
                <p>Loading service requests...</p>
            </div>
            
            <table class="requests-table">
                <thead>
                    <tr>
                        <th>Request ID</th>
                        <th>Homeowner</th>
                        <th>Service</th>
                        <th>Scheduled Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="maintenanceRequestsTable">
                    <!-- Maintenance requests will be loaded here -->
                </tbody>
            </table>
        </div>

        <div class="pagination-container">
            <div class="pagination-info" id="maintenancePaginationInfo"></div>
            <div class="pagination-controls">
                <button class="btn btn-outline" id="maintenancePrevPageBtn" disabled>
                    <i class="fas fa-chevron-left"></i> Previous
                </button>
                <div class="page-numbers" id="maintenancePageNumbers"></div>
                <button class="btn btn-outline" id="maintenanceNextPageBtn">
                    Next <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Details Modal for Facility Reservations -->
<div class="modal" id="facilityDetailsModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Facility Reservation Details</h3>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="details-summary">
                <h4 id="facilityDetailsId">Reservation #RES-2023-002</h4>
                <div class="details-item">
                    <span class="details-label">Status:</span>
                    <span class="details-value" id="facilityDetailsStatus"><span class="status-badge status-approved">Approved</span></span>
                </div>
                <div class="details-item">
                    <span class="details-label">Facility:</span>
                    <span class="details-value" id="facilityDetailsFacility">Sports Court</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Resident:</span>
                    <span class="details-value" id="facilityDetailsResident">Maria Garcia (Unit 205)</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Date:</span>
                    <span class="details-value" id="facilityDetailsDate">16 Oct 2023</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Time:</span>
                    <span class="details-value" id="facilityDetailsTime">09:00 - 11:00 (2 hours)</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Guests:</span>
                    <span class="details-value" id="facilityDetailsGuests">15 people</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Purpose:</span>
                    <span class="details-value" id="facilityDetailsPurpose">Badminton Tournament</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Amount:</span>
                    <span class="details-value" id="facilityDetailsAmount">$50.00</span>
                </div>
            </div>
            
            <div class="staff-actions">
                <h5>Staff Booking Confirmation</h5>
                <div class="form-group">
                    <label for="facilityStaffNotes">Notes for Staff (Internal):</label>
                    <textarea id="facilityStaffNotes" placeholder="Add any internal notes about this reservation..."></textarea>
                </div>
                <div class="form-group">
                    <label for="facilityNotificationMessage">Message to Homeowner:</label>
                    <textarea id="facilityNotificationMessage" rows="6" placeholder="Enter message to notify the homeowner..."></textarea>
                    <small class="help-text">This message will be sent to the homeowner as a notification.</small>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-outline close-modal">Cancel</button>
            <button class="btn btn-primary" id="confirmFacilityBookingBtn">
                <i class="fas fa-check-circle"></i> Confirm Booking
            </button>
        </div>
    </div>
</div>

<!-- Details Modal for Service Maintenance -->
<div class="modal-overlay" id="maintenanceDetailsModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Service Request Details</h3>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="details-summary">
                <h4 id="maintenanceDetailsId">Request #SR-2023-002</h4>
                <div class="details-item">
                    <span class="details-label">Status:</span>
                    <span class="details-value" id="maintenanceDetailsStatus"><span class="status-badge status-approved">Approved</span></span>
                </div>
                <div class="details-item">
                    <span class="details-label">Service:</span>
                    <span class="details-value" id="maintenanceDetailsService">Garden Maintenance</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Homeowner:</span>
                    <span class="details-value" id="maintenanceDetailsResident">Priya Sharma (Unit 5C)</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Scheduled Date:</span>
                    <span class="details-value" id="maintenanceDetailsDate">26 Oct 2023</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Scheduled Time:</span>
                    <span class="details-value" id="maintenanceDetailsTime">02:00 PM</span>
                </div>
                <div class="details-item">
                    <span class="details-label">Payment Status:</span>
                    <span class="details-value" id="maintenanceDetailsPayment"><span class="status-badge status-paid">Paid</span></span>
                </div>
                <div class="details-item">
                    <span class="details-label">Special Instructions:</span>
                    <span class="details-value" id="maintenanceDetailsInstructions">Please trim the hedges along the front walkway and remove weeds from the flower beds. The lawn needs mowing as well.</span>
                </div>
            </div>
            
            <div class="staff-actions">
                <h5>Staff Booking Acceptance</h5>
                <div class="form-group">
                    <label for="maintenanceStaffNotes">Notes for Homeowner:</label>
                    <textarea id="maintenanceStaffNotes" placeholder="Add any notes for the homeowner about this service..."></textarea>
                </div>
                <div class="form-group">
                    <label for="maintenanceNotificationType">Notification Type:</label>
                    <select id="maintenanceNotificationType">
                        <option value="confirmation">Service Confirmation</option>
                        <option value="reminder">Reminder</option>
                        <option value="instructions">Special Instructions</option>
                        <option value="custom">Custom Message</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="maintenanceNotificationMessage">Message to Homeowner:</label>
                    <textarea id="maintenanceNotificationMessage" placeholder="Enter message to notify the homeowner..."></textarea>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-outline close-modal-btn">Cancel</button>
            <button class="btn btn-primary" id="acceptMaintenanceBookingBtn">
                <i class="fas fa-check-circle"></i> Accept Booking
            </button>
        </div>
    </div>
</div>

<!-- SweetAlert CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const tabs = document.querySelectorAll('.tab');
        const facilitySection = document.getElementById('facility-section');
        const maintenanceSection = document.getElementById('maintenance-section');
        
        // Get current user information from ViewBag for notifications
        const CurrentUser = {
            user_id: @ViewBag.CurrentUser.user_id,
            firstname: "@ViewBag.CurrentUser.firstname",
            lastname: "@ViewBag.CurrentUser.lastname",
            role: "@ViewBag.CurrentUser.role"
        };
        
        // Facility Reservation Elements
        const facilityTableBody = document.getElementById('facilityReservationsTable');
        const facilitySearch = document.getElementById('facility-search');
        const facilityFilter = document.getElementById('facility-filter');
        const facilityPrevBtn = document.getElementById('facilityPrevPageBtn');
        const facilityNextBtn = document.getElementById('facilityNextPageBtn');
        const facilityPageNumbers = document.getElementById('facilityPageNumbers');
        const facilityPaginationInfo = document.getElementById('facilityPaginationInfo');
        
        // Service Maintenance Elements
        const maintenanceTableBody = document.getElementById('maintenanceRequestsTable');
        const maintenanceSearch = document.getElementById('maintenance-search');
        const maintenanceFilter = document.getElementById('maintenance-filter');
        const maintenancePrevBtn = document.getElementById('maintenancePrevPageBtn');
        const maintenanceNextBtn = document.getElementById('maintenanceNextPageBtn');
        const maintenancePageNumbers = document.getElementById('maintenancePageNumbers');
        const maintenancePaginationInfo = document.getElementById('maintenancePaginationInfo');
        
        // Modal Elements
        const facilityDetailsModal = document.getElementById('facilityDetailsModal');
        const maintenanceDetailsModal = document.getElementById('maintenanceDetailsModal');
        const closeModalButtons = document.querySelectorAll('.close-modal, .close-modal-btn');
        
        // API URLs
        const serviceRequestApiUrl = '/Staff/GetServiceRequests';
        const facilityReservationApiUrl = '/Staff/GetApprovedFacilityReservations';
        
        // WebSocket connection
        let ws = null;
        let wsConnected = false;
        
        // Current selected items
        let currentFacilityReservation = null;
        let currentMaintenanceRequest = null;
        let maintenanceRequests = [];
        let facilityReservations = [];
        
        // Initialize both facility reservations and service requests
        initWebSocket(); // This will load maintenance requests when connected
        fetchApprovedFacilityReservations(); // Explicitly fetch facility reservations
        
        // Fetch approved facility reservations function
        async function fetchApprovedFacilityReservations() {
            try {
                console.log("Fetching approved facility reservations from:", facilityReservationApiUrl);
                
                // Show loading state
                if (facilityTableBody) {
                    facilityTableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center">
                                <div class="loading-state">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>Loading facility reservations...</p>
                                </div>
                            </td>
                        </tr>
                    `;
                }
                
                const response = await fetch(facilityReservationApiUrl);
                const data = await response.json();
                
                console.log("Facility reservation API response:", data);
                
                if (data.success) {
                    facilityReservations = data.reservations || [];
                    console.log("Loaded facility reservations:", facilityReservations.length);
                    
                    if (facilityReservations.length === 0) {
                        facilityTableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="no-data">
                                    <div class="no-data-message">
                                        <i class="fas fa-calendar-times"></i>
                                        <p>No approved facility reservations found</p>
                                    </div>
                                </td>
                            </tr>
                        `;
                    } else {
                        renderFacilityReservations();
                    }
                } else {
                    console.error('Failed to load facility reservations:', data.message);
                    
                    // Handle authentication errors
                    if (data.message && data.message.includes("Not authenticated")) {
                        Swal.fire({
                            title: 'Authentication Error',
                            text: 'You are not logged in or your session has expired. Please log in again.',
                            icon: 'error',
                            confirmButtonText: 'Go to Login',
                            confirmButtonColor: '#6B4423',
                        }).then(() => {
                            window.location.href = '/';
                        });
                    } else {
                        // For other errors
                        facilityTableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="error-message">
                                    <div>
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <p>Failed to load facility reservations. ${data.message || 'Please try again later.'}</p>
                                    </div>
                                </td>
                            </tr>
                        `;
                    }
                }
            } catch (error) {
                console.error('Error fetching facility reservations:', error);
                
                // Show error in the table
                facilityTableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="error-message">
                            <div>
                                <i class="fas fa-exclamation-triangle"></i>
                                <p>Error connecting to the server. Please check your connection and try again.</p>
                            </div>
                        </td>
                    </tr>
                `;
            }
        }
        
        // Initialize WebSocket connection
        function initWebSocket() {
            if (ws && (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING)) {
                return; // Already connected or connecting
            }

            try {
                const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
                ws = new WebSocket(`${protocol}${window.location.host}/ws/homeowner/service-requests`);
                
                ws.onopen = function() {
                    console.log('Service Request WebSocket connection established');
                    wsConnected = true;
                    loadMaintenanceRequests();
                };
                
                ws.onmessage = function(event) {
                    try {
                        const data = JSON.parse(event.data);
                        console.log('Received WebSocket message:', data);
                        
                        if (data.type === 'service_request_update') {
                            // Refresh the maintenance requests when there's an update
                            loadMaintenanceRequests();
                        }
                    } catch (error) {
                        console.error('Error processing WebSocket message:', error);
                    }
                };
                
                ws.onclose = function(event) {
                    console.log('Service Request WebSocket connection closed', event.code, event.reason);
                    wsConnected = false;
                    setTimeout(initWebSocket, 3000); // Try to reconnect after 3 seconds
                };
                
                ws.onerror = function(error) {
                    console.error('Service Request WebSocket error:', error);
                    wsConnected = false;
                };
            } catch (error) {
                console.error('Service Request WebSocket initialization failed:', error);
                wsConnected = false;
                setTimeout(initWebSocket, 3000);
            }
        }
        
        // Keep WebSocket connection alive
        setInterval(() => {
            if (ws && wsConnected && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ type: 'ping' }));
            }
        }, 30000); // Every 30 seconds
        
        // Fetch real service requests from the API
        async function loadMaintenanceRequests() {
            try {
                // Show loading state
                const loadingState = document.querySelector('.loading-state');
                loadingState.style.display = 'flex';
                maintenanceTableBody.innerHTML = '';
                
                console.log("Fetching service requests from:", serviceRequestApiUrl);
                
                const response = await fetch(serviceRequestApiUrl);
                const data = await response.json();
                
                console.log("Service request API response:", data);
                
                // Hide loading state
                loadingState.style.display = 'none';
                
                if (data.success) {
                    // Make sure we have properly filtered data
                    maintenanceRequests = data.requests || [];
                    console.log("Loaded service requests:", maintenanceRequests);
                    
                    if (maintenanceRequests.length === 0) {
                        maintenanceTableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="no-data">
                                    <div class="no-data-message">
                                        <i class="fas fa-calendar-times"></i>
                                        <p>No paid service requests found</p>
                                    </div>
                                </td>
                            </tr>
                        `;
                    } else {
                        renderMaintenanceRequests();
                    }
                } else {
                    console.error('Failed to load service requests:', data.message);
                    
                    // Handle authentication errors
                    if (data.message && data.message.includes("Not authenticated")) {
                        Swal.fire({
                            title: 'Authentication Error',
                            text: 'You are not logged in or your session has expired. Please log in again.',
                            icon: 'error',
                            confirmButtonText: 'Go to Login',
                            confirmButtonColor: '#6B4423',
                        }).then(() => {
                            window.location.href = '/';
                        });
                    } else {
                        // For other errors
                        maintenanceTableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="error-message">
                                    <div>
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <p>Failed to load service requests. ${data.message || 'Please try again later.'}</p>
                                    </div>
                                </td>
                            </tr>
                        `;
                    }
                }
            } catch (error) {
                console.error('Error fetching service requests:', error);
                
                // Hide loading state
                const loadingState = document.querySelector('.loading-state');
                loadingState.style.display = 'none';
                
                // Show error in the table
                maintenanceTableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="error-message">
                            <div>
                                <i class="fas fa-exclamation-triangle"></i>
                                <p>Error connecting to the server. Please check your connection and try again.</p>
                            </div>
                        </td>
                    </tr>
                `;
            }
        }
        
        // Tab Switching
        tabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Update active tab
                tabs.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                // Show corresponding section
                const tabType = this.dataset.tab;
                facilitySection.classList.remove('active');
                maintenanceSection.classList.remove('active');
                
                if (tabType === 'facility') {
                    facilitySection.classList.add('active');
                } else {
                    maintenanceSection.classList.add('active');
                }
            });
        });
        
        // Facility Reservations Functions
        function renderFacilityReservations(page = 1, searchTerm = '', filterValue = 'all') {
            console.log("Rendering facility reservations, page:", page, "search:", searchTerm, "filter:", filterValue);
            console.log("Total facility reservations:", facilityReservations.length);
            
            // Filter reservations based on search and filter
            let filteredReservations = facilityReservations.filter(res => {
                const matchesSearch = searchTerm === '' || 
                    res.id.toLowerCase().includes(searchTerm.toLowerCase()) || 
                    res.resident.toLowerCase().includes(searchTerm.toLowerCase()) || 
                    res.facility.toLowerCase().includes(searchTerm.toLowerCase());
                
                const matchesFilter = filterValue === 'all' || res.facility === filterValue;
                
                return matchesSearch && matchesFilter;
            });
            
            console.log("Filtered facility reservations:", filteredReservations.length);
            
            // Pagination logic
            const itemsPerPage = 5;
            const totalPages = Math.ceil(filteredReservations.length / itemsPerPage);
            const startIndex = (page - 1) * itemsPerPage;
            const paginatedReservations = filteredReservations.slice(startIndex, startIndex + itemsPerPage);
            
            console.log("Paginated facility reservations:", paginatedReservations.length);
            
            // Clear table
            facilityTableBody.innerHTML = '';
            
            // Check if we have any reservations
            if (paginatedReservations.length === 0) {
                facilityTableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center">
                            <div class="no-data-message">
                                <i class="fas fa-calendar-times"></i>
                                <p>No approved facility reservations found</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            // Populate table with approved reservations
            paginatedReservations.forEach(reservation => {
                try {
                    const row = document.createElement('tr');
                    row.dataset.id = reservation.id;
                    
                    row.innerHTML = `
                        <td>#${reservation.id}</td>
                        <td>${reservation.facility}</td>
                        <td>${reservation.resident}</td>
                        <td>${reservation.dateTime}</td>
                        <td><span class="status-badge status-approved">Approved</span></td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-icon view-details" title="View Details" data-action="view">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-icon" title="Book Facility" data-action="book">
                                    <i class="fas fa-calendar-check"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    
                    facilityTableBody.appendChild(row);
                    
                    // Add event listeners to action buttons
                    row.querySelectorAll('[data-action]').forEach(btn => {
                        btn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            const action = this.dataset.action;
                            const reservationId = this.closest('tr').dataset.id;
                            
                            if (action === 'view' || action === 'book') {
                                showFacilityDetails(reservationId);
                            }
                        });
                    });
                } catch (error) {
                    console.error("Error rendering reservation:", reservation, error);
                }
            });
            
            // Update pagination controls
            updatePaginationControls(
                page, 
                totalPages, 
                filteredReservations.length, 
                facilityPrevBtn, 
                facilityNextBtn, 
                facilityPageNumbers, 
                facilityPaginationInfo,
                'facility'
            );
            
            // Add click event to rows
            facilityTableBody.querySelectorAll('tr').forEach(row => {
                row.addEventListener('click', function() {
                    const reservationId = this.dataset.id;
                    showFacilityDetails(reservationId);
                });
            });
        }
        
        function showFacilityDetails(reservationId) {
            console.log("Showing details for facility reservation ID:", reservationId);
            console.log("Available facility reservations:", facilityReservations);
            
            const reservation = facilityReservations.find(r => r.id === reservationId);
            if (!reservation) {
                console.error("Facility reservation not found:", reservationId);
                Swal.fire({
                    title: 'Error',
                    text: 'Facility reservation not found',
                    icon: 'error'
                });
                return;
            }
            
            console.log("Found facility reservation:", reservation);
            currentFacilityReservation = reservation;
            
            try {
                // Update modal content with reservation details
                document.getElementById('facilityDetailsId').textContent = `Reservation #${reservation.id}`;
                document.getElementById('facilityDetailsStatus').innerHTML = `
                    <span class="status-badge status-approved">Approved</span>
                    <span class="status-badge status-paid">${reservation.payment_status}</span>`;
                document.getElementById('facilityDetailsFacility').textContent = reservation.facility;
                document.getElementById('facilityDetailsResident').textContent = reservation.resident;
                document.getElementById('facilityDetailsDate').textContent = reservation.date;
                document.getElementById('facilityDetailsTime').textContent = `${reservation.time} (${reservation.duration} hours)`;
                document.getElementById('facilityDetailsGuests').textContent = reservation.guests;
                document.getElementById('facilityDetailsPurpose').textContent = reservation.purpose;
                document.getElementById('facilityDetailsAmount').textContent = reservation.amount;
                document.getElementById('facilityStaffNotes').value = reservation.notes || '';
                
                // Set default notification message
                document.getElementById('facilityNotificationMessage').value = 
                    `Dear Resident,\n\nThis is to confirm that a staff member will accompany you for your reservation at the ${reservation.facility} on ${reservation.date} at ${reservation.time}.\n\nNumber of guests: ${reservation.guests}\nPurpose: ${reservation.purpose}\n\nThank you,\nStaff Team`;
                
                // Open modal
                openModal(facilityDetailsModal);
            } catch (error) {
                console.error("Error displaying facility details:", error);
                Swal.fire({
                    title: 'Error',
                    text: 'Error displaying facility reservation details',
                    icon: 'error'
                });
            }
        }
        
        // Service Maintenance Functions
        function renderMaintenanceRequests(page = 1, searchTerm = '', filterValue = 'all') {
            console.log("Rendering maintenance requests, page:", page, "search:", searchTerm, "filter:", filterValue);
            console.log("Total requests:", maintenanceRequests.length);
            
            // Filter requests based on search, filter, and status
            let filteredRequests = maintenanceRequests.filter(req => {
                // Make sure we have all the required fields for filtering
                if (!req || !req.user) return false;
                
                // Only show Approved requests (not In Progress or Completed)
                const validStatus = req.status === "Approved";
                
                const matchesSearch = searchTerm === '' || 
                    req.request_id.toString().includes(searchTerm) || 
                    `${req.user.firstname} ${req.user.lastname}`.toLowerCase().includes(searchTerm.toLowerCase()) || 
                    req.service_type.toLowerCase().includes(searchTerm.toLowerCase());
                
                const matchesFilter = filterValue === 'all' || req.service_type === filterValue;
                
                return validStatus && matchesSearch && matchesFilter;
            });
            
            console.log("Filtered requests:", filteredRequests.length);
            
            // Pagination logic
            const itemsPerPage = 5;
            const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);
            const startIndex = (page - 1) * itemsPerPage;
            const paginatedRequests = filteredRequests.slice(startIndex, startIndex + itemsPerPage);
            
            console.log("Paginated requests:", paginatedRequests.length);
            
            // Clear table
            maintenanceTableBody.innerHTML = '';
            
            if (paginatedRequests.length === 0) {
                maintenanceTableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="no-data">
                            <div class="no-data-message">
                                <i class="fas fa-calendar-times"></i>
                                <p>No paid service requests found</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            // Populate table
            paginatedRequests.forEach(request => {
                try {
                    const row = document.createElement('tr');
                    row.dataset.id = request.request_id;
                    
                    // Determine status display
                    let statusDisplay = capitalizeFirstLetter(request.status);
                    
                    // Format the date properly
                    let formattedDate = "N/A";
                    try {
                        formattedDate = new Date(request.scheduled_date).toLocaleDateString();
                    } catch (e) {
                        console.error("Error formatting date:", e);
                    }
                    
                    row.innerHTML = `
                        <td>#SR-${request.request_id}</td>
                        <td>
                            <div class="user-info">
                                <div class="user-avatar">${request.user.firstname.charAt(0)}${request.user.lastname.charAt(0)}</div>
                                <div class="user-details">
                                    <h4>${request.user.firstname} ${request.user.lastname}</h4>
                                    <p>${request.user.email}</p>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="service-info">
                                <div class="service-icon">${request.service_icon}</div>
                                <span>${request.service_type}</span>
                            </div>
                        </td>
                        <td>
                            <div class="date-time">
                                <div class="date">${formattedDate}</div>
                                <div class="time">${request.scheduled_time}</div>
                            </div>
                        </td>
                        <td><span class="status-badge status-approved">${statusDisplay}</span></td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-icon view-details" title="View Details" data-action="view">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-icon" title="Accept Booking" data-action="accept">
                                    <i class="fas fa-user-check"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    
                    maintenanceTableBody.appendChild(row);
                    
                    // Add event listeners to action buttons
                    row.querySelectorAll('[data-action]').forEach(btn => {
                        btn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            const action = this.dataset.action;
                            const requestId = parseInt(this.closest('tr').dataset.id);
                            
                            if (action === 'view') {
                                showMaintenanceDetails(requestId);
                            } else if (action === 'accept') {
                                showMaintenanceDetails(requestId);
                            }
                        });
                    });
                } catch (error) {
                    console.error("Error rendering request:", request, error);
                }
            });
            
            // Update pagination controls
            updatePaginationControls(
                page, 
                totalPages, 
                filteredRequests.length, 
                maintenancePrevBtn, 
                maintenanceNextBtn, 
                maintenancePageNumbers, 
                maintenancePaginationInfo,
                'maintenance'
            );
            
            // Add click event to rows
            maintenanceTableBody.querySelectorAll('tr').forEach(row => {
                row.addEventListener('click', function() {
                    const requestId = parseInt(this.dataset.id);
                    showMaintenanceDetails(requestId);
                });
            });
        }
        
        function showMaintenanceDetails(requestId) {
            console.log("Showing details for request ID:", requestId);
            console.log("Available requests:", maintenanceRequests);
            
            const request = maintenanceRequests.find(r => r.request_id === requestId);
            if (!request) {
                console.error("Request not found:", requestId);
                Swal.fire({
                    title: 'Error',
                    text: 'Service request not found',
                    icon: 'error'
                });
                return;
            }
            
            console.log("Found request:", request);
            currentMaintenanceRequest = request;
            
            try {
                // Format the date properly
                let formattedDate = "N/A";
                try {
                    formattedDate = new Date(request.scheduled_date).toLocaleDateString();
                } catch (e) {
                    console.error("Error formatting date:", e);
                }
                
                // Extract staff notes from the regular notes field
                let staffNotes = "";
                let notesForDisplay = request.notes || '';
                
                // Look for staff notes section in the regular notes
                const staffNotesMatch = notesForDisplay.match(/Staff Notes \(\d{4}-\d{2}-\d{2}\): (.*?)(\n\n|$)/s);
                if (staffNotesMatch) {
                    staffNotes = staffNotesMatch[1];
                    // Remove staff notes from the display notes
                    notesForDisplay = notesForDisplay.replace(/\n\nStaff Notes \(\d{4}-\d{2}-\d{2}\): .*?(\n\n|$)/s, '');
                }
                
                // Update modal content
                document.getElementById('maintenanceDetailsId').textContent = `Request #SR-${request.request_id}`;
                document.getElementById('maintenanceDetailsStatus').innerHTML = 
                    `<span class="status-badge status-approved">${capitalizeFirstLetter(request.status)}</span>`;
                document.getElementById('maintenanceDetailsService').textContent = request.service_type;
                document.getElementById('maintenanceDetailsResident').textContent = `${request.user.firstname} ${request.user.lastname}`;
                document.getElementById('maintenanceDetailsDate').textContent = formattedDate;
                document.getElementById('maintenanceDetailsTime').textContent = request.scheduled_time;
                document.getElementById('maintenanceDetailsPayment').innerHTML = 
                    `<span class="status-badge status-paid">${request.payment_status}</span>`;
                document.getElementById('maintenanceDetailsInstructions').textContent = notesForDisplay || 'No special instructions provided.';
                document.getElementById('maintenanceStaffNotes').value = staffNotes;
                document.getElementById('maintenanceNotificationMessage').value = 
                    `Dear Homeowner,

This is to confirm that your ${request.service_type} service scheduled for ${formattedDate} at ${request.scheduled_time} has been accepted by ${CurrentUser.firstname} ${CurrentUser.lastname}.

Your service is now being processed and will be completed as scheduled. Please contact us if you have any questions.

Thank you for using our services.

${CurrentUser.firstname} ${CurrentUser.lastname}
Staff Member`;
                
                // Open modal
                openModal(maintenanceDetailsModal);
            } catch (error) {
                console.error("Error showing maintenance details:", error);
                Swal.fire({
                    title: 'Error',
                    text: 'Error displaying service request details',
                    icon: 'error'
                });
            }
        }
        
        // Common Functions
        function updatePaginationControls(
            currentPage, 
            totalPages, 
            totalItems, 
            prevBtn, 
            nextBtn, 
            pageNumbersContainer, 
            paginationInfo,
            type
        ) {
            // Update pagination info
            const startItem = (currentPage - 1) * 5 + 1;
            const endItem = Math.min(startItem + 4, totalItems);
            paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${totalItems} ${type === 'facility' ? 'reservations' : 'requests'}`;
            
            // Update previous/next buttons
            prevBtn.disabled = currentPage === 1;
            nextBtn.disabled = currentPage === totalPages;
            
            // Update page numbers
            pageNumbersContainer.innerHTML = '';
            
            // Always show first page
            if (currentPage > 2) {
                addPageNumber(1, type);
                if (currentPage > 3) {
                    pageNumbersContainer.innerHTML += '<span class="page-ellipsis">...</span>';
                }
            }
            
            // Show current page and adjacent pages
            for (let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) {
                addPageNumber(i, type);
            }
            
            // Always show last page
            if (currentPage < totalPages - 1) {
                if (currentPage < totalPages - 2) {
                    pageNumbersContainer.innerHTML += '<span class="page-ellipsis">...</span>';
                }
                addPageNumber(totalPages, type);
            }
            
            function addPageNumber(pageNumber, type) {
                const pageBtn = document.createElement('button');
                pageBtn.className = `page-number ${pageNumber === currentPage ? 'active' : ''}`;
                pageBtn.textContent = pageNumber;
                pageBtn.addEventListener('click', () => {
                    if (type === 'facility') {
                        renderFacilityReservations(
                            pageNumber, 
                            facilitySearch.value, 
                            facilityFilter.value
                        );
                    } else {
                        renderMaintenanceRequests(
                            pageNumber, 
                            maintenanceSearch.value, 
                            maintenanceFilter.value
                        );
                    }
                });
                pageNumbersContainer.appendChild(pageBtn);
            }
        }
        
        function capitalizeFirstLetter(string) {
            if (!string) return '';
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        // Set up event listeners for facility tab
        facilitySearch?.addEventListener('input', function() {
            renderFacilityReservations(1, this.value, facilityFilter.value);
        });
        
        facilityFilter?.addEventListener('change', function() {
            renderFacilityReservations(1, facilitySearch.value, this.value);
        });
        
        facilityPrevBtn?.addEventListener('click', function() {
            if (!this.disabled) {
                const currentPage = parseInt(facilityPageNumbers.querySelector('.active')?.textContent || '1');
                renderFacilityReservations(
                    currentPage - 1, 
                    facilitySearch.value, 
                    facilityFilter.value
                );
            }
        });
        
        facilityNextBtn?.addEventListener('click', function() {
            if (!this.disabled) {
                const currentPage = parseInt(facilityPageNumbers.querySelector('.active')?.textContent || '1');
                renderFacilityReservations(
                    currentPage + 1, 
                    facilitySearch.value, 
                    facilityFilter.value
                );
            }
        });
        
        // Event listener for the confirm booking button
        document.getElementById('confirmFacilityBookingBtn')?.addEventListener('click', function() {
            confirmFacilityBooking();
        });
        
        // Function to handle facility booking confirmation
        async function confirmFacilityBooking() {
            if (!currentFacilityReservation) {
                Swal.fire({
                    title: 'Error',
                    text: 'No reservation selected',
                    icon: 'error'
                });
                return;
            }
            
            // Get form values
            const staffNotes = document.getElementById('facilityStaffNotes').value;
            const notificationMessage = document.getElementById('facilityNotificationMessage').value;
            
            // Validate required fields
            if (!notificationMessage.trim()) {
                Swal.fire({
                    title: 'Error',
                    text: 'Please enter a notification message for the resident',
                    icon: 'error'
                });
                return;
            }
            
            try {
                // Show loading state
                const confirmBtn = document.getElementById('confirmFacilityBookingBtn');
                confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                confirmBtn.disabled = true;
                
                // Send API request
                const response = await fetch('/Staff/BookFacilityReservation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        reservationId: parseInt(currentFacilityReservation.id),
                        staffNotes: staffNotes,
                        notificationMessage: notificationMessage
                    })
                });
                
                const data = await response.json();
                console.log('Booking response:', data);
                
                if (data.success) {
                    // Show success message
                    Swal.fire({
                        title: 'Booking Confirmed!',
                        html: `The facility booking has been confirmed successfully.<br><br>
                              <strong>Facility:</strong> ${currentFacilityReservation.facility}<br>
                              <strong>Date & Time:</strong> ${currentFacilityReservation.dateTime}`,
                        icon: 'success',
                        confirmButtonColor: '#6B4423',
                    });
                    
                    // Close modal and refresh reservations
                    closeModal(facilityDetailsModal);
                    fetchApprovedFacilityReservations();
                } else {
                    // Show error message
                    Swal.fire({
                        title: 'Error',
                        text: data.message || 'Failed to confirm booking',
                        icon: 'error'
                    });
                }
            } catch (error) {
                console.error('Error confirming booking:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while confirming the booking',
                    icon: 'error'
                });
            } finally {
                // Reset button state
                const confirmBtn = document.getElementById('confirmFacilityBookingBtn');
                confirmBtn.innerHTML = '<i class="fas fa-check-circle"></i> Confirm Booking';
                confirmBtn.disabled = false;
            }
        }
        
        // Proper modal handling functions
        function openModal(modal) {
            if (modal) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
        }
        
        function closeModal(modal) {
            if (modal) {
                modal.classList.remove('active');
                document.body.style.overflow = 'auto';
            }
        }
        
        // Close all modals when clicking close buttons
        closeModalButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                const modal = this.closest('.modal-overlay') || this.closest('.modal');
                closeModal(modal);
            });
        });
        
        // Close modal when clicking outside
        document.querySelectorAll('.modal-overlay, .modal').forEach(modal => {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal(this);
                }
            });
        });
    });
</script>

@section Scripts {
    <!-- SweetAlert for nicer alerts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- Load Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Staff services JS -->
    <script src="~/js/staff/staff-services.js"></script>
    
    <!-- Facility reservations JS -->
    <script src="~/js/staff/facility-reservations.js"></script>
    
    <script>
        // This script runs after all other scripts
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Initialization script loaded");
            
            // Force tab switching to ensure both tabs are initialized
            setTimeout(() => {
                // Check if elements exist
                const tabs = document.querySelectorAll('.services-tabs .tab');
                if (tabs.length > 0) {
                    console.log("Initializing both tabs");
                    
                    // Get facility tab (first tab)
                    const facilityTab = tabs[0];
                    if (facilityTab) {
                        // Click facility tab to ensure it's activated
                        facilityTab.click();
                        console.log("Facility tab clicked");
                    }
                    
                    // Force facility fetch if not loaded yet
                    try {
                        if (window.FacilityReservationsManager && 
                            typeof window.FacilityReservationsManager.refreshReservations === 'function') {
                            console.log("Explicitly calling FacilityReservationsManager.refreshReservations");
                            window.FacilityReservationsManager.refreshReservations();
                        }
                    } catch (e) {
                        console.error("Error calling refreshReservations:", e);
                    }
                }
            }, 300); // Small delay to ensure DOM is fully loaded
        });
    </script>
}