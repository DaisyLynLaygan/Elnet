@{
    Layout = "~/Views/Shared/StaffLayout.cshtml";
    ViewData["Title"] = "Community Events";
}

<link rel="stylesheet" href="~/css/homeowners/events.css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="homeowner-events-container">
    

    <div class="events-content">
        <!-- Calendar Section -->
        <div class="calendar-section">
            <div class="calendar-header">
                <button class="calendar-nav" id="prevMonth" aria-label="Previous month">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <h2 id="currentMonthYear">March 2023</h2>
                <button class="calendar-nav" id="nextMonth" aria-label="Next month">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            
            <!-- Quick Month Selector -->
            <div class="month-selector">
                <select id="monthSelect" aria-label="Select month">
                    <option value="0">January</option>
                    <option value="1">February</option>
                    <option value="2" selected>March</option>
                    <option value="3">April</option>
                    <option value="4">May</option>
                    <option value="5">June</option>
                    <option value="6">July</option>
                    <option value="7">August</option>
                    <option value="8">September</option>
                    <option value="9">October</option>
                    <option value="10">November</option>
                    <option value="11">December</option>
                </select>
                <select id="yearSelect" aria-label="Select year">
                    <option value="2022">2022</option>
                    <option value="2023" selected>2023</option>
                    <option value="2024">2024</option>
                </select>
            </div>
            
            <div class="calendar-grid" id="calendarGrid">
                <!-- Calendar will be generated by JavaScript -->
            </div>
        </div>
        
        <!-- Upcoming Events List -->
        <div class="upcoming-events">
            <h3><i class="fas fa-list-ul"></i> Upcoming Events</h3>
            <div class="events-list" id="eventsList">
                <!-- Events will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal" id="eventDetailsModal">
    <div class="modal-content">
        <span class="close-modal" aria-label="Close modal">&times;</span>
        <div class="event-details-content" id="eventDetailsContent">
            <!-- Event details will be loaded here -->
        </div>
    </div>
</div>

<!-- RSVP Confirmation Toast -->
<div class="toast" id="rsvpToast">
    <div class="toast-content">
        <i class="fas fa-check-circle toast-icon"></i>
        <span id="toastMessage">RSVP confirmed!</span>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const calendarGrid = document.getElementById('calendarGrid');
        const currentMonthYear = document.getElementById('currentMonthYear');
        const prevMonthBtn = document.getElementById('prevMonth');
        const nextMonthBtn = document.getElementById('nextMonth');
        const monthSelect = document.getElementById('monthSelect');
        const yearSelect = document.getElementById('yearSelect');
        const eventDetailsModal = document.getElementById('eventDetailsModal');
        const eventDetailsContent = document.getElementById('eventDetailsContent');
        const eventsList = document.getElementById('eventsList');
        const rsvpToast = document.getElementById('rsvpToast');
        const toastMessage = document.getElementById('toastMessage');
        
        // State
        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();
        
        // Sample events data - in a real app, this would come from your API
        const events = [
            {
                id: 1,
                title: "Community Spring Festival",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 2),
                startTime: "10:00",
                endTime: "16:00",
                location: "Central Park, Main Pavilion",
                description: "Join us for our annual spring celebration! Enjoy live music, food trucks, games for all ages, and local artisan vendors. Don't miss the flower arranging workshop at 2pm.",
                organizer: "Community Events Committee",
                contact: "events@ourcommunity.org",
                capacity: 200,
                rsvpCount: 143,
                tags: ["public", "family", "festival"],
                featured: true,
                image: "https://images.unsplash.com/photo-1527529482837-4698179dc6ce?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"
            },
            {
                id: 2,
                title: "Tech Conference 2023",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 5),
                startTime: "09:00",
                endTime: "18:00",
                location: "Convention Center, Room 304",
                description: "A full-day conference featuring the latest in technology trends. Keynote speakers include industry leaders discussing AI, blockchain, and the future of work. Lunch and refreshments provided.",
                organizer: "Tech Community Group",
                contact: "tech@community.org",
                capacity: 150,
                rsvpCount: 112,
                tags: ["professional", "tech", "workshop"],
                featured: true,
                image: "https://images.unsplash.com/photo-1497366811353-6870744d04b2?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"
            },
            {
                id: 3,
                title: "Yoga in the Park",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 7),
                startTime: "07:00",
                endTime: "08:30",
                location: "Riverside Park, South Lawn",
                description: "Start your day with a refreshing outdoor yoga session suitable for all levels. Bring your own mat and water bottle. In case of rain, check our website for updates.",
                organizer: "Wellness Collective",
                contact: "wellness@community.org",
                capacity: 50,
                rsvpCount: 32,
                tags: ["wellness", "outdoor", "fitness"],
                featured: false,
                image: "https://images.unsplash.com/photo-1545205597-3d9d02c29597?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"
            },
            {
                id: 4,
                title: "Book Club Meeting",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 10),
                startTime: "19:00",
                endTime: "21:00",
                location: "Community Library, Meeting Room B",
                description: "This month we're discussing 'The Midnight Library' by Matt Haig. New members always welcome! Light refreshments will be served.",
                organizer: "Community Book Club",
                contact: "bookclub@community.org",
                capacity: 25,
                rsvpCount: 18,
                tags: ["culture", "books"],
                featured: false,
                image: "https://images.unsplash.com/photo-1544947950-fa07a98d237f?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"
            },
            {
                id: 5,
                title: "Neighborhood Cleanup",
                date: new Date(currentYear, currentMonth, currentDate.getDate() + 12),
                startTime: "08:30",
                endTime: "12:00",
                location: "Meet at Community Center",
                description: "Help keep our neighborhood beautiful! We'll provide gloves and trash bags. Great for families and groups. Volunteers will receive a free lunch after the cleanup.",
                organizer: "Green Neighborhood Initiative",
                contact: "green@community.org",
                capacity: 100,
                rsvpCount: 45,
                tags: ["volunteer", "outdoor", "family"],
                featured: true,
                image: "https://images.unsplash.com/photo-1606787366850-de6330128bfc?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"
            }
        ];
        
        // Initialize calendar and events
        function initCalendar() {
            renderCalendar();
            renderUpcomingEvents();
            updateMonthYearSelectors();
        }
        
        // Render the calendar grid
        function renderCalendar() {
            calendarGrid.innerHTML = '';
            
            // Set month and year title
            const monthNames = ["January", "February", "March", "April", "May", "June", 
                               "July", "August", "September", "October", "November", "December"];
            currentMonthYear.textContent = `${monthNames[currentMonth]} ${currentYear}`;
            
            // Get first day of month and total days in month
            const firstDay = new Date(currentYear, currentMonth, 1).getDay();
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            
            // Create day headers
            const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            dayNames.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.className = 'calendar-day-header';
                dayHeader.textContent = day;
                dayHeader.setAttribute('aria-label', day);
                calendarGrid.appendChild(dayHeader);
            });
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDay; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                emptyDay.setAttribute('aria-hidden', 'true');
                calendarGrid.appendChild(emptyDay);
            }
            
            // Today's date for comparison
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            // Add cells for each day of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayCell = document.createElement('div');
                const cellDate = new Date(currentYear, currentMonth, day);
                const dateString = cellDate.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
                
                dayCell.className = 'calendar-day';
                dayCell.setAttribute('aria-label', dateString);
                
                // Check if this date is in the past
                if (cellDate < today) {
                    dayCell.classList.add('past');
                } 
                // Check if this is today
                else if (cellDate.getTime() === today.getTime()) {
                    dayCell.classList.add('today');
                }
                // Future date
                else {
                    dayCell.classList.add('future');
                }
                
                // Check if this date has events
                const dateEvents = events.filter(event => 
                    event.date.getDate() === day && 
                    event.date.getMonth() === currentMonth && 
                    event.date.getFullYear() === currentYear
                );
                
                // Add day number
                const dayNumber = document.createElement('div');
                dayNumber.className = 'calendar-day-number';
                dayNumber.textContent = day;
                dayCell.appendChild(dayNumber);
                
                // Add event indicator if there are events
                if (dateEvents.length > 0) {
                    const eventIndicator = document.createElement('div');
                    eventIndicator.className = 'calendar-event-indicator';
                    
                    // Show event count instead of dots for better accessibility
                    const eventCount = document.createElement('span');
                    eventCount.className = 'event-count';
                    eventCount.textContent = dateEvents.length;
                    eventCount.setAttribute('aria-label', `${dateEvents.length} events`);
                    eventIndicator.appendChild(eventCount);
                    
                    dayCell.appendChild(eventIndicator);
                    dayCell.classList.add('has-events');
                }
                
                // Add click event to show events for this day
                dayCell.addEventListener('click', function() {
                    // Only allow interaction with future and current dates
                    if (!dayCell.classList.contains('past')) {
                        showEventsForDate(day, currentMonth, currentYear);
                    }
                });
                
                // Keyboard accessibility
                dayCell.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        if (!dayCell.classList.contains('past')) {
                            showEventsForDate(day, currentMonth, currentYear);
                        }
                    }
                });
                
                dayCell.tabIndex = 0; // Make days focusable
                calendarGrid.appendChild(dayCell);
            }
        }
        
        // Render upcoming events list
        function renderUpcomingEvents() {
            eventsList.innerHTML = '';
            
            // Sort events by date
            const sortedEvents = [...events].sort((a, b) => a.date - b.date);
            
            // Filter for upcoming events only
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const upcomingEvents = sortedEvents.filter(event => event.date >= today);
            
            if (upcomingEvents.length === 0) {
                eventsList.innerHTML = `
                    <div class="empty-state">
                        <i class="far fa-calendar-plus"></i>
                        <p>No upcoming events scheduled</p>
                        <p class="small">Check back later or contact your community manager</p>
                    </div>
                `;
                return;
            }
            
            // Show next 5 events or all if less than 5
            const eventsToShow = upcomingEvents.slice(0, 5);
            
            eventsToShow.forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = 'event-list-item';
                if (event.featured) {
                    eventElement.classList.add('featured');
                }
                
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                                  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                const eventMonth = monthNames[event.date.getMonth()];
                const eventDay = event.date.getDate();
                
                // Format date status (Today, Tomorrow, or date)
                let dateStatus = `${eventMonth} ${eventDay}`;
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                if (event.date.getTime() === today.getTime()) {
                    dateStatus = "Today";
                } else if (event.date.getTime() === today.getTime() + 86400000) {
                    dateStatus = "Tomorrow";
                }
                
                eventElement.innerHTML = `
                    <div class="event-list-date">
                        <span class="event-month">${eventMonth}</span>
                        <span class="event-day">${eventDay}</span>
                    </div>
                    <div class="event-list-details">
                        <h4>${event.title}</h4>
                        <div class="event-meta">
                            <span class="event-time"><i class="far fa-clock"></i> ${formatTime(event.startTime)}</span>
                            <span class="event-location"><i class="fas fa-map-marker-alt"></i> ${event.location.split(',')[0]}</span>
                        </div>
                        ${event.featured ? '<span class="featured-badge">Featured</span>' : ''}
                    </div>
                    <button class="event-more-btn" aria-label="View details for ${event.title}" data-event-id="${event.id}">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                `;
                
                eventsList.appendChild(eventElement);
            });
            
            // Add "View All" button if there are more than 5 events
            if (upcomingEvents.length > 5) {
                const viewAllBtn = document.createElement('button');
                viewAllBtn.className = 'view-all-btn';
                viewAllBtn.textContent = `View All (${upcomingEvents.length})`;
                viewAllBtn.addEventListener('click', function() {
                    // In a real app, this would show all events
                    currentMonth = upcomingEvents[5].date.getMonth();
                    currentYear = upcomingEvents[5].date.getFullYear();
                    renderCalendar();
                    updateMonthYearSelectors();
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
                eventsList.appendChild(viewAllBtn);
            }
            
            // Add event listeners to "more" buttons
            document.querySelectorAll('.event-more-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const eventId = parseInt(this.getAttribute('data-event-id'));
                    const event = events.find(e => e.id === eventId);
                    if (event) {
                        showEventDetails(event);
                    }
                });
            });
        }
        
        // Show event details in modal
        function showEventDetails(event) {
            const monthNames = ["January", "February", "March", "April", "May", "June", 
                              "July", "August", "September", "October", "November", "December"];
            const eventMonth = monthNames[event.date.getMonth()];
            
            // Format date status (Today, Tomorrow, or date)
            let dateStatus = `${eventMonth} ${event.date.getDate()}, ${event.date.getFullYear()}`;
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (event.date.getTime() === today.getTime()) {
                dateStatus = "Today";
            } else if (event.date.getTime() === today.getTime() + 86400000) {
                dateStatus = "Tomorrow";
            }
            
            // Calculate spots remaining
            const spotsRemaining = event.capacity - event.rsvpCount;
            const spotsText = spotsRemaining > 0 ? 
                `${spotsRemaining} spot${spotsRemaining === 1 ? '' : 's'} remaining` : 
                'Event full';
            
            eventDetailsContent.innerHTML = `
                <div class="event-header">
                    ${event.image ? `<div class="event-image" style="background-image: url('${event.image}')"></div>` : ''}
                    <div class="event-title-container">
                        <h2>${event.title}</h2>
                        <div class="event-meta">
                            <span class="event-date"><i class="far fa-calendar"></i> ${dateStatus}</span>
                            <span class="event-time"><i class="far fa-clock"></i> ${formatTime(event.startTime)} - ${formatTime(event.endTime)}</span>
                        </div>
                    </div>
                </div>
                
                <div class="event-body">
                    <div class="event-details">
                        <div class="detail-row">
                            <i class="fas fa-map-marker-alt"></i>
                            <div>
                                <h4>Location</h4>
                                <p>${event.location}</p>
                            </div>
                        </div>
                        
                        <div class="detail-row">
                            <i class="fas fa-info-circle"></i>
                            <div>
                                <h4>Description</h4>
                                <p>${event.description}</p>
                            </div>
                        </div>
                        
                        <div class="detail-row">
                            <i class="fas fa-user-friends"></i>
                            <div>
                                <h4>Organizer</h4>
                                <p>${event.organizer}</p>
                                ${event.contact ? `<p class="contact"><i class="fas fa-envelope"></i> ${event.contact}</p>` : ''}
                            </div>
                        </div>
                        
                        <div class="event-tags">
                            ${event.tags.map(tag => `<span class="tag ${tag}">${capitalizeFirstLetter(tag)}</span>`).join('')}
                        </div>
                    </div>
                    
                    <div class="event-actions">
                        <div class="attendance-info">
                            <div class="progress-container">
                                <div class="progress-bar" style="width: ${(event.rsvpCount / event.capacity) * 100}%"></div>
                            </div>
                            <span class="spots-remaining ${spotsRemaining === 0 ? 'full' : ''}">
                                ${spotsText}
                            </span>
                        </div>
                        
                        <button class="btn rsvp-btn ${spotsRemaining === 0 ? 'disabled' : ''}" 
                                ${spotsRemaining === 0 ? 'disabled' : ''}>
                            <i class="fas fa-calendar-check"></i> RSVP Now
                        </button>
                        
                        <button class="btn share-btn">
                            <i class="fas fa-share-alt"></i> Share Event
                        </button>
                    </div>
                </div>
            `;
            
            // Add event listener to RSVP button
            if (spotsRemaining > 0) {
                document.querySelector('.rsvp-btn').addEventListener('click', function() {
                    // In a real app, this would make an API call
                    showToast('RSVP confirmed! We look forward to seeing you.');
                    this.disabled = true;
                    this.textContent = 'You\'re Going!';
                    this.classList.add('confirmed');
                });
            }
            
            // Add event listener to share button
            document.querySelector('.share-btn').addEventListener('click', function() {
                if (navigator.share) {
                    navigator.share({
                        title: event.title,
                        text: `Join me at ${event.title} on ${dateStatus} at ${event.location}`,
                        url: window.location.href
                    }).catch(err => {
                        showToast('Sharing failed: ' + err);
                    });
                } else {
                    // Fallback for browsers that don't support Web Share API
                    const shareUrl = `mailto:?subject=${encodeURIComponent(event.title)}&body=${encodeURIComponent(
                        `Join me at ${event.title}\n\n` +
                        `Date: ${dateStatus}\n` +
                        `Time: ${formatTime(event.startTime)} - ${formatTime(event.endTime)}\n` +
                        `Location: ${event.location}\n\n` +
                        `${event.description}`
                    )}`;
                    window.location.href = shareUrl;
                }
            });
            
            eventDetailsModal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
        
        // Show events for a specific date in modal
        function showEventsForDate(day, month, year) {
            const filteredEvents = events.filter(event => 
                event.date.getDate() === day && 
                event.date.getMonth() === month && 
                event.date.getFullYear() === year
            );
            
            if (filteredEvents.length === 0) {
                eventDetailsContent.innerHTML = `
                    <div class="no-events-message">
                        <i class="far fa-calendar-times"></i>
                        <h3>No events scheduled</h3>
                        <p>There are no events scheduled for this day.</p>
                        <button class="btn suggest-event-btn">
                            <i class="fas fa-lightbulb"></i> Suggest an Event
                        </button>
                    </div>
                `;
                
                document.querySelector('.suggest-event-btn').addEventListener('click', function() {
                    // In a real app, this would open a form
                    showToast('Event suggestion feature coming soon!');
                });
            } else if (filteredEvents.length === 1) {
                // If only one event, show its details directly
                showEventDetails(filteredEvents[0]);
            } else {
                // Show list of events for this date
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                                   "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                const eventMonth = monthNames[month];
                
                eventDetailsContent.innerHTML = `
                    <div class="date-events-header">
                        <h3>${eventMonth} ${day}, ${year}</h3>
                        <p>${filteredEvents.length} event${filteredEvents.length === 1 ? '' : 's'}</p>
                    </div>
                    <div class="date-events-list">
                        ${filteredEvents.map(event => `
                            <div class="date-event-item ${event.featured ? 'featured' : ''}">
                                <div class="event-time-badge">
                                    ${formatTime(event.startTime)}
                                </div>
                                <div class="event-info">
                                    <h4>${event.title}</h4>
                                    <p class="event-location"><i class="fas fa-map-marker-alt"></i> ${event.location.split(',')[0]}</p>
                                </div>
                                <button class="view-event-btn" data-event-id="${event.id}" aria-label="View details for ${event.title}">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        `).join('')}
                    </div>
                `;
                
                // Add event listeners to view buttons
                document.querySelectorAll('.view-event-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const eventId = parseInt(this.getAttribute('data-event-id'));
                        const event = events.find(e => e.id === eventId);
                        if (event) {
                            showEventDetails(event);
                        }
                    });
                });
            }
            
            eventDetailsModal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
        
        // Show toast notification
        function showToast(message) {
            toastMessage.textContent = message;
            rsvpToast.classList.add('show');
            
            setTimeout(() => {
                rsvpToast.classList.remove('show');
            }, 3000);
        }
        
        // Format time from 24h to 12h
        function formatTime(timeString) {
            const [hours, minutes] = timeString.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const hour12 = hour % 12 || 12;
            return `${hour12}:${minutes} ${ampm}`;
        }
        
        // Capitalize first letter
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        // Update month/year selectors to match current view
        function updateMonthYearSelectors() {
            monthSelect.value = currentMonth;
            yearSelect.value = currentYear;
        }
        
        // Month navigation
        prevMonthBtn.addEventListener('click', function() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            renderCalendar();
            updateMonthYearSelectors();
        });
        
        nextMonthBtn.addEventListener('click', function() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            renderCalendar();
            updateMonthYearSelectors();
        });
        
        // Month/year selector changes
        monthSelect.addEventListener('change', function() {
            currentMonth = parseInt(this.value);
            renderCalendar();
        });
        
        yearSelect.addEventListener('change', function() {
            currentYear = parseInt(this.value);
            renderCalendar();
        });
        
        // Modal close functionality
        const closeModal = document.querySelector('.close-modal');
        
        closeModal.addEventListener('click', function() {
            eventDetailsModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });
        
        window.addEventListener('click', function(event) {
            if (event.target === eventDetailsModal) {
                eventDetailsModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && eventDetailsModal.style.display === 'flex') {
                eventDetailsModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });
        
        // Initialize
        initCalendar();
    });
</script>
