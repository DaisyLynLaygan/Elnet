@{
    Layout = "~/Views/Shared/StaffLayout.cshtml";
    ViewData["Title"] = "Community Events";
}

<link rel="stylesheet" href="~/css/homeowners/events.css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<style>
    /* Styles for ongoing badge */
    .ongoing-badge {
        background-color: #e67e22;
        color: white;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.7rem;
        font-weight: 600;
        margin-right: 5px;
        display: inline-block;
    }
    
    .event-status-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 4px;
    }
    
    .rsvp-badge-small {
        background-color: #27ae60;
        color: white;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.7rem;
        font-weight: 600;
        display: inline-block;
    }
</style>

<div class="homeowner-events-container">
    

    <div class="events-content">
        <!-- Calendar Section -->
        <div class="calendar-section">
            <div class="calendar-header">
                <button class="calendar-nav" id="prevMonth" aria-label="Previous month">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <h2 id="currentMonthYear">March 2023</h2>
                <button class="calendar-nav" id="nextMonth" aria-label="Next month">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            
            <!-- Quick Month Selector -->
            <div class="month-selector">
                <select id="monthSelect" aria-label="Select month">
                    <option value="0">January</option>
                    <option value="1">February</option>
                    <option value="2" selected>March</option>
                    <option value="3">April</option>
                    <option value="4">May</option>
                    <option value="5">June</option>
                    <option value="6">July</option>
                    <option value="7">August</option>
                    <option value="8">September</option>
                    <option value="9">October</option>
                    <option value="10">November</option>
                    <option value="11">December</option>
                </select>
                <select id="yearSelect" aria-label="Select year">
                    <option value="2022">2022</option>
                    <option value="2023" selected>2023</option>
                    <option value="2024">2024</option>
                </select>
            </div>
            
            <div class="calendar-grid" id="calendarGrid">
                <!-- Calendar will be generated by JavaScript -->
            </div>
        </div>
        
        <!-- Upcoming Events List -->
        <div class="upcoming-events">
            <h3><i class="fas fa-list-ul"></i> Upcoming Events</h3>
            <div class="events-list" id="eventsList">
                <!-- Events will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal" id="eventDetailsModal">
    <div class="modal-content">
        <span class="close-modal" aria-label="Close modal">&times;</span>
        <div class="event-details-content" id="eventDetailsContent">
            <!-- Event details will be loaded here -->
        </div>
    </div>
</div>

<!-- RSVP Confirmation Toast -->
<div class="toast" id="rsvpToast">
    <div class="toast-content">
        <i class="fas fa-check-circle toast-icon"></i>
        <span id="toastMessage">RSVP confirmed!</span>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const calendarGrid = document.getElementById('calendarGrid');
        const currentMonthYear = document.getElementById('currentMonthYear');
        const prevMonthBtn = document.getElementById('prevMonth');
        const nextMonthBtn = document.getElementById('nextMonth');
        const monthSelect = document.getElementById('monthSelect');
        const yearSelect = document.getElementById('yearSelect');
        const eventDetailsModal = document.getElementById('eventDetailsModal');
        const eventDetailsContent = document.getElementById('eventDetailsContent');
        const eventsList = document.getElementById('eventsList');
        const rsvpToast = document.getElementById('rsvpToast');
        const toastMessage = document.getElementById('toastMessage');
        
        // State
        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();
        let events = [];
        
        // Fetch events from server
        function fetchEvents(filter = 'upcoming') {
            // Show loading state
            eventsList.innerHTML = '<div class="loading"><i class="fas fa-circle-notch fa-spin"></i> Loading events...</div>';
            
            fetch(`/Staff/GetEvents?filter=${filter}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        events = data.events.map(event => ({
                            ...event,
                            date: new Date(event.date)
                        }));
                        initCalendar();
                        renderUpcomingEvents();
                    } else {
                        eventsList.innerHTML = `
                            <div class="empty-state error">
                                <i class="fas fa-exclamation-circle"></i>
                                <p>Error loading events</p>
                                <p class="small">${data.message || 'Please try again later'}</p>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error fetching events:', error);
                    eventsList.innerHTML = `
                        <div class="empty-state error">
                            <i class="fas fa-exclamation-circle"></i>
                            <p>Error loading events</p>
                            <p class="small">Please try again later</p>
                        </div>
                    `;
                });
        }
        
        // Handle RSVP globally
        window.handleRsvp = function(eventId, isAttending) {
            // Disable button to prevent multiple clicks
            const rsvpBtn = document.querySelector('.rsvp-btn');
            if (rsvpBtn) {
                rsvpBtn.disabled = true;
                rsvpBtn.innerHTML = `<i class="fas fa-circle-notch fa-spin"></i> Processing...`;
            }
            
            // Send RSVP request to server
            fetch('/Staff/RsvpForEvent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    eventId: eventId,
                    isAttending: isAttending
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update UI
                    showToast(data.message);
                    
                    // Get the event details
                    fetch(`/Staff/GetEventDetails?id=${eventId}`)
                        .then(response => response.json())
                        .then(detailsData => {
                            if (detailsData.success) {
                                // Update the event in our local array
                                const eventIndex = events.findIndex(e => e.id === eventId);
                                if (eventIndex !== -1) {
                                    events[eventIndex].rsvpCount = data.rsvpCount;
                                    events[eventIndex].hasRsvp = isAttending;
                                }
                                
                                // Close the modal
                                eventDetailsModal.style.display = 'none';
                                document.body.style.overflow = 'auto';
                                
                                // Refresh the calendar and event list
                                renderCalendar();
                                renderUpcomingEvents();
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching updated event details:', error);
                        });
                } else {
                    // Show error message
                    showToast(data.message || 'Error processing RSVP');
                    
                    // Re-enable button
                    if (rsvpBtn) {
                        rsvpBtn.disabled = false;
                        rsvpBtn.innerHTML = isAttending ? 
                            `<i class="fas fa-calendar-check"></i> RSVP Now` : 
                            `<i class="fas fa-calendar-times"></i> Cancel RSVP`;
                    }
                }
            })
            .catch(error => {
                console.error('Error submitting RSVP:', error);
                showToast('Error submitting RSVP. Please try again.');
                
                // Re-enable button
                if (rsvpBtn) {
                    rsvpBtn.disabled = false;
                    rsvpBtn.innerHTML = isAttending ? 
                        `<i class="fas fa-calendar-check"></i> RSVP Now` : 
                        `<i class="fas fa-calendar-times"></i> Cancel RSVP`;
                }
            });
        }
        
        // Share event function
        window.shareEvent = function(eventId, title, date, location) {
            const shareText = `Join me at ${title} on ${date} at ${location}`;
            const shareUrl = window.location.origin + window.location.pathname + '?event=' + eventId;
            
            if (navigator.share) {
                navigator.share({
                    title: title,
                    text: shareText,
                    url: shareUrl
                }).catch(err => {
                    console.error('Error sharing:', err);
                });
            } else {
                // Fallback for browsers that don't support Web Share API
                const emailBody = encodeURIComponent(`${shareText}\n\n${shareUrl}`);
                window.location.href = `mailto:?subject=${encodeURIComponent(title)}&body=${emailBody}`;
            }
        }
        
        // Initialize calendar and events
        function initCalendar() {
            renderCalendar();
            updateMonthYearSelectors();
        }
        
        // Render the calendar grid
        function renderCalendar() {
            calendarGrid.innerHTML = '';
            
            // Set month and year title
            const monthNames = ["January", "February", "March", "April", "May", "June", 
                               "July", "August", "September", "October", "November", "December"];
            currentMonthYear.textContent = `${monthNames[currentMonth]} ${currentYear}`;
            
            // Get first day of month and total days in month
            const firstDay = new Date(currentYear, currentMonth, 1).getDay();
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            
            // Create day headers
            const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            dayNames.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.className = 'calendar-day-header';
                dayHeader.textContent = day;
                dayHeader.setAttribute('aria-label', day);
                calendarGrid.appendChild(dayHeader);
            });
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDay; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                emptyDay.setAttribute('aria-hidden', 'true');
                calendarGrid.appendChild(emptyDay);
            }
            
            // Today's date for comparison
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            // Add cells for each day of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayCell = document.createElement('div');
                const cellDate = new Date(currentYear, currentMonth, day);
                const dateString = cellDate.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
                
                dayCell.className = 'calendar-day';
                dayCell.setAttribute('aria-label', dateString);
                
                // Check if this date is in the past
                if (cellDate < today) {
                    dayCell.classList.add('past');
                } 
                // Check if this is today
                else if (cellDate.getTime() === today.getTime()) {
                    dayCell.classList.add('today');
                }
                // Future date
                else {
                    dayCell.classList.add('future');
                }
                
                // Check if this date has events
                const dateEvents = events.filter(event => 
                    event.date.getDate() === day && 
                    event.date.getMonth() === currentMonth && 
                    event.date.getFullYear() === currentYear
                );
                
                // Add day number
                const dayNumber = document.createElement('div');
                dayNumber.className = 'calendar-day-number';
                dayNumber.textContent = day;
                dayCell.appendChild(dayNumber);
                
                // Add event indicator if there are events
                if (dateEvents.length > 0) {
                    const eventIndicator = document.createElement('div');
                    eventIndicator.className = 'calendar-event-indicator';
                    
                    // Show event count instead of dots for better accessibility
                    const eventCount = document.createElement('span');
                    eventCount.className = 'event-count';
                    eventCount.textContent = dateEvents.length;
                    eventCount.setAttribute('aria-label', `${dateEvents.length} events`);
                    eventIndicator.appendChild(eventCount);
                    
                    dayCell.appendChild(eventIndicator);
                    dayCell.classList.add('has-events');
                }
                
                // Add click event to show events for this day
                dayCell.addEventListener('click', function() {
                    // Only allow interaction with future and current dates
                    if (!dayCell.classList.contains('past')) {
                        showEventsForDate(day, currentMonth, currentYear);
                    }
                });
                
                // Keyboard accessibility
                dayCell.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        if (!dayCell.classList.contains('past')) {
                            showEventsForDate(day, currentMonth, currentYear);
                        }
                    }
                });
                
                dayCell.tabIndex = 0; // Make days focusable
                calendarGrid.appendChild(dayCell);
            }
        }
        
        // Render upcoming events list
        function renderUpcomingEvents() {
            eventsList.innerHTML = '';
            
            // Check if events array is empty
            if (events.length === 0) {
                eventsList.innerHTML = `
                    <div class="empty-state">
                        <i class="far fa-calendar-plus"></i>
                        <p>No upcoming events scheduled</p>
                        <p class="small">Check back later or contact your community manager</p>
                    </div>
                `;
                return;
            }
            
            // Sort events by date
            const sortedEvents = [...events].sort((a, b) => a.date - b.date);
            
            // Filter for upcoming events only
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const upcomingEvents = sortedEvents.filter(event => event.date >= today);
            
            if (upcomingEvents.length === 0) {
                eventsList.innerHTML = `
                    <div class="empty-state">
                        <i class="far fa-calendar-plus"></i>
                        <p>No upcoming events scheduled</p>
                        <p class="small">Check back later or contact your community manager</p>
                    </div>
                `;
                return;
            }
            
            // Show next 5 events or all if less than 5
            const eventsToShow = upcomingEvents.slice(0, 5);
            
            eventsToShow.forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = 'event-list-item';
                if (event.featured) {
                    eventElement.classList.add('featured');
                }
                
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                                  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                const eventMonth = monthNames[event.date.getMonth()];
                const eventDay = event.date.getDate();
                
                // Format date status (Today, Tomorrow, or date)
                let dateStatus = `${eventMonth} ${eventDay}`;
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                if (event.date.getTime() === today.getTime()) {
                    dateStatus = "Today";
                } else if (event.date.getTime() === today.getTime() + 86400000) {
                    dateStatus = "Tomorrow";
                }
                
                eventElement.innerHTML = `
                    <div class="event-list-date">
                        <span class="event-month">${eventMonth}</span>
                        <span class="event-day">${eventDay}</span>
                    </div>
                    <div class="event-list-details">
                        <h4>${event.title}</h4>
                        <div class="event-meta">
                            <span class="event-time"><i class="far fa-clock"></i> ${formatTime(event.startTime)}</span>
                            <span class="event-location"><i class="fas fa-map-marker-alt"></i> ${event.location.split(',')[0]}</span>
                        </div>
                        ${event.featured ? '<span class="featured-badge">Featured</span>' : ''}
                        ${event.hasRsvp ? '<span class="rsvp-badge">You\'re Going</span>' : ''}
                    </div>
                    <button class="event-more-btn" aria-label="View details for ${event.title}" data-event-id="${event.id}">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                `;
                
                eventsList.appendChild(eventElement);
            });
            
            // Add "View All" button if there are more than 5 events
            if (upcomingEvents.length > 5) {
                const viewAllBtn = document.createElement('button');
                viewAllBtn.className = 'view-all-btn';
                viewAllBtn.textContent = `View All (${upcomingEvents.length})`;
                viewAllBtn.addEventListener('click', function() {
                    // In a real app, this would show all events
                    currentMonth = upcomingEvents[5].date.getMonth();
                    currentYear = upcomingEvents[5].date.getFullYear();
                    renderCalendar();
                    updateMonthYearSelectors();
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
                eventsList.appendChild(viewAllBtn);
            }
            
            // Add event listeners to "more" buttons
            document.querySelectorAll('.event-more-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const eventId = parseInt(this.getAttribute('data-event-id'));
                    const event = events.find(e => e.id === eventId);
                    if (event) {
                        showEventDetails(event);
                    }
                });
            });
        }
        
        // Show event details in modal
        function showEventDetails(event) {
            // First get the latest event details from the server
            fetch(`/Staff/GetEventDetails?id=${event.id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const eventDetails = data.event_details;
                        const eventDate = new Date(eventDetails.date);
                        
                        const monthNames = ["January", "February", "March", "April", "May", "June", 
                                          "July", "August", "September", "October", "November", "December"];
                        const eventMonth = monthNames[eventDate.getMonth()];
            
                        // Format date status (Today, Tomorrow, or date)
                        let dateStatus = `${eventMonth} ${eventDate.getDate()}, ${eventDate.getFullYear()}`;
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (eventDate.getTime() === today.getTime()) {
                            dateStatus = "Today";
                        } else if (eventDate.getTime() === today.getTime() + 86400000) {
                            dateStatus = "Tomorrow";
                        }
                        
                        // Calculate spots remaining
                        const spotsRemaining = eventDetails.capacity - eventDetails.rsvpCount;
                        const spotsText = spotsRemaining > 0 ? 
                            `${spotsRemaining} spot${spotsRemaining === 1 ? '' : 's'} remaining` : 
                            'Event full';
                        
                        // Determine RSVP button state
                        let rsvpButtonHtml = '';
                        
                        if (eventDetails.isOngoing) {
                            // Event is currently ongoing
                            rsvpButtonHtml = `
                                <button class="btn rsvp-btn disabled" disabled>
                                    <i class="fas fa-clock"></i> Event Started
                                </button>`;
                        } else if (spotsRemaining === 0 && !eventDetails.hasRsvp) {
                            // Event is full
                            rsvpButtonHtml = `
                                <button class="btn rsvp-btn disabled" disabled>
                                    <i class="fas fa-calendar-times"></i> Event Full
                                </button>`;
                        } else if (eventDetails.hasRsvp) {
                            // User is already attending
                            rsvpButtonHtml = `
                                <button class="btn rsvp-btn confirmed" onclick="window.handleRsvp(${eventDetails.id}, false)">
                                    <i class="fas fa-calendar-check"></i> You're Going!
                                </button>`;
                        } else {
                            // Normal RSVP button
                            rsvpButtonHtml = `
                                <button class="btn rsvp-btn" onclick="window.handleRsvp(${eventDetails.id}, true)">
                                    <i class="fas fa-calendar-plus"></i> RSVP Now
                                </button>`;
                        }
                        
                        eventDetailsContent.innerHTML = `
                            <div class="event-header">
                                ${eventDetails.image ? `<div class="event-image" style="background-image: url('${eventDetails.image}')"></div>` : ''}
                                <div class="event-title-container">
                                    <h2>${eventDetails.title}</h2>
                                    <div class="event-meta">
                                        <span class="event-date"><i class="far fa-calendar"></i> ${dateStatus}</span>
                                        <span class="event-time"><i class="far fa-clock"></i> ${formatTime(eventDetails.startTime)} - ${formatTime(eventDetails.endTime)}</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="event-body">
                                <div class="event-details">
                                    <div class="detail-row">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <div>
                                            <h4>Location</h4>
                                            <p>${eventDetails.location}</p>
                                        </div>
                                    </div>
                                    
                                    <div class="detail-row">
                                        <i class="fas fa-info-circle"></i>
                                        <div>
                                            <h4>Description</h4>
                                            <p>${eventDetails.description}</p>
                                        </div>
                                    </div>
                                    
                                    <div class="detail-row">
                                        <i class="fas fa-user-friends"></i>
                                        <div>
                                            <h4>Organizer</h4>
                                            <p>${eventDetails.organizer}</p>
                                            ${eventDetails.contact ? `<p class="contact"><i class="fas fa-envelope"></i> ${eventDetails.contact}</p>` : ''}
                                        </div>
                                    </div>
                                    
                                    <div class="event-tags">
                                        ${eventDetails.tags.map(tag => `<span class="tag ${tag}">${capitalizeFirstLetter(tag)}</span>`).join('')}
                                    </div>
                                </div>
                                
                                <div class="event-actions">
                                    <div class="attendance-info">
                                        <div class="progress-container">
                                            <div class="progress-bar" style="width: ${(eventDetails.rsvpCount / eventDetails.capacity) * 100}%"></div>
                                        </div>
                                        <span class="spots-remaining ${spotsRemaining === 0 ? 'full' : ''}">
                                            ${spotsText}
                                        </span>
                                    </div>
                                    
                                    ${rsvpButtonHtml}
                                    
                                    <button class="btn share-btn" onclick="window.shareEvent(${eventDetails.id}, '${eventDetails.title.replace(/'/g, "\\'")}', '${dateStatus}', '${eventDetails.location.replace(/'/g, "\\'")}')">
                                        <i class="fas fa-share-alt"></i> Share Event
                                    </button>
                                </div>
                            </div>
                        `;
                        
                        eventDetailsModal.style.display = 'flex';
                        document.body.style.overflow = 'hidden';
                    } else {
                        showToast('Error loading event details.');
                    }
                })
                .catch(error => {
                    console.error('Error fetching event details:', error);
                    showToast('Error loading event details. Please try again.');
                });
        }
        
        // Show events for a specific date in modal
        function showEventsForDate(day, month, year) {
            const filteredEvents = events.filter(event => 
                event.date.getDate() === day && 
                event.date.getMonth() === month && 
                event.date.getFullYear() === year
            );
            
            if (filteredEvents.length === 0) {
                eventDetailsContent.innerHTML = `
                    <div class="no-events-message">
                        <i class="far fa-calendar-times"></i>
                        <h3>No events scheduled</h3>
                        <p>There are no events scheduled for this day.</p>
                    </div>
                `;
            } else if (filteredEvents.length === 1) {
                // If only one event, show its details directly
                showEventDetails(filteredEvents[0]);
                return;
            } else {
                // Show list of events for this date
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                                   "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                const eventMonth = monthNames[month];
                
                // Check which events might be currently ongoing
                const now = new Date();
                const dateStr = `${year}-${month+1}-${day}`;
                
                // Create date-events-list HTML with information about event status
                const eventsListHtml = filteredEvents.map(event => {
                    // Check if event is ongoing
                    const startParts = event.startTime.split(':');
                    const endParts = event.endTime.split(':');
                    
                    const eventStartTime = new Date(year, month, day, 
                        parseInt(startParts[0]), parseInt(startParts[1]), 0);
                    const eventEndTime = new Date(year, month, day, 
                        parseInt(endParts[0]), parseInt(endParts[1]), 0);
                    
                    const isOngoing = now >= eventStartTime && now <= eventEndTime;
                    
                    return `
                        <div class="date-event-item ${event.featured ? 'featured' : ''}">
                            <div class="event-time-badge">
                                ${formatTime(event.startTime)}
                            </div>
                            <div class="event-info">
                                <h4>${event.title}</h4>
                                <p class="event-location"><i class="fas fa-map-marker-alt"></i> ${event.location.split(',')[0]}</p>
                                <div class="event-status-badges">
                                    ${event.hasRsvp ? '<span class="rsvp-badge-small">You\'re Going</span>' : ''}
                                    ${isOngoing ? '<span class="ongoing-badge">Ongoing</span>' : ''}
                                </div>
                            </div>
                            <button class="view-event-btn" data-event-id="${event.id}" aria-label="View details for ${event.title}">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                    `;
                }).join('');
                
                eventDetailsContent.innerHTML = `
                    <div class="date-events-header">
                        <h3>${eventMonth} ${day}, ${year}</h3>
                        <p>${filteredEvents.length} event${filteredEvents.length === 1 ? '' : 's'}</p>
                    </div>
                    <div class="date-events-list">
                        ${eventsListHtml}
                    </div>
                `;
                
                // Add event listeners to view buttons
                document.querySelectorAll('.view-event-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const eventId = parseInt(this.getAttribute('data-event-id'));
                        const event = events.find(e => e.id === eventId);
                        if (event) {
                            showEventDetails(event);
                        }
                    });
                });
            }
            
            eventDetailsModal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
        
        // Show toast notification
        function showToast(message) {
            toastMessage.textContent = message;
            rsvpToast.classList.add('show');
            
            setTimeout(() => {
                rsvpToast.classList.remove('show');
            }, 3000);
        }
        
        // Format time from 24h to 12h
        function formatTime(timeString) {
            const [hours, minutes] = timeString.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const hour12 = hour % 12 || 12;
            return `${hour12}:${minutes} ${ampm}`;
        }
        
        // Capitalize first letter
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        // Update month/year selectors to match current view
        function updateMonthYearSelectors() {
            monthSelect.value = currentMonth;
            yearSelect.value = currentYear;
        }
        
        // Month navigation
        prevMonthBtn.addEventListener('click', function() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            renderCalendar();
            updateMonthYearSelectors();
        });
        
        nextMonthBtn.addEventListener('click', function() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            renderCalendar();
            updateMonthYearSelectors();
        });
        
        // Month/year selector changes
        monthSelect.addEventListener('change', function() {
            currentMonth = parseInt(this.value);
            renderCalendar();
        });
        
        yearSelect.addEventListener('change', function() {
            currentYear = parseInt(this.value);
            renderCalendar();
        });
        
        // Modal close functionality
        const closeModal = document.querySelector('.close-modal');
        
        closeModal.addEventListener('click', function() {
            eventDetailsModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });
        
        window.addEventListener('click', function(event) {
            if (event.target === eventDetailsModal) {
                eventDetailsModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && eventDetailsModal.style.display === 'flex') {
                eventDetailsModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });
        
        // Get event ID from URL if present
        const urlParams = new URLSearchParams(window.location.search);
        const eventIdParam = urlParams.get('event');
        
        if (eventIdParam) {
            const eventId = parseInt(eventIdParam);
            // Fetch event details and show modal
            fetch(`/Staff/GetEventDetails?id=${eventId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const event = {
                            id: data.event_details.id,
                            date: new Date(data.event_details.date)
                        };
                        showEventDetails(event);
                    }
                })
                .catch(error => {
                    console.error('Error fetching event details from URL param:', error);
                });
        }
        
        // Initialize
        fetchEvents('upcoming');
    });
</script>
