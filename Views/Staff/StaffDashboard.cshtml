@model HomeOwner.Models.Report;
@{
    ViewData["Title"] = "Staff Dashboard";
    ViewData["Subtitle"] = "Staff Overview";
    Layout = "~/Views/Shared/StaffLayout.cshtml";
    ViewBag.ActiveMenu = "Dashboard";
}
<link rel="stylesheet" href="~/css/staff/staffdashboard.css" asp-append-version="true" />

<!-- Add Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1>Welcome back, @(ViewBag.CurrentUser?.firstname)!</h1>
        <p>Here's what's happening in your community today</p>
    </div>

    <div class="dashboard-cards">
        <div class="card">
            <div class="card-body">
                <div class="card-icon" style="background-color: #2ecc71;">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="card-info">
                    <h3>@ViewBag.CompletedServices</h3>
                    <p>Services Completed</p>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-body">
                <div class="card-icon" style="background-color: #f39c12;">
                    <i class="fas fa-tasks"></i>
                </div>
                <div class="card-info">
                    <h3>@ViewBag.PendingTasks</h3>
                    <p>Pending Tasks</p>
                </div>
            </div>
        </div>
    
        
        <div class="card">
            <div class="card-body">
                <div class="card-icon" style="background-color: #3498db;">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="card-info">
                    <h3>@ViewBag.InProgress</h3>
                    <p>In Progress</p>
                </div>
            </div>
        </div>
    </div>

    <div class="dashboard-content">
        <div class="charts-section">
            <div class="chart-container">
                <div class="chart-header">
                    <h6>Homeowners Service Requests</h6>
                    <small>Last 6 months</small>
                </div>
                <div class="chart-placeholder">
                    <canvas id="serviceRequestsChart"></canvas>
                </div>
            </div>

            <div class="chart-container">
                <div class="chart-header">
                    <h6>Your Service Completion Rate</h6>
                    <small>Current month</small>
                </div>
                <div class="chart-placeholder">
                    <canvas id="completionRateChart"></canvas>
                </div>
            </div>

            <div class="activity-card">
                <div class="card-header">
                    <h5>Recent Activities</h5>
                    <small><i class="fas fa-sync-alt"></i> Updated just now</small>
                </div>
                <div class="card-body">
                    <div class="activity-list">
                        @if (ViewBag.RecentActivities != null && ViewBag.RecentActivities.Count > 0)
                        {
                            @foreach (var activity in ViewBag.RecentActivities)
                            {
                                <div class="activity-item">
                                    <i class="fas fa-circle activity-icon"></i>
                                    <div class="activity-content">
                                        <p><strong>@activity.StaffName</strong> completed @activity.ActivityType @(!string.IsNullOrEmpty(activity.Location) ? "in " + activity.Location : "")</p>
                                        <small>@activity.TimeAgo</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="activity-item">
                                <div class="activity-content">
                                    <p>No recent activities found.</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="sidebar-section">
            <div class="quick-actions-card">
                <div class="card-header">
                    <h5>Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="quick-actions">
                        <button class="btn btn-primary" id="createTrashSchedule">
                            <i class="fas fa-trash-alt"></i> Create Trash Schedule
                        </button>
                        <button class="btn btn-warning" id="reportIssue">
                            <i class="fas fa-tools"></i> Report Issue
                        </button>
                    </div>
                </div>
            </div>

            <div class="activity-card upcoming-tasks-card">
                <div class="card-header">
                    <h5>Upcoming Tasks</h5>
                    <small>Next 7 days</small>
                </div>
                <div class="card-body">
                    <div class="activity-list upcoming-tasks">
                        @if (ViewBag.UpcomingTasks != null && ViewBag.UpcomingTasks.Count > 0)
                        {
                            @foreach (var task in ViewBag.UpcomingTasks)
                            {
                                string iconColor = task.Status == "In Progress" ? "#3498db" : "#f39c12";
                                string taskType = task.IsServiceRequest ? task.Type : $"{task.Type}: {task.Facility}";
                                
                                // Format the date string
                                DateTime taskDate = task.Date;
                                string dateString = taskDate.ToString("yyyy-MM-dd") == DateTime.Now.ToString("yyyy-MM-dd") 
                                    ? $"Today, {task.Time}" 
                                    : taskDate.ToString("yyyy-MM-dd") == DateTime.Now.AddDays(1).ToString("yyyy-MM-dd") 
                                        ? $"Tomorrow, {task.Time}" 
                                        : $"{taskDate.ToString("dddd, MMM dd")}, {task.Time}";
                                        
                                <div class="activity-item">
                                    <i class="fas fa-circle activity-icon" style="color: @iconColor;"></i>
                                    <div class="activity-content">
                                        <p><strong>@taskType</strong> - @task.HomeownerName</p>
                                        <small>@dateString</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="activity-item">
                                <div class="activity-content">
                                    <p>No upcoming tasks for the next 7 days.</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Trash Schedule Modal -->
<div class="modal-overlay" id="trashScheduleModal">
    <div class="modal-container">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create New Trash Collection Schedule</h3>
                <button class="modal-close" id="closeTrashScheduleModal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="trashScheduleForm">
                    <div class="form-group">
                        <label for="scheduleType">Schedule Type</label>
                        <select class="form-control" id="scheduleType" required>
                            <option value="" selected disabled>Select type</option>
                            <option value="regular">Regular Trash Collection</option>
                            <option value="recycling">Recycling Collection</option>
                            <option value="hazardous">Hazardous Waste Collection</option>
                            <option value="bulk">Bulk Item Collection</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="scheduleDate">Collection Date</label>
                        <input type="date" class="form-control" id="scheduleDate" required>
                    </div>
                    <div class="form-group">
                        <label for="scheduleTime">Collection Time</label>
                        <input type="time" class="form-control" id="scheduleTime" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="cancelTrashSchedule">Cancel</button>
                <button class="btn btn-primary" id="submitTrashSchedule">Create Schedule</button>
            </div>
        </div>
    </div>
</div>

<!-- Report Issue Modal -->
<div class="modal-overlay" id="reportIssueModal">
    <div class="modal-container">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Report New Issue</h3>
                <button type="button" class="modal-close" id="closeReportIssueModal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="reportIssueForm" method="post">
                    <div class="form-group">
                        <label for="report_type">Issue Type</label>
                        <select class="form-control" id="report_type" name="report_type" required>
                            <option value="" selected disabled>Select issue type</option>
                            <option value="plumbing">Plumbing</option>
                            <option value="electrical">Electrical</option>
                            <option value="structural">Structural</option>
                            <option value="appliance">Appliance</option>
                            <option value="security">Security</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="report_facility">Facility</label>
                        <select class="form-control" id="report_facility" name="report_facility" required>
                            <option value="" selected disabled>Select facility</option>
                            <option value="function_hall">Function Hall</option>
                            <option value="sports_court">Sports Court</option>
                            <option value="swimming_pool">Swimming Pool</option>
                            <option value="gym">Gym</option>
                            <option value="clubhouse">Clubhouse</option>
                            <option value="playground">Playground</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="report_severity">Severity</label>
                        <select class="form-control" id="report_severity" name="report_severity" required>
                            <option value="low">Low (Non-urgent)</option>
                            <option value="medium" selected>Medium (Normal priority)</option>
                            <option value="high">High (Urgent)</option>
                            <option value="critical">Critical (Emergency)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="report_description">Description</label>
                        <textarea class="form-control" id="report_description" name="report_description" rows="4" required minlength="10"></textarea>
                    </div>
                    
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="cancelReportIssue">Cancel</button>
                        <button type="button" class="btn btn-warning" id="submitIssueReport">
                            <i class="fas fa-exclamation-triangle"></i> Report Issue
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let isSubmitting = false;

    document.addEventListener('DOMContentLoaded', function() {
        // Homeowners Service Requests Chart - Using real data
        const serviceRequestsCtx = document.getElementById('serviceRequestsChart').getContext('2d');
        const serviceRequestsChart = new Chart(serviceRequestsCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.MonthLabels)),
                datasets: [
                    {
                        label: 'Service Requests',
                        data: @Html.Raw(Json.Serialize(ViewBag.ServiceData)),
                        backgroundColor: '#6D4C41',
                        borderColor: '#4E342E',
                        borderWidth: 1,
                        borderRadius: 4,
                        barThickness: 'flex',
                        maxBarThickness: 30
                    },
                    {
                        label: 'Facility Reservations',
                        data: @Html.Raw(Json.Serialize(ViewBag.FacilityData)),
                        backgroundColor: '#8D6E63',
                        borderColor: '#6D4C41',
                        borderWidth: 1,
                        borderRadius: 4,
                        barThickness: 'flex',
                        maxBarThickness: 30
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        title: {
                            display: true,
                            text: 'Number of Requests'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        },
                        stacked: false
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            pointStyle: 'circle'
                        }
                    },
                    tooltip: {
                        backgroundColor: '#6D4C41',
                        titleFont: {
                            weight: 'bold'
                        },
                        bodyFont: {
                            weight: 'normal'
                        },
                        padding: 12,
                        cornerRadius: 8,
                        mode: 'index',
                        intersect: false
                    }
                }
            }
        });

        // Staff Completion Rate Chart - Using real data
        const completionRateCtx = document.getElementById('completionRateChart').getContext('2d');
        const completionRateChart = new Chart(completionRateCtx, {
            type: 'doughnut',
            data: {
                labels: ['Completed', 'Pending', 'In Progress'],
                datasets: [{
                    data: [@ViewBag.CompletedServices, @ViewBag.PendingTasks, @ViewBag.InProgress],
                    backgroundColor: [
                        '#2ecc71', // Green for completed
                        '#f39c12', // Orange for pending
                        '#3498db'  // Blue for in progress
                    ],
                    borderWidth: 0,
                    hoverOffset: 8
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '70%',
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true,
                            pointStyle: 'circle',
                            font: {
                                weight: '500'
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: '#6D4C41',
                        titleFont: {
                            weight: 'bold'
                        },
                        bodyFont: {
                            weight: 'normal'
                        },
                        padding: 12,
                        cornerRadius: 8,
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw || 0;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });

        // Modal functionality
        const trashScheduleModal = document.getElementById('trashScheduleModal');
        const reportIssueModal = document.getElementById('reportIssueModal');

        // Open/Close Trash Schedule Modal
        document.getElementById('createTrashSchedule').addEventListener('click', function() {
            trashScheduleModal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        });

        document.getElementById('closeTrashScheduleModal').addEventListener('click', function() {
            trashScheduleModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });

        document.getElementById('cancelTrashSchedule').addEventListener('click', function() {
            trashScheduleModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });

        // Open/Close Report Issue Modal
        document.getElementById('reportIssue').addEventListener('click', function() {
            document.getElementById('reportIssueModal').style.display = 'flex';
            document.body.style.overflow = 'hidden';
        });

        document.getElementById('closeReportIssueModal').addEventListener('click', function() {
            document.getElementById('reportIssueModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        });

        document.getElementById('cancelReportIssue').addEventListener('click', function() {
            document.getElementById('reportIssueModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === trashScheduleModal) {
                trashScheduleModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
            if (event.target === reportIssueModal) {
                reportIssueModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });

        // Form Submissions
        document.getElementById('submitTrashSchedule').addEventListener('click', function() {
            const form = document.getElementById('trashScheduleForm');
            if (form.checkValidity()) {
                // Here you would typically send the data to the server
                const formData = {
                    type: document.getElementById('scheduleType').value,
                    date: document.getElementById('scheduleDate').value,
                    time: document.getElementById('scheduleTime').value
                };
                
                console.log('Submitting trash schedule:', formData);
                
                // Simulate successful submission
                alert('Trash collection schedule created successfully!');
                trashScheduleModal.style.display = 'none';
                document.body.style.overflow = 'auto';
                
                // Reset form
                form.reset();
            } else {
                form.reportValidity();
            }
        });

        // Submit button click handler
        document.getElementById('submitIssueReport').addEventListener('click', function() {
            // Show confirmation
            Swal.fire({
                title: 'Confirm Submission',
                text: 'Are you sure you want to submit this issue report?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#6D4C41',
                cancelButtonColor: '#757575',
                confirmButtonText: 'Yes, Submit',
                cancelButtonText: 'No, Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    submitIssueForm();
                }
            });
        });
        
        function submitIssueForm() {
            if (isSubmitting) return;
            isSubmitting = true;
            
            // Get the form data
            const form = document.getElementById('reportIssueForm');
            const formData = new FormData(form);
            
            // Verify data is being captured correctly
            console.log('Report Type:', formData.get('report_type'));
            console.log('Report Facility:', formData.get('report_facility'));
            console.log('Report Severity:', formData.get('report_severity'));
            console.log('Report Description:', formData.get('report_description'));
            
            // Submit the form
            const submitButton = document.getElementById('submitIssueReport');
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
            
            // Use fetch API for AJAX request
            fetch('/Staff/AddReport', {
                method: 'POST',
                body: formData,
                // Don't set Content-Type, let the browser handle it for FormData
            })
            .then(response => {
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message || 'Your issue has been reported successfully.',
                        confirmButtonColor: '#6D4C41'
                    }).then(() => {
                        // Reset form and close modal
                        form.reset();
                        document.getElementById('reportIssueModal').style.display = 'none';
                        document.body.style.overflow = 'auto';
                    });
                } else {
                    throw new Error(data.message || 'Failed to submit report');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to submit report. Please try again.',
                    confirmButtonColor: '#6D4C41'
                });
            })
            .finally(() => {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Report Issue';
                isSubmitting = false;
            });
        }

        // Responsive adjustments
        function handleResize() {
            serviceRequestsChart.resize();
            completionRateChart.resize();
        }

        window.addEventListener('resize', handleResize);
    });
</script>
